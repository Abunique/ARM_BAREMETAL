
MULTI_BUTTON_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000298c  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002bd8  08002bd8  00003bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002be8  08002be8  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002be8  08002be8  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002be8  08002be8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002be8  08002be8  00003be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002bec  08002bec  00003bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002bf0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08002bfc  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08002bfc  00004080  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5ba  00000000  00000000  00004042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000197f  00000000  00000000  000115fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  00012f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000936  00000000  00000000  00013b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030792  00000000  00000000  000144b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd8c  00000000  00000000  00044c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00139d2c  00000000  00000000  000529d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018c700  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003254  00000000  00000000  0018c744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0018f998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000000c 	.word	0x2000000c
 8000268:	00000000 	.word	0x00000000
 800026c:	08002bc0 	.word	0x08002bc0

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000010 	.word	0x20000010
 8000288:	08002bc0 	.word	0x08002bc0

0800028c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b08a      	sub	sp, #40	@ 0x28
 8000290:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000292:	f107 0314 	add.w	r3, r7, #20
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]
 80002a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002a2:	4b59      	ldr	r3, [pc, #356]	@ (8000408 <MX_GPIO_Init+0x17c>)
 80002a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80002a8:	4a57      	ldr	r2, [pc, #348]	@ (8000408 <MX_GPIO_Init+0x17c>)
 80002aa:	f043 0304 	orr.w	r3, r3, #4
 80002ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80002b2:	4b55      	ldr	r3, [pc, #340]	@ (8000408 <MX_GPIO_Init+0x17c>)
 80002b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80002b8:	f003 0304 	and.w	r3, r3, #4
 80002bc:	613b      	str	r3, [r7, #16]
 80002be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002c0:	4b51      	ldr	r3, [pc, #324]	@ (8000408 <MX_GPIO_Init+0x17c>)
 80002c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80002c6:	4a50      	ldr	r2, [pc, #320]	@ (8000408 <MX_GPIO_Init+0x17c>)
 80002c8:	f043 0320 	orr.w	r3, r3, #32
 80002cc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80002d0:	4b4d      	ldr	r3, [pc, #308]	@ (8000408 <MX_GPIO_Init+0x17c>)
 80002d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80002d6:	f003 0320 	and.w	r3, r3, #32
 80002da:	60fb      	str	r3, [r7, #12]
 80002dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002de:	4b4a      	ldr	r3, [pc, #296]	@ (8000408 <MX_GPIO_Init+0x17c>)
 80002e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80002e4:	4a48      	ldr	r2, [pc, #288]	@ (8000408 <MX_GPIO_Init+0x17c>)
 80002e6:	f043 0302 	orr.w	r3, r3, #2
 80002ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80002ee:	4b46      	ldr	r3, [pc, #280]	@ (8000408 <MX_GPIO_Init+0x17c>)
 80002f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80002f4:	f003 0302 	and.w	r3, r3, #2
 80002f8:	60bb      	str	r3, [r7, #8]
 80002fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80002fc:	4b42      	ldr	r3, [pc, #264]	@ (8000408 <MX_GPIO_Init+0x17c>)
 80002fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000302:	4a41      	ldr	r2, [pc, #260]	@ (8000408 <MX_GPIO_Init+0x17c>)
 8000304:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000308:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800030c:	4b3e      	ldr	r3, [pc, #248]	@ (8000408 <MX_GPIO_Init+0x17c>)
 800030e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000316:	607b      	str	r3, [r7, #4]
 8000318:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800031a:	2200      	movs	r2, #0
 800031c:	2110      	movs	r1, #16
 800031e:	483b      	ldr	r0, [pc, #236]	@ (800040c <MX_GPIO_Init+0x180>)
 8000320:	f000 feb4 	bl	800108c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000324:	2200      	movs	r2, #0
 8000326:	2101      	movs	r1, #1
 8000328:	4839      	ldr	r0, [pc, #228]	@ (8000410 <MX_GPIO_Init+0x184>)
 800032a:	f000 feaf 	bl	800108c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED4_NA_Pin|LED3_Pin, GPIO_PIN_RESET);
 800032e:	2200      	movs	r2, #0
 8000330:	2118      	movs	r1, #24
 8000332:	4838      	ldr	r0, [pc, #224]	@ (8000414 <MX_GPIO_Init+0x188>)
 8000334:	f000 feaa 	bl	800108c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = ON_OFF_button_Pin|SEQUENCE_SRT_STP_Pin|IDLE_ALL_OFF_Pin;
 8000338:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800033c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800033e:	4b36      	ldr	r3, [pc, #216]	@ (8000418 <MX_GPIO_Init+0x18c>)
 8000340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000342:	2300      	movs	r3, #0
 8000344:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000346:	f107 0314 	add.w	r3, r7, #20
 800034a:	4619      	mov	r1, r3
 800034c:	4833      	ldr	r0, [pc, #204]	@ (800041c <MX_GPIO_Init+0x190>)
 800034e:	f000 fd4b 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERR_BUTTON_Pin;
 8000352:	2301      	movs	r3, #1
 8000354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000356:	4b30      	ldr	r3, [pc, #192]	@ (8000418 <MX_GPIO_Init+0x18c>)
 8000358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035a:	2300      	movs	r3, #0
 800035c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ERR_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800035e:	f107 0314 	add.w	r3, r7, #20
 8000362:	4619      	mov	r1, r3
 8000364:	4829      	ldr	r0, [pc, #164]	@ (800040c <MX_GPIO_Init+0x180>)
 8000366:	f000 fd3f 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800036a:	2310      	movs	r3, #16
 800036c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800036e:	2301      	movs	r3, #1
 8000370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000372:	2300      	movs	r3, #0
 8000374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000376:	2300      	movs	r3, #0
 8000378:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800037a:	f107 0314 	add.w	r3, r7, #20
 800037e:	4619      	mov	r1, r3
 8000380:	4822      	ldr	r0, [pc, #136]	@ (800040c <MX_GPIO_Init+0x180>)
 8000382:	f000 fd31 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000386:	2301      	movs	r3, #1
 8000388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800038a:	2301      	movs	r3, #1
 800038c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038e:	2300      	movs	r3, #0
 8000390:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000392:	2300      	movs	r3, #0
 8000394:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000396:	f107 0314 	add.w	r3, r7, #20
 800039a:	4619      	mov	r1, r3
 800039c:	481c      	ldr	r0, [pc, #112]	@ (8000410 <MX_GPIO_Init+0x184>)
 800039e:	f000 fd23 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LED4_NA_Pin|LED3_Pin;
 80003a2:	2318      	movs	r3, #24
 80003a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a6:	2301      	movs	r3, #1
 80003a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003aa:	2300      	movs	r3, #0
 80003ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ae:	2300      	movs	r3, #0
 80003b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80003b2:	f107 0314 	add.w	r3, r7, #20
 80003b6:	4619      	mov	r1, r3
 80003b8:	4816      	ldr	r0, [pc, #88]	@ (8000414 <MX_GPIO_Init+0x188>)
 80003ba:	f000 fd15 	bl	8000de8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80003be:	2200      	movs	r2, #0
 80003c0:	2100      	movs	r1, #0
 80003c2:	200b      	movs	r0, #11
 80003c4:	f000 fc38 	bl	8000c38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80003c8:	200b      	movs	r0, #11
 80003ca:	f000 fc4f 	bl	8000c6c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 80003ce:	2200      	movs	r2, #0
 80003d0:	2100      	movs	r1, #0
 80003d2:	2018      	movs	r0, #24
 80003d4:	f000 fc30 	bl	8000c38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 80003d8:	2018      	movs	r0, #24
 80003da:	f000 fc47 	bl	8000c6c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI14_IRQn, 0, 0);
 80003de:	2200      	movs	r2, #0
 80003e0:	2100      	movs	r1, #0
 80003e2:	2019      	movs	r0, #25
 80003e4:	f000 fc28 	bl	8000c38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI14_IRQn);
 80003e8:	2019      	movs	r0, #25
 80003ea:	f000 fc3f 	bl	8000c6c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_IRQn, 0, 0);
 80003ee:	2200      	movs	r2, #0
 80003f0:	2100      	movs	r1, #0
 80003f2:	201a      	movs	r0, #26
 80003f4:	f000 fc20 	bl	8000c38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_IRQn);
 80003f8:	201a      	movs	r0, #26
 80003fa:	f000 fc37 	bl	8000c6c <HAL_NVIC_EnableIRQ>

}
 80003fe:	bf00      	nop
 8000400:	3728      	adds	r7, #40	@ 0x28
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	44020c00 	.word	0x44020c00
 800040c:	42021400 	.word	0x42021400
 8000410:	42020400 	.word	0x42020400
 8000414:	42021800 	.word	0x42021800
 8000418:	10110000 	.word	0x10110000
 800041c:	42020800 	.word	0x42020800

08000420 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000424:	f000 fa92 	bl	800094c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000428:	f000 f850 	bl	80004cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800042c:	f7ff ff2e 	bl	800028c <MX_GPIO_Init>
  MX_TIM3_Init();
 8000430:	f000 f9f2 	bl	8000818 <MX_TIM3_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //idle state
	  if (HAL_GetTick() - lastDebounceTime > 3000) {//idle state button-longpress detection
 8000434:	f000 fb3c 	bl	8000ab0 <HAL_GetTick>
 8000438:	4602      	mov	r2, r0
 800043a:	4b1d      	ldr	r3, [pc, #116]	@ (80004b0 <main+0x90>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	1ad3      	subs	r3, r2, r3
 8000440:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000444:	4293      	cmp	r3, r2
 8000446:	d902      	bls.n	800044e <main+0x2e>
		  idle_button = 1;
 8000448:	4b1a      	ldr	r3, [pc, #104]	@ (80004b4 <main+0x94>)
 800044a:	2201      	movs	r2, #1
 800044c:	701a      	strb	r2, [r3, #0]
#undef RUNNING
#undef ERROR

	  }
//ERR state
	  if(ERR==2){//ERR button double press
 800044e:	4b1a      	ldr	r3, [pc, #104]	@ (80004b8 <main+0x98>)
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	2b02      	cmp	r3, #2
 8000454:	d108      	bne.n	8000468 <main+0x48>
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4,1);//PG4 LED indication//solid on
 8000456:	2201      	movs	r2, #1
 8000458:	2110      	movs	r1, #16
 800045a:	4818      	ldr	r0, [pc, #96]	@ (80004bc <main+0x9c>)
 800045c:	f000 fe16 	bl	800108c <HAL_GPIO_WritePin>
		  ERR=0;//ERR flag reset
 8000460:	4b15      	ldr	r3, [pc, #84]	@ (80004b8 <main+0x98>)
 8000462:	2200      	movs	r2, #0
 8000464:	701a      	strb	r2, [r3, #0]
 8000466:	e004      	b.n	8000472 <main+0x52>

#define ERROR
	  }else
		  {
#undef ERROR
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4,0);//LED OFF
 8000468:	2200      	movs	r2, #0
 800046a:	2110      	movs	r1, #16
 800046c:	4813      	ldr	r0, [pc, #76]	@ (80004bc <main+0x9c>)
 800046e:	f000 fe0d 	bl	800108c <HAL_GPIO_WritePin>
		  }
// ON/OFF state
	  if(ON_OFF)//ON state
 8000472:	4b13      	ldr	r3, [pc, #76]	@ (80004c0 <main+0xa0>)
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d012      	beq.n	80004a0 <main+0x80>
	  {
#define RUNNING
		  if(SSTR_STP)//sequence start
 800047a:	4b12      	ldr	r3, [pc, #72]	@ (80004c4 <main+0xa4>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d007      	beq.n	8000492 <main+0x72>
		  {
#define SEQUENCE
			  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000482:	4811      	ldr	r0, [pc, #68]	@ (80004c8 <main+0xa8>)
 8000484:	f001 fd9e 	bl	8001fc4 <HAL_TIM_Base_Init>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <main+0x72>
			    {
			      Error_Handler();
 800048e:	f000 f8db 	bl	8000648 <Error_Handler>
			    }//blinking LED every 1 sec with timer_interrupt

		  }
		  if(SSTR_STP==2)//sequence stop
 8000492:	4b0c      	ldr	r3, [pc, #48]	@ (80004c4 <main+0xa4>)
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	2b02      	cmp	r3, #2
 8000498:	d102      	bne.n	80004a0 <main+0x80>
		  {
#undef SEQUENCE
			  SSTR_STP=0;//sstr_stp flag reset
 800049a:	4b0a      	ldr	r3, [pc, #40]	@ (80004c4 <main+0xa4>)
 800049c:	2200      	movs	r2, #0
 800049e:	701a      	strb	r2, [r3, #0]
		  }

	  }
	  if(ON_OFF==2)//OFF state
 80004a0:	4b07      	ldr	r3, [pc, #28]	@ (80004c0 <main+0xa0>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b02      	cmp	r3, #2
 80004a6:	d1c5      	bne.n	8000434 <main+0x14>
	  {
#define IDLE
#undef RUNNING
		  ON_OFF=0;//ON_OFF flag reset
 80004a8:	4b05      	ldr	r3, [pc, #20]	@ (80004c0 <main+0xa0>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	701a      	strb	r2, [r3, #0]
	  if (HAL_GetTick() - lastDebounceTime > 3000) {//idle state button-longpress detection
 80004ae:	e7c1      	b.n	8000434 <main+0x14>
 80004b0:	20000028 	.word	0x20000028
 80004b4:	2000002c 	.word	0x2000002c
 80004b8:	2000002f 	.word	0x2000002f
 80004bc:	42021800 	.word	0x42021800
 80004c0:	2000002d 	.word	0x2000002d
 80004c4:	2000002e 	.word	0x2000002e
 80004c8:	20000030 	.word	0x20000030

080004cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b09c      	sub	sp, #112	@ 0x70
 80004d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d2:	f107 0320 	add.w	r3, r7, #32
 80004d6:	2250      	movs	r2, #80	@ 0x50
 80004d8:	2100      	movs	r1, #0
 80004da:	4618      	mov	r0, r3
 80004dc:	f002 fb44 	bl	8002b68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e0:	f107 0308 	add.w	r3, r7, #8
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
 80004ee:	611a      	str	r2, [r3, #16]
 80004f0:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80004f2:	4b2e      	ldr	r3, [pc, #184]	@ (80005ac <SystemClock_Config+0xe0>)
 80004f4:	691b      	ldr	r3, [r3, #16]
 80004f6:	4a2d      	ldr	r2, [pc, #180]	@ (80005ac <SystemClock_Config+0xe0>)
 80004f8:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80004fc:	6113      	str	r3, [r2, #16]
 80004fe:	4b2b      	ldr	r3, [pc, #172]	@ (80005ac <SystemClock_Config+0xe0>)
 8000500:	691b      	ldr	r3, [r3, #16]
 8000502:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800050a:	bf00      	nop
 800050c:	4b27      	ldr	r3, [pc, #156]	@ (80005ac <SystemClock_Config+0xe0>)
 800050e:	695b      	ldr	r3, [r3, #20]
 8000510:	f003 0308 	and.w	r3, r3, #8
 8000514:	2b08      	cmp	r3, #8
 8000516:	d1f9      	bne.n	800050c <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000518:	2302      	movs	r3, #2
 800051a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800051c:	2301      	movs	r3, #1
 800051e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000520:	2300      	movs	r3, #0
 8000522:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000524:	2340      	movs	r3, #64	@ 0x40
 8000526:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000528:	2302      	movs	r3, #2
 800052a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSI;
 800052c:	2301      	movs	r3, #1
 800052e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000530:	2304      	movs	r3, #4
 8000532:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 31;
 8000534:	231f      	movs	r3, #31
 8000536:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000538:	2302      	movs	r3, #2
 800053a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800053c:	2302      	movs	r3, #2
 800053e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000540:	2302      	movs	r3, #2
 8000542:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8000544:	230c      	movs	r3, #12
 8000546:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000548:	2300      	movs	r3, #0
 800054a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 2048;
 800054c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000550:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000552:	f107 0320 	add.w	r3, r7, #32
 8000556:	4618      	mov	r0, r3
 8000558:	f000 fdfc 	bl	8001154 <HAL_RCC_OscConfig>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000562:	f000 f871 	bl	8000648 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000566:	231f      	movs	r3, #31
 8000568:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056a:	2303      	movs	r3, #3
 800056c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056e:	2300      	movs	r3, #0
 8000570:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800057a:	2300      	movs	r3, #0
 800057c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800057e:	f107 0308 	add.w	r3, r7, #8
 8000582:	2105      	movs	r1, #5
 8000584:	4618      	mov	r0, r3
 8000586:	f001 fa1d 	bl	80019c4 <HAL_RCC_ClockConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000590:	f000 f85a 	bl	8000648 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000594:	4b06      	ldr	r3, [pc, #24]	@ (80005b0 <SystemClock_Config+0xe4>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800059c:	4a04      	ldr	r2, [pc, #16]	@ (80005b0 <SystemClock_Config+0xe4>)
 800059e:	f043 0320 	orr.w	r3, r3, #32
 80005a2:	6013      	str	r3, [r2, #0]
}
 80005a4:	bf00      	nop
 80005a6:	3770      	adds	r7, #112	@ 0x70
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	44020800 	.word	0x44020800
 80005b0:	40022000 	.word	0x40022000

080005b4 <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	80fb      	strh	r3, [r7, #6]
 if(GPIO_Pin == GPIO_PIN_13){
 80005be:	88fb      	ldrh	r3, [r7, #6]
 80005c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80005c4:	d109      	bne.n	80005da <HAL_GPIO_EXTI_Rising_Callback+0x26>
 //ON/OFF button
	 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);//PB0 LED indication
 80005c6:	2101      	movs	r1, #1
 80005c8:	4818      	ldr	r0, [pc, #96]	@ (800062c <HAL_GPIO_EXTI_Rising_Callback+0x78>)
 80005ca:	f000 fd77 	bl	80010bc <HAL_GPIO_TogglePin>
	 ON_OFF++;//on=1,off=2
 80005ce:	4b18      	ldr	r3, [pc, #96]	@ (8000630 <HAL_GPIO_EXTI_Rising_Callback+0x7c>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	3301      	adds	r3, #1
 80005d4:	b2da      	uxtb	r2, r3
 80005d6:	4b16      	ldr	r3, [pc, #88]	@ (8000630 <HAL_GPIO_EXTI_Rising_Callback+0x7c>)
 80005d8:	701a      	strb	r2, [r3, #0]
 }
 if(GPIO_Pin == GPIO_PIN_14){
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80005e0:	d109      	bne.n	80005f6 <HAL_GPIO_EXTI_Rising_Callback+0x42>
	 //Sequence start stop flag
	 HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_4);//PF4 LED indication
 80005e2:	2110      	movs	r1, #16
 80005e4:	4813      	ldr	r0, [pc, #76]	@ (8000634 <HAL_GPIO_EXTI_Rising_Callback+0x80>)
 80005e6:	f000 fd69 	bl	80010bc <HAL_GPIO_TogglePin>
	 SSTR_STP++;//start =1,stp=2
 80005ea:	4b13      	ldr	r3, [pc, #76]	@ (8000638 <HAL_GPIO_EXTI_Rising_Callback+0x84>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	3301      	adds	r3, #1
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <HAL_GPIO_EXTI_Rising_Callback+0x84>)
 80005f4:	701a      	strb	r2, [r3, #0]
 }
 if(GPIO_Pin == GPIO_PIN_15){
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80005fc:	d107      	bne.n	800060e <HAL_GPIO_EXTI_Rising_Callback+0x5a>
	 lastDebounceTime = HAL_GetTick();
 80005fe:	f000 fa57 	bl	8000ab0 <HAL_GetTick>
 8000602:	4603      	mov	r3, r0
 8000604:	4a0d      	ldr	r2, [pc, #52]	@ (800063c <HAL_GPIO_EXTI_Rising_Callback+0x88>)
 8000606:	6013      	str	r3, [r2, #0]
	 idle_button = 0;
 8000608:	4b0d      	ldr	r3, [pc, #52]	@ (8000640 <HAL_GPIO_EXTI_Rising_Callback+0x8c>)
 800060a:	2200      	movs	r2, #0
 800060c:	701a      	strb	r2, [r3, #0]
  }
 if(GPIO_Pin == GPIO_PIN_10){
 800060e:	88fb      	ldrh	r3, [r7, #6]
 8000610:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000614:	d105      	bne.n	8000622 <HAL_GPIO_EXTI_Rising_Callback+0x6e>
	 //error state flag
	 ERR ++;//double press makes the variable 2
 8000616:	4b0b      	ldr	r3, [pc, #44]	@ (8000644 <HAL_GPIO_EXTI_Rising_Callback+0x90>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	3301      	adds	r3, #1
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4b09      	ldr	r3, [pc, #36]	@ (8000644 <HAL_GPIO_EXTI_Rising_Callback+0x90>)
 8000620:	701a      	strb	r2, [r3, #0]
  }
 }
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	42020400 	.word	0x42020400
 8000630:	2000002d 	.word	0x2000002d
 8000634:	42021400 	.word	0x42021400
 8000638:	2000002e 	.word	0x2000002e
 800063c:	20000028 	.word	0x20000028
 8000640:	2000002c 	.word	0x2000002c
 8000644:	2000002f 	.word	0x2000002f

08000648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800064c:	b672      	cpsid	i
}
 800064e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000650:	bf00      	nop
 8000652:	e7fd      	b.n	8000650 <Error_Handler+0x8>

08000654 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr

08000662 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000666:	bf00      	nop
 8000668:	e7fd      	b.n	8000666 <NMI_Handler+0x4>

0800066a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800066e:	bf00      	nop
 8000670:	e7fd      	b.n	800066e <HardFault_Handler+0x4>

08000672 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000676:	bf00      	nop
 8000678:	e7fd      	b.n	8000676 <MemManage_Handler+0x4>

0800067a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800067a:	b480      	push	{r7}
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800067e:	bf00      	nop
 8000680:	e7fd      	b.n	800067e <BusFault_Handler+0x4>

08000682 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000686:	bf00      	nop
 8000688:	e7fd      	b.n	8000686 <UsageFault_Handler+0x4>

0800068a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006b8:	f000 f9e6 	bl	8000a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}

080006c0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ERR_BUTTON_Pin);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f000 fd13 	bl	80010f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}

080006ce <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ON_OFF_button_Pin);
 80006d2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80006d6:	f000 fd0b 	bl	80010f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}

080006de <EXTI14_IRQHandler>:

/**
  * @brief This function handles EXTI Line14 interrupt.
  */
void EXTI14_IRQHandler(void)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI14_IRQn 0 */

  /* USER CODE END EXTI14_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SEQUENCE_SRT_STP_Pin);
 80006e2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80006e6:	f000 fd03 	bl	80010f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI14_IRQn 1 */

  /* USER CODE END EXTI14_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}

080006ee <EXTI15_IRQHandler>:

/**
  * @brief This function handles EXTI Line15 interrupt.
  */
void EXTI15_IRQHandler(void)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_IRQn 0 */

  /* USER CODE END EXTI15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IDLE_ALL_OFF_Pin);
 80006f2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80006f6:	f000 fcfb 	bl	80010f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_IRQn 1 */

  /* USER CODE END EXTI15_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000704:	4804      	ldr	r0, [pc, #16]	@ (8000718 <TIM3_IRQHandler+0x18>)
 8000706:	f001 fcb4 	bl	8002072 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_3);//toggling LED for sequence mode every 1 sec
 800070a:	2108      	movs	r1, #8
 800070c:	4803      	ldr	r0, [pc, #12]	@ (800071c <TIM3_IRQHandler+0x1c>)
 800070e:	f000 fcd5 	bl	80010bc <HAL_GPIO_TogglePin>
  /* USER CODE END TIM3_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000030 	.word	0x20000030
 800071c:	42021800 	.word	0x42021800

08000720 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000726:	4b35      	ldr	r3, [pc, #212]	@ (80007fc <SystemInit+0xdc>)
 8000728:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800072c:	4a33      	ldr	r2, [pc, #204]	@ (80007fc <SystemInit+0xdc>)
 800072e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000732:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000736:	4b32      	ldr	r3, [pc, #200]	@ (8000800 <SystemInit+0xe0>)
 8000738:	2201      	movs	r2, #1
 800073a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800073c:	4b30      	ldr	r3, [pc, #192]	@ (8000800 <SystemInit+0xe0>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000742:	4b2f      	ldr	r3, [pc, #188]	@ (8000800 <SystemInit+0xe0>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000748:	4b2d      	ldr	r3, [pc, #180]	@ (8000800 <SystemInit+0xe0>)
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	492c      	ldr	r1, [pc, #176]	@ (8000800 <SystemInit+0xe0>)
 800074e:	4b2d      	ldr	r3, [pc, #180]	@ (8000804 <SystemInit+0xe4>)
 8000750:	4013      	ands	r3, r2
 8000752:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000754:	4b2a      	ldr	r3, [pc, #168]	@ (8000800 <SystemInit+0xe0>)
 8000756:	2200      	movs	r2, #0
 8000758:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800075a:	4b29      	ldr	r3, [pc, #164]	@ (8000800 <SystemInit+0xe0>)
 800075c:	2200      	movs	r2, #0
 800075e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000760:	4b27      	ldr	r3, [pc, #156]	@ (8000800 <SystemInit+0xe0>)
 8000762:	2200      	movs	r2, #0
 8000764:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000766:	4b26      	ldr	r3, [pc, #152]	@ (8000800 <SystemInit+0xe0>)
 8000768:	4a27      	ldr	r2, [pc, #156]	@ (8000808 <SystemInit+0xe8>)
 800076a:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 800076c:	4b24      	ldr	r3, [pc, #144]	@ (8000800 <SystemInit+0xe0>)
 800076e:	2200      	movs	r2, #0
 8000770:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000772:	4b23      	ldr	r3, [pc, #140]	@ (8000800 <SystemInit+0xe0>)
 8000774:	4a24      	ldr	r2, [pc, #144]	@ (8000808 <SystemInit+0xe8>)
 8000776:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000778:	4b21      	ldr	r3, [pc, #132]	@ (8000800 <SystemInit+0xe0>)
 800077a:	2200      	movs	r2, #0
 800077c:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800077e:	4b20      	ldr	r3, [pc, #128]	@ (8000800 <SystemInit+0xe0>)
 8000780:	4a21      	ldr	r2, [pc, #132]	@ (8000808 <SystemInit+0xe8>)
 8000782:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000784:	4b1e      	ldr	r3, [pc, #120]	@ (8000800 <SystemInit+0xe0>)
 8000786:	2200      	movs	r2, #0
 8000788:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800078a:	4b1d      	ldr	r3, [pc, #116]	@ (8000800 <SystemInit+0xe0>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a1c      	ldr	r2, [pc, #112]	@ (8000800 <SystemInit+0xe0>)
 8000790:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000794:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000796:	4b1a      	ldr	r3, [pc, #104]	@ (8000800 <SystemInit+0xe0>)
 8000798:	2200      	movs	r2, #0
 800079a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800079c:	4b17      	ldr	r3, [pc, #92]	@ (80007fc <SystemInit+0xdc>)
 800079e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80007a2:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80007a4:	4b19      	ldr	r3, [pc, #100]	@ (800080c <SystemInit+0xec>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80007ac:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80007b4:	d003      	beq.n	80007be <SystemInit+0x9e>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80007bc:	d117      	bne.n	80007ee <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80007be:	4b13      	ldr	r3, [pc, #76]	@ (800080c <SystemInit+0xec>)
 80007c0:	69db      	ldr	r3, [r3, #28]
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d005      	beq.n	80007d6 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80007ca:	4b10      	ldr	r3, [pc, #64]	@ (800080c <SystemInit+0xec>)
 80007cc:	4a10      	ldr	r2, [pc, #64]	@ (8000810 <SystemInit+0xf0>)
 80007ce:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80007d0:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <SystemInit+0xec>)
 80007d2:	4a10      	ldr	r2, [pc, #64]	@ (8000814 <SystemInit+0xf4>)
 80007d4:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80007d6:	4b0d      	ldr	r3, [pc, #52]	@ (800080c <SystemInit+0xec>)
 80007d8:	69db      	ldr	r3, [r3, #28]
 80007da:	4a0c      	ldr	r2, [pc, #48]	@ (800080c <SystemInit+0xec>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80007e2:	4b0a      	ldr	r3, [pc, #40]	@ (800080c <SystemInit+0xec>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	4a09      	ldr	r2, [pc, #36]	@ (800080c <SystemInit+0xec>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	61d3      	str	r3, [r2, #28]
  }
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	e000ed00 	.word	0xe000ed00
 8000800:	44020c00 	.word	0x44020c00
 8000804:	eae2eae3 	.word	0xeae2eae3
 8000808:	01010280 	.word	0x01010280
 800080c:	40022000 	.word	0x40022000
 8000810:	08192a3b 	.word	0x08192a3b
 8000814:	4c5d6e7f 	.word	0x4c5d6e7f

08000818 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b088      	sub	sp, #32
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081e:	f107 0310 	add.w	r3, r7, #16
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000836:	4b1a      	ldr	r3, [pc, #104]	@ (80008a0 <MX_TIM3_Init+0x88>)
 8000838:	4a1a      	ldr	r2, [pc, #104]	@ (80008a4 <MX_TIM3_Init+0x8c>)
 800083a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24999;
 800083c:	4b18      	ldr	r3, [pc, #96]	@ (80008a0 <MX_TIM3_Init+0x88>)
 800083e:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 8000842:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000844:	4b16      	ldr	r3, [pc, #88]	@ (80008a0 <MX_TIM3_Init+0x88>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800084a:	4b15      	ldr	r3, [pc, #84]	@ (80008a0 <MX_TIM3_Init+0x88>)
 800084c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000850:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000852:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <MX_TIM3_Init+0x88>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000858:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <MX_TIM3_Init+0x88>)
 800085a:	2200      	movs	r2, #0
 800085c:	619a      	str	r2, [r3, #24]
//  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
//  {
//    Error_Handler();
//  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800085e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000862:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000864:	f107 0310 	add.w	r3, r7, #16
 8000868:	4619      	mov	r1, r3
 800086a:	480d      	ldr	r0, [pc, #52]	@ (80008a0 <MX_TIM3_Init+0x88>)
 800086c:	f001 fd50 	bl	8002310 <HAL_TIM_ConfigClockSource>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8000876:	f7ff fee7 	bl	8000648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	4619      	mov	r1, r3
 8000886:	4806      	ldr	r0, [pc, #24]	@ (80008a0 <MX_TIM3_Init+0x88>)
 8000888:	f002 f858 	bl	800293c <HAL_TIMEx_MasterConfigSynchronization>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000892:	f7ff fed9 	bl	8000648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	3720      	adds	r7, #32
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000030 	.word	0x20000030
 80008a4:	40000400 	.word	0x40000400

080008a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a0e      	ldr	r2, [pc, #56]	@ (80008f0 <HAL_TIM_Base_MspInit+0x48>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d116      	bne.n	80008e8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008ba:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <HAL_TIM_Base_MspInit+0x4c>)
 80008bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80008c0:	4a0c      	ldr	r2, [pc, #48]	@ (80008f4 <HAL_TIM_Base_MspInit+0x4c>)
 80008c2:	f043 0302 	orr.w	r3, r3, #2
 80008c6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80008ca:	4b0a      	ldr	r3, [pc, #40]	@ (80008f4 <HAL_TIM_Base_MspInit+0x4c>)
 80008cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80008d0:	f003 0302 	and.w	r3, r3, #2
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80008d8:	2200      	movs	r2, #0
 80008da:	2100      	movs	r1, #0
 80008dc:	202e      	movs	r0, #46	@ 0x2e
 80008de:	f000 f9ab 	bl	8000c38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80008e2:	202e      	movs	r0, #46	@ 0x2e
 80008e4:	f000 f9c2 	bl	8000c6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80008e8:	bf00      	nop
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40000400 	.word	0x40000400
 80008f4:	44020c00 	.word	0x44020c00

080008f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008f8:	480d      	ldr	r0, [pc, #52]	@ (8000930 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008fc:	f7ff ff10 	bl	8000720 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000900:	480c      	ldr	r0, [pc, #48]	@ (8000934 <LoopForever+0x6>)
  ldr r1, =_edata
 8000902:	490d      	ldr	r1, [pc, #52]	@ (8000938 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000904:	4a0d      	ldr	r2, [pc, #52]	@ (800093c <LoopForever+0xe>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000908:	e002      	b.n	8000910 <LoopCopyDataInit>

0800090a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800090c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090e:	3304      	adds	r3, #4

08000910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000914:	d3f9      	bcc.n	800090a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000916:	4a0a      	ldr	r2, [pc, #40]	@ (8000940 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000918:	4c0a      	ldr	r4, [pc, #40]	@ (8000944 <LoopForever+0x16>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800091c:	e001      	b.n	8000922 <LoopFillZerobss>

0800091e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000920:	3204      	adds	r2, #4

08000922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000924:	d3fb      	bcc.n	800091e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000926:	f002 f927 	bl	8002b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800092a:	f7ff fd79 	bl	8000420 <main>

0800092e <LoopForever>:

LoopForever:
    b LoopForever
 800092e:	e7fe      	b.n	800092e <LoopForever>
  ldr   r0, =_estack
 8000930:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000938:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800093c:	08002bf0 	.word	0x08002bf0
  ldr r2, =_sbss
 8000940:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000944:	20000080 	.word	0x20000080

08000948 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000948:	e7fe      	b.n	8000948 <ADC1_IRQHandler>
	...

0800094c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000950:	2003      	movs	r0, #3
 8000952:	f000 f966 	bl	8000c22 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000956:	f001 f9ed 	bl	8001d34 <HAL_RCC_GetSysClockFreq>
 800095a:	4602      	mov	r2, r0
 800095c:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <HAL_Init+0x44>)
 800095e:	6a1b      	ldr	r3, [r3, #32]
 8000960:	f003 030f 	and.w	r3, r3, #15
 8000964:	490b      	ldr	r1, [pc, #44]	@ (8000994 <HAL_Init+0x48>)
 8000966:	5ccb      	ldrb	r3, [r1, r3]
 8000968:	fa22 f303 	lsr.w	r3, r2, r3
 800096c:	4a0a      	ldr	r2, [pc, #40]	@ (8000998 <HAL_Init+0x4c>)
 800096e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000970:	2004      	movs	r0, #4
 8000972:	f000 f9ab 	bl	8000ccc <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000976:	200f      	movs	r0, #15
 8000978:	f000 f810 	bl	800099c <HAL_InitTick>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e002      	b.n	800098c <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000986:	f7ff fe65 	bl	8000654 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800098a:	2300      	movs	r3, #0
}
 800098c:	4618      	mov	r0, r3
 800098e:	bd80      	pop	{r7, pc}
 8000990:	44020c00 	.word	0x44020c00
 8000994:	08002bd8 	.word	0x08002bd8
 8000998:	20000000 	.word	0x20000000

0800099c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80009a8:	4b33      	ldr	r3, [pc, #204]	@ (8000a78 <HAL_InitTick+0xdc>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d101      	bne.n	80009b4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80009b0:	2301      	movs	r3, #1
 80009b2:	e05c      	b.n	8000a6e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80009b4:	4b31      	ldr	r3, [pc, #196]	@ (8000a7c <HAL_InitTick+0xe0>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f003 0304 	and.w	r3, r3, #4
 80009bc:	2b04      	cmp	r3, #4
 80009be:	d10c      	bne.n	80009da <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80009c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000a80 <HAL_InitTick+0xe4>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000a78 <HAL_InitTick+0xdc>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	4619      	mov	r1, r3
 80009ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80009d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	e037      	b.n	8000a4a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80009da:	f000 f9cf 	bl	8000d7c <HAL_SYSTICK_GetCLKSourceConfig>
 80009de:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	d023      	beq.n	8000a2e <HAL_InitTick+0x92>
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d82d      	bhi.n	8000a48 <HAL_InitTick+0xac>
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d003      	beq.n	80009fa <HAL_InitTick+0x5e>
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d00d      	beq.n	8000a14 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80009f8:	e026      	b.n	8000a48 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80009fa:	4b21      	ldr	r3, [pc, #132]	@ (8000a80 <HAL_InitTick+0xe4>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000a78 <HAL_InitTick+0xdc>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	4619      	mov	r1, r3
 8000a04:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000a08:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a10:	60fb      	str	r3, [r7, #12]
        break;
 8000a12:	e01a      	b.n	8000a4a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000a14:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <HAL_InitTick+0xdc>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a22:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2a:	60fb      	str	r3, [r7, #12]
        break;
 8000a2c:	e00d      	b.n	8000a4a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000a2e:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <HAL_InitTick+0xdc>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a38:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a3c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a44:	60fb      	str	r3, [r7, #12]
        break;
 8000a46:	e000      	b.n	8000a4a <HAL_InitTick+0xae>
        break;
 8000a48:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000a4a:	68f8      	ldr	r0, [r7, #12]
 8000a4c:	f000 f91c 	bl	8000c88 <HAL_SYSTICK_Config>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	e009      	b.n	8000a6e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	6879      	ldr	r1, [r7, #4]
 8000a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8000a62:	f000 f8e9 	bl	8000c38 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000a66:	4a07      	ldr	r2, [pc, #28]	@ (8000a84 <HAL_InitTick+0xe8>)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000008 	.word	0x20000008
 8000a7c:	e000e010 	.word	0xe000e010
 8000a80:	20000000 	.word	0x20000000
 8000a84:	20000004 	.word	0x20000004

08000a88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <HAL_IncTick+0x20>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <HAL_IncTick+0x24>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4413      	add	r3, r2
 8000a98:	4a04      	ldr	r2, [pc, #16]	@ (8000aac <HAL_IncTick+0x24>)
 8000a9a:	6013      	str	r3, [r2, #0]
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	20000008 	.word	0x20000008
 8000aac:	2000007c 	.word	0x2000007c

08000ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab4:	4b03      	ldr	r3, [pc, #12]	@ (8000ac4 <HAL_GetTick+0x14>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	2000007c 	.word	0x2000007c

08000ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <__NVIC_SetPriorityGrouping+0x44>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000af4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000afa:	4a04      	ldr	r2, [pc, #16]	@ (8000b0c <__NVIC_SetPriorityGrouping+0x44>)
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	60d3      	str	r3, [r2, #12]
}
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b14:	4b04      	ldr	r3, [pc, #16]	@ (8000b28 <__NVIC_GetPriorityGrouping+0x18>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	0a1b      	lsrs	r3, r3, #8
 8000b1a:	f003 0307 	and.w	r3, r3, #7
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	db0b      	blt.n	8000b56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b3e:	88fb      	ldrh	r3, [r7, #6]
 8000b40:	f003 021f 	and.w	r2, r3, #31
 8000b44:	4907      	ldr	r1, [pc, #28]	@ (8000b64 <__NVIC_EnableIRQ+0x38>)
 8000b46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b4a:	095b      	lsrs	r3, r3, #5
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000e100 	.word	0xe000e100

08000b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	6039      	str	r1, [r7, #0]
 8000b72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	db0a      	blt.n	8000b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	490c      	ldr	r1, [pc, #48]	@ (8000bb4 <__NVIC_SetPriority+0x4c>)
 8000b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b86:	0112      	lsls	r2, r2, #4
 8000b88:	b2d2      	uxtb	r2, r2
 8000b8a:	440b      	add	r3, r1
 8000b8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b90:	e00a      	b.n	8000ba8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	4908      	ldr	r1, [pc, #32]	@ (8000bb8 <__NVIC_SetPriority+0x50>)
 8000b98:	88fb      	ldrh	r3, [r7, #6]
 8000b9a:	f003 030f 	and.w	r3, r3, #15
 8000b9e:	3b04      	subs	r3, #4
 8000ba0:	0112      	lsls	r2, r2, #4
 8000ba2:	b2d2      	uxtb	r2, r2
 8000ba4:	440b      	add	r3, r1
 8000ba6:	761a      	strb	r2, [r3, #24]
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000e100 	.word	0xe000e100
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b089      	sub	sp, #36	@ 0x24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	f1c3 0307 	rsb	r3, r3, #7
 8000bd6:	2b04      	cmp	r3, #4
 8000bd8:	bf28      	it	cs
 8000bda:	2304      	movcs	r3, #4
 8000bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3304      	adds	r3, #4
 8000be2:	2b06      	cmp	r3, #6
 8000be4:	d902      	bls.n	8000bec <NVIC_EncodePriority+0x30>
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3b03      	subs	r3, #3
 8000bea:	e000      	b.n	8000bee <NVIC_EncodePriority+0x32>
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	43da      	mvns	r2, r3
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	401a      	ands	r2, r3
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c04:	f04f 31ff 	mov.w	r1, #4294967295
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0e:	43d9      	mvns	r1, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	4313      	orrs	r3, r2
         );
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3724      	adds	r7, #36	@ 0x24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f7ff ff4c 	bl	8000ac8 <__NVIC_SetPriorityGrouping>
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
 8000c44:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c46:	f7ff ff63 	bl	8000b10 <__NVIC_GetPriorityGrouping>
 8000c4a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	68b9      	ldr	r1, [r7, #8]
 8000c50:	6978      	ldr	r0, [r7, #20]
 8000c52:	f7ff ffb3 	bl	8000bbc <NVIC_EncodePriority>
 8000c56:	4602      	mov	r2, r0
 8000c58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff ff82 	bl	8000b68 <__NVIC_SetPriority>
}
 8000c64:	bf00      	nop
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff ff56 	bl	8000b2c <__NVIC_EnableIRQ>
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c98:	d301      	bcc.n	8000c9e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00d      	b.n	8000cba <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc8 <HAL_SYSTICK_Config+0x40>)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000ca6:	4b08      	ldr	r3, [pc, #32]	@ (8000cc8 <HAL_SYSTICK_Config+0x40>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000cac:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <HAL_SYSTICK_Config+0x40>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a05      	ldr	r2, [pc, #20]	@ (8000cc8 <HAL_SYSTICK_Config+0x40>)
 8000cb2:	f043 0303 	orr.w	r3, r3, #3
 8000cb6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000e010 	.word	0xe000e010

08000ccc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	d844      	bhi.n	8000d64 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000cda:	a201      	add	r2, pc, #4	@ (adr r2, 8000ce0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce0:	08000d03 	.word	0x08000d03
 8000ce4:	08000d21 	.word	0x08000d21
 8000ce8:	08000d43 	.word	0x08000d43
 8000cec:	08000d65 	.word	0x08000d65
 8000cf0:	08000cf5 	.word	0x08000cf5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d74 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a1e      	ldr	r2, [pc, #120]	@ (8000d74 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000cfa:	f043 0304 	orr.w	r3, r3, #4
 8000cfe:	6013      	str	r3, [r2, #0]
      break;
 8000d00:	e031      	b.n	8000d66 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000d02:	4b1c      	ldr	r3, [pc, #112]	@ (8000d74 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a1b      	ldr	r2, [pc, #108]	@ (8000d74 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000d08:	f023 0304 	bic.w	r3, r3, #4
 8000d0c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d78 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000d10:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000d14:	4a18      	ldr	r2, [pc, #96]	@ (8000d78 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000d16:	f023 030c 	bic.w	r3, r3, #12
 8000d1a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000d1e:	e022      	b.n	8000d66 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000d20:	4b14      	ldr	r3, [pc, #80]	@ (8000d74 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a13      	ldr	r2, [pc, #76]	@ (8000d74 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000d26:	f023 0304 	bic.w	r3, r3, #4
 8000d2a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8000d2c:	4b12      	ldr	r3, [pc, #72]	@ (8000d78 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000d2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000d32:	f023 030c 	bic.w	r3, r3, #12
 8000d36:	4a10      	ldr	r2, [pc, #64]	@ (8000d78 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000d38:	f043 0304 	orr.w	r3, r3, #4
 8000d3c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000d40:	e011      	b.n	8000d66 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000d42:	4b0c      	ldr	r3, [pc, #48]	@ (8000d74 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a0b      	ldr	r2, [pc, #44]	@ (8000d74 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000d48:	f023 0304 	bic.w	r3, r3, #4
 8000d4c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000d50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000d54:	f023 030c 	bic.w	r3, r3, #12
 8000d58:	4a07      	ldr	r2, [pc, #28]	@ (8000d78 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000d5a:	f043 0308 	orr.w	r3, r3, #8
 8000d5e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000d62:	e000      	b.n	8000d66 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000d64:	bf00      	nop
  }
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000e010 	.word	0xe000e010
 8000d78:	44020c00 	.word	0x44020c00

08000d7c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8000d82:	4b17      	ldr	r3, [pc, #92]	@ (8000de0 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f003 0304 	and.w	r3, r3, #4
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d002      	beq.n	8000d94 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8000d8e:	2304      	movs	r3, #4
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	e01e      	b.n	8000dd2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8000d94:	4b13      	ldr	r3, [pc, #76]	@ (8000de4 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8000d96:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000d9a:	f003 030c 	and.w	r3, r3, #12
 8000d9e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	2b08      	cmp	r3, #8
 8000da4:	d00f      	beq.n	8000dc6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	2b08      	cmp	r3, #8
 8000daa:	d80f      	bhi.n	8000dcc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d003      	beq.n	8000dba <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	2b04      	cmp	r3, #4
 8000db6:	d003      	beq.n	8000dc0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8000db8:	e008      	b.n	8000dcc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
        break;
 8000dbe:	e008      	b.n	8000dd2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	607b      	str	r3, [r7, #4]
        break;
 8000dc4:	e005      	b.n	8000dd2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	607b      	str	r3, [r7, #4]
        break;
 8000dca:	e002      	b.n	8000dd2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	607b      	str	r3, [r7, #4]
        break;
 8000dd0:	bf00      	nop
    }
  }
  return systick_source;
 8000dd2:	687b      	ldr	r3, [r7, #4]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000e010 	.word	0xe000e010
 8000de4:	44020c00 	.word	0x44020c00

08000de8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b087      	sub	sp, #28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000df6:	e136      	b.n	8001066 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	fa01 f303 	lsl.w	r3, r1, r3
 8000e04:	4013      	ands	r3, r2
 8000e06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f000 8128 	beq.w	8001060 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d003      	beq.n	8000e20 <HAL_GPIO_Init+0x38>
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2b12      	cmp	r3, #18
 8000e1e:	d125      	bne.n	8000e6c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	08da      	lsrs	r2, r3, #3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3208      	adds	r2, #8
 8000e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e2c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	f003 0307 	and.w	r3, r3, #7
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	220f      	movs	r2, #15
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	697a      	ldr	r2, [r7, #20]
 8000e40:	4013      	ands	r3, r2
 8000e42:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	691b      	ldr	r3, [r3, #16]
 8000e48:	f003 020f 	and.w	r2, r3, #15
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	697a      	ldr	r2, [r7, #20]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	08da      	lsrs	r2, r3, #3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3208      	adds	r2, #8
 8000e66:	6979      	ldr	r1, [r7, #20]
 8000e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	2203      	movs	r2, #3
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	697a      	ldr	r2, [r7, #20]
 8000e80:	4013      	ands	r3, r2
 8000e82:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 0203 	and.w	r2, r3, #3
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	697a      	ldr	r2, [r7, #20]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	697a      	ldr	r2, [r7, #20]
 8000e9e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d00b      	beq.n	8000ec0 <HAL_GPIO_Init+0xd8>
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d007      	beq.n	8000ec0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eb4:	2b11      	cmp	r3, #17
 8000eb6:	d003      	beq.n	8000ec0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b12      	cmp	r3, #18
 8000ebe:	d130      	bne.n	8000f22 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	2203      	movs	r2, #3
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	697a      	ldr	r2, [r7, #20]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	68da      	ldr	r2, [r3, #12]
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	697a      	ldr	r2, [r7, #20]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	697a      	ldr	r2, [r7, #20]
 8000eee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	4013      	ands	r3, r2
 8000f04:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	091b      	lsrs	r3, r3, #4
 8000f0c:	f003 0201 	and.w	r2, r3, #1
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	2b03      	cmp	r3, #3
 8000f28:	d017      	beq.n	8000f5a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	2203      	movs	r2, #3
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	689a      	ldr	r2, [r3, #8]
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	697a      	ldr	r2, [r7, #20]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d07c      	beq.n	8001060 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000f66:	4a47      	ldr	r2, [pc, #284]	@ (8001084 <HAL_GPIO_Init+0x29c>)
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	089b      	lsrs	r3, r3, #2
 8000f6c:	3318      	adds	r3, #24
 8000f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f72:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	220f      	movs	r2, #15
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	697a      	ldr	r2, [r7, #20]
 8000f86:	4013      	ands	r3, r2
 8000f88:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	0a9a      	lsrs	r2, r3, #10
 8000f8e:	4b3e      	ldr	r3, [pc, #248]	@ (8001088 <HAL_GPIO_Init+0x2a0>)
 8000f90:	4013      	ands	r3, r2
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	f002 0203 	and.w	r2, r2, #3
 8000f98:	00d2      	lsls	r2, r2, #3
 8000f9a:	4093      	lsls	r3, r2
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000fa2:	4938      	ldr	r1, [pc, #224]	@ (8001084 <HAL_GPIO_Init+0x29c>)
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	089b      	lsrs	r3, r3, #2
 8000fa8:	3318      	adds	r3, #24
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000fb0:	4b34      	ldr	r3, [pc, #208]	@ (8001084 <HAL_GPIO_Init+0x29c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8000fcc:	697a      	ldr	r2, [r7, #20]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000fd4:	4a2b      	ldr	r2, [pc, #172]	@ (8001084 <HAL_GPIO_Init+0x29c>)
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8000fda:	4b2a      	ldr	r3, [pc, #168]	@ (8001084 <HAL_GPIO_Init+0x29c>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	697a      	ldr	r2, [r7, #20]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000ffe:	4a21      	ldr	r2, [pc, #132]	@ (8001084 <HAL_GPIO_Init+0x29c>)
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001004:	4b1f      	ldr	r3, [pc, #124]	@ (8001084 <HAL_GPIO_Init+0x29c>)
 8001006:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800100a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	43db      	mvns	r3, r3
 8001010:	697a      	ldr	r2, [r7, #20]
 8001012:	4013      	ands	r3, r2
 8001014:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4313      	orrs	r3, r2
 8001028:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800102a:	4a16      	ldr	r2, [pc, #88]	@ (8001084 <HAL_GPIO_Init+0x29c>)
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001032:	4b14      	ldr	r3, [pc, #80]	@ (8001084 <HAL_GPIO_Init+0x29c>)
 8001034:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001038:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	43db      	mvns	r3, r3
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	4013      	ands	r3, r2
 8001042:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8001050:	697a      	ldr	r2, [r7, #20]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	4313      	orrs	r3, r2
 8001056:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001058:	4a0a      	ldr	r2, [pc, #40]	@ (8001084 <HAL_GPIO_Init+0x29c>)
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	3301      	adds	r3, #1
 8001064:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	fa22 f303 	lsr.w	r3, r2, r3
 8001070:	2b00      	cmp	r3, #0
 8001072:	f47f aec1 	bne.w	8000df8 <HAL_GPIO_Init+0x10>
  }
}
 8001076:	bf00      	nop
 8001078:	bf00      	nop
 800107a:	371c      	adds	r7, #28
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	44022000 	.word	0x44022000
 8001088:	002f7f7f 	.word	0x002f7f7f

0800108c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	807b      	strh	r3, [r7, #2]
 8001098:	4613      	mov	r3, r2
 800109a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800109c:	787b      	ldrb	r3, [r7, #1]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010a2:	887a      	ldrh	r2, [r7, #2]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010a8:	e002      	b.n	80010b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010aa:	887a      	ldrh	r2, [r7, #2]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	695b      	ldr	r3, [r3, #20]
 80010cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010ce:	887a      	ldrh	r2, [r7, #2]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4013      	ands	r3, r2
 80010d4:	041a      	lsls	r2, r3, #16
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	43d9      	mvns	r1, r3
 80010da:	887b      	ldrh	r3, [r7, #2]
 80010dc:	400b      	ands	r3, r1
 80010de:	431a      	orrs	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	619a      	str	r2, [r3, #24]
}
 80010e4:	bf00      	nop
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80010fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001138 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80010fc:	68da      	ldr	r2, [r3, #12]
 80010fe:	88fb      	ldrh	r3, [r7, #6]
 8001100:	4013      	ands	r3, r2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d006      	beq.n	8001114 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001106:	4a0c      	ldr	r2, [pc, #48]	@ (8001138 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800110c:	88fb      	ldrh	r3, [r7, #6]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fa50 	bl	80005b4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8001114:	4b08      	ldr	r3, [pc, #32]	@ (8001138 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001116:	691a      	ldr	r2, [r3, #16]
 8001118:	88fb      	ldrh	r3, [r7, #6]
 800111a:	4013      	ands	r3, r2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d006      	beq.n	800112e <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001120:	4a05      	ldr	r2, [pc, #20]	@ (8001138 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001122:	88fb      	ldrh	r3, [r7, #6]
 8001124:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	4618      	mov	r0, r3
 800112a:	f000 f807 	bl	800113c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	44022000 	.word	0x44022000

0800113c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d102      	bne.n	8001168 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	f000 bc28 	b.w	80019b8 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001168:	4b94      	ldr	r3, [pc, #592]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 800116a:	69db      	ldr	r3, [r3, #28]
 800116c:	f003 0318 	and.w	r3, r3, #24
 8001170:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001172:	4b92      	ldr	r3, [pc, #584]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 8001174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0310 	and.w	r3, r3, #16
 8001184:	2b00      	cmp	r3, #0
 8001186:	d05b      	beq.n	8001240 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	2b08      	cmp	r3, #8
 800118c:	d005      	beq.n	800119a <HAL_RCC_OscConfig+0x46>
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	2b18      	cmp	r3, #24
 8001192:	d114      	bne.n	80011be <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	2b02      	cmp	r3, #2
 8001198:	d111      	bne.n	80011be <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d102      	bne.n	80011a8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	f000 bc08 	b.w	80019b8 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80011a8:	4b84      	ldr	r3, [pc, #528]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a1b      	ldr	r3, [r3, #32]
 80011b4:	041b      	lsls	r3, r3, #16
 80011b6:	4981      	ldr	r1, [pc, #516]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 80011b8:	4313      	orrs	r3, r2
 80011ba:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80011bc:	e040      	b.n	8001240 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d023      	beq.n	800120e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80011c6:	4b7d      	ldr	r3, [pc, #500]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a7c      	ldr	r2, [pc, #496]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 80011cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d2:	f7ff fc6d 	bl	8000ab0 <HAL_GetTick>
 80011d6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80011d8:	e008      	b.n	80011ec <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80011da:	f7ff fc69 	bl	8000ab0 <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e3e5      	b.n	80019b8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80011ec:	4b73      	ldr	r3, [pc, #460]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0f0      	beq.n	80011da <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80011f8:	4b70      	ldr	r3, [pc, #448]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a1b      	ldr	r3, [r3, #32]
 8001204:	041b      	lsls	r3, r3, #16
 8001206:	496d      	ldr	r1, [pc, #436]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 8001208:	4313      	orrs	r3, r2
 800120a:	618b      	str	r3, [r1, #24]
 800120c:	e018      	b.n	8001240 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800120e:	4b6b      	ldr	r3, [pc, #428]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a6a      	ldr	r2, [pc, #424]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 8001214:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001218:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800121a:	f7ff fc49 	bl	8000ab0 <HAL_GetTick>
 800121e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001222:	f7ff fc45 	bl	8000ab0 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e3c1      	b.n	80019b8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001234:	4b61      	ldr	r3, [pc, #388]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1f0      	bne.n	8001222 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	2b00      	cmp	r3, #0
 800124a:	f000 80a0 	beq.w	800138e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	2b10      	cmp	r3, #16
 8001252:	d005      	beq.n	8001260 <HAL_RCC_OscConfig+0x10c>
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	2b18      	cmp	r3, #24
 8001258:	d109      	bne.n	800126e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	2b03      	cmp	r3, #3
 800125e:	d106      	bne.n	800126e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	f040 8092 	bne.w	800138e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e3a4      	b.n	80019b8 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001276:	d106      	bne.n	8001286 <HAL_RCC_OscConfig+0x132>
 8001278:	4b50      	ldr	r3, [pc, #320]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a4f      	ldr	r2, [pc, #316]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 800127e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	e058      	b.n	8001338 <HAL_RCC_OscConfig+0x1e4>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d112      	bne.n	80012b4 <HAL_RCC_OscConfig+0x160>
 800128e:	4b4b      	ldr	r3, [pc, #300]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a4a      	ldr	r2, [pc, #296]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 8001294:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	4b48      	ldr	r3, [pc, #288]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a47      	ldr	r2, [pc, #284]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 80012a0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	4b45      	ldr	r3, [pc, #276]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a44      	ldr	r2, [pc, #272]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 80012ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	e041      	b.n	8001338 <HAL_RCC_OscConfig+0x1e4>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012bc:	d112      	bne.n	80012e4 <HAL_RCC_OscConfig+0x190>
 80012be:	4b3f      	ldr	r3, [pc, #252]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a3e      	ldr	r2, [pc, #248]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 80012c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	4b3c      	ldr	r3, [pc, #240]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a3b      	ldr	r2, [pc, #236]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 80012d0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	4b39      	ldr	r3, [pc, #228]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a38      	ldr	r2, [pc, #224]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 80012dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	e029      	b.n	8001338 <HAL_RCC_OscConfig+0x1e4>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80012ec:	d112      	bne.n	8001314 <HAL_RCC_OscConfig+0x1c0>
 80012ee:	4b33      	ldr	r3, [pc, #204]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a32      	ldr	r2, [pc, #200]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 80012f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	4b30      	ldr	r3, [pc, #192]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a2f      	ldr	r2, [pc, #188]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 8001300:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	4b2d      	ldr	r3, [pc, #180]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a2c      	ldr	r2, [pc, #176]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 800130c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	e011      	b.n	8001338 <HAL_RCC_OscConfig+0x1e4>
 8001314:	4b29      	ldr	r3, [pc, #164]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a28      	ldr	r2, [pc, #160]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 800131a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	4b26      	ldr	r3, [pc, #152]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a25      	ldr	r2, [pc, #148]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 8001326:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	4b23      	ldr	r3, [pc, #140]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a22      	ldr	r2, [pc, #136]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 8001332:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d013      	beq.n	8001368 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001340:	f7ff fbb6 	bl	8000ab0 <HAL_GetTick>
 8001344:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001348:	f7ff fbb2 	bl	8000ab0 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b64      	cmp	r3, #100	@ 0x64
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e32e      	b.n	80019b8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800135a:	4b18      	ldr	r3, [pc, #96]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0f0      	beq.n	8001348 <HAL_RCC_OscConfig+0x1f4>
 8001366:	e012      	b.n	800138e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001368:	f7ff fba2 	bl	8000ab0 <HAL_GetTick>
 800136c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001370:	f7ff fb9e 	bl	8000ab0 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b64      	cmp	r3, #100	@ 0x64
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e31a      	b.n	80019b8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001382:	4b0e      	ldr	r3, [pc, #56]	@ (80013bc <HAL_RCC_OscConfig+0x268>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f0      	bne.n	8001370 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 809a 	beq.w	80014d0 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d005      	beq.n	80013ae <HAL_RCC_OscConfig+0x25a>
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	2b18      	cmp	r3, #24
 80013a6:	d149      	bne.n	800143c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d146      	bne.n	800143c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d104      	bne.n	80013c0 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e2fe      	b.n	80019b8 <HAL_RCC_OscConfig+0x864>
 80013ba:	bf00      	nop
 80013bc:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d11c      	bne.n	8001400 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80013c6:	4b9a      	ldr	r3, [pc, #616]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0218 	and.w	r2, r3, #24
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d014      	beq.n	8001400 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80013d6:	4b96      	ldr	r3, [pc, #600]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f023 0218 	bic.w	r2, r3, #24
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	4993      	ldr	r1, [pc, #588]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80013e8:	f000 fdd0 	bl	8001f8c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80013ec:	4b91      	ldr	r3, [pc, #580]	@ (8001634 <HAL_RCC_OscConfig+0x4e0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fad3 	bl	800099c <HAL_InitTick>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e2db      	b.n	80019b8 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001400:	f7ff fb56 	bl	8000ab0 <HAL_GetTick>
 8001404:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001408:	f7ff fb52 	bl	8000ab0 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e2ce      	b.n	80019b8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800141a:	4b85      	ldr	r3, [pc, #532]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f0      	beq.n	8001408 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001426:	4b82      	ldr	r3, [pc, #520]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	041b      	lsls	r3, r3, #16
 8001434:	497e      	ldr	r1, [pc, #504]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 8001436:	4313      	orrs	r3, r2
 8001438:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800143a:	e049      	b.n	80014d0 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d02c      	beq.n	800149e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001444:	4b7a      	ldr	r3, [pc, #488]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f023 0218 	bic.w	r2, r3, #24
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	4977      	ldr	r1, [pc, #476]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 8001452:	4313      	orrs	r3, r2
 8001454:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001456:	4b76      	ldr	r3, [pc, #472]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a75      	ldr	r2, [pc, #468]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001462:	f7ff fb25 	bl	8000ab0 <HAL_GetTick>
 8001466:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800146a:	f7ff fb21 	bl	8000ab0 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e29d      	b.n	80019b8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800147c:	4b6c      	ldr	r3, [pc, #432]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0f0      	beq.n	800146a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001488:	4b69      	ldr	r3, [pc, #420]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	695b      	ldr	r3, [r3, #20]
 8001494:	041b      	lsls	r3, r3, #16
 8001496:	4966      	ldr	r1, [pc, #408]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 8001498:	4313      	orrs	r3, r2
 800149a:	610b      	str	r3, [r1, #16]
 800149c:	e018      	b.n	80014d0 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800149e:	4b64      	ldr	r3, [pc, #400]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a63      	ldr	r2, [pc, #396]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 80014a4:	f023 0301 	bic.w	r3, r3, #1
 80014a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014aa:	f7ff fb01 	bl	8000ab0 <HAL_GetTick>
 80014ae:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80014b2:	f7ff fafd 	bl	8000ab0 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e279      	b.n	80019b8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014c4:	4b5a      	ldr	r3, [pc, #360]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d1f0      	bne.n	80014b2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0308 	and.w	r3, r3, #8
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d03c      	beq.n	8001556 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d01c      	beq.n	800151e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014e4:	4b52      	ldr	r3, [pc, #328]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 80014e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014ea:	4a51      	ldr	r2, [pc, #324]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 80014ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80014f0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f4:	f7ff fadc 	bl	8000ab0 <HAL_GetTick>
 80014f8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80014fc:	f7ff fad8 	bl	8000ab0 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e254      	b.n	80019b8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800150e:	4b48      	ldr	r3, [pc, #288]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 8001510:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001514:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0ef      	beq.n	80014fc <HAL_RCC_OscConfig+0x3a8>
 800151c:	e01b      	b.n	8001556 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800151e:	4b44      	ldr	r3, [pc, #272]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 8001520:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001524:	4a42      	ldr	r2, [pc, #264]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 8001526:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800152a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800152e:	f7ff fabf 	bl	8000ab0 <HAL_GetTick>
 8001532:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001536:	f7ff fabb 	bl	8000ab0 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e237      	b.n	80019b8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001548:	4b39      	ldr	r3, [pc, #228]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 800154a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800154e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1ef      	bne.n	8001536 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 80d2 	beq.w	8001708 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001564:	4b34      	ldr	r3, [pc, #208]	@ (8001638 <HAL_RCC_OscConfig+0x4e4>)
 8001566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	2b00      	cmp	r3, #0
 800156e:	d118      	bne.n	80015a2 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001570:	4b31      	ldr	r3, [pc, #196]	@ (8001638 <HAL_RCC_OscConfig+0x4e4>)
 8001572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001574:	4a30      	ldr	r2, [pc, #192]	@ (8001638 <HAL_RCC_OscConfig+0x4e4>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800157c:	f7ff fa98 	bl	8000ab0 <HAL_GetTick>
 8001580:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001584:	f7ff fa94 	bl	8000ab0 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e210      	b.n	80019b8 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001596:	4b28      	ldr	r3, [pc, #160]	@ (8001638 <HAL_RCC_OscConfig+0x4e4>)
 8001598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0f0      	beq.n	8001584 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d108      	bne.n	80015bc <HAL_RCC_OscConfig+0x468>
 80015aa:	4b21      	ldr	r3, [pc, #132]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 80015ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015b0:	4a1f      	ldr	r2, [pc, #124]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80015ba:	e074      	b.n	80016a6 <HAL_RCC_OscConfig+0x552>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d118      	bne.n	80015f6 <HAL_RCC_OscConfig+0x4a2>
 80015c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 80015c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015ca:	4a19      	ldr	r2, [pc, #100]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 80015cc:	f023 0301 	bic.w	r3, r3, #1
 80015d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80015d4:	4b16      	ldr	r3, [pc, #88]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 80015d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015da:	4a15      	ldr	r2, [pc, #84]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 80015dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80015e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80015e4:	4b12      	ldr	r3, [pc, #72]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 80015e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015ea:	4a11      	ldr	r2, [pc, #68]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 80015ec:	f023 0304 	bic.w	r3, r3, #4
 80015f0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80015f4:	e057      	b.n	80016a6 <HAL_RCC_OscConfig+0x552>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2b05      	cmp	r3, #5
 80015fc:	d11e      	bne.n	800163c <HAL_RCC_OscConfig+0x4e8>
 80015fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 8001600:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001604:	4a0a      	ldr	r2, [pc, #40]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 8001606:	f043 0304 	orr.w	r3, r3, #4
 800160a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800160e:	4b08      	ldr	r3, [pc, #32]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 8001610:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001614:	4a06      	ldr	r2, [pc, #24]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 8001616:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800161a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800161e:	4b04      	ldr	r3, [pc, #16]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 8001620:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001624:	4a02      	ldr	r2, [pc, #8]	@ (8001630 <HAL_RCC_OscConfig+0x4dc>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800162e:	e03a      	b.n	80016a6 <HAL_RCC_OscConfig+0x552>
 8001630:	44020c00 	.word	0x44020c00
 8001634:	20000004 	.word	0x20000004
 8001638:	44020800 	.word	0x44020800
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2b85      	cmp	r3, #133	@ 0x85
 8001642:	d118      	bne.n	8001676 <HAL_RCC_OscConfig+0x522>
 8001644:	4ba2      	ldr	r3, [pc, #648]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 8001646:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800164a:	4aa1      	ldr	r2, [pc, #644]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 800164c:	f043 0304 	orr.w	r3, r3, #4
 8001650:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001654:	4b9e      	ldr	r3, [pc, #632]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 8001656:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800165a:	4a9d      	ldr	r2, [pc, #628]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 800165c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001660:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001664:	4b9a      	ldr	r3, [pc, #616]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 8001666:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800166a:	4a99      	ldr	r2, [pc, #612]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001674:	e017      	b.n	80016a6 <HAL_RCC_OscConfig+0x552>
 8001676:	4b96      	ldr	r3, [pc, #600]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 8001678:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800167c:	4a94      	ldr	r2, [pc, #592]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 800167e:	f023 0301 	bic.w	r3, r3, #1
 8001682:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001686:	4b92      	ldr	r3, [pc, #584]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 8001688:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800168c:	4a90      	ldr	r2, [pc, #576]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 800168e:	f023 0304 	bic.w	r3, r3, #4
 8001692:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001696:	4b8e      	ldr	r3, [pc, #568]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 8001698:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800169c:	4a8c      	ldr	r2, [pc, #560]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 800169e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80016a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d016      	beq.n	80016dc <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ae:	f7ff f9ff 	bl	8000ab0 <HAL_GetTick>
 80016b2:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016b4:	e00a      	b.n	80016cc <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b6:	f7ff f9fb 	bl	8000ab0 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e175      	b.n	80019b8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016cc:	4b80      	ldr	r3, [pc, #512]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 80016ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0ed      	beq.n	80016b6 <HAL_RCC_OscConfig+0x562>
 80016da:	e015      	b.n	8001708 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016dc:	f7ff f9e8 	bl	8000ab0 <HAL_GetTick>
 80016e0:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016e2:	e00a      	b.n	80016fa <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e4:	f7ff f9e4 	bl	8000ab0 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e15e      	b.n	80019b8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016fa:	4b75      	ldr	r3, [pc, #468]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 80016fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1ed      	bne.n	80016e4 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0320 	and.w	r3, r3, #32
 8001710:	2b00      	cmp	r3, #0
 8001712:	d036      	beq.n	8001782 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001718:	2b00      	cmp	r3, #0
 800171a:	d019      	beq.n	8001750 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800171c:	4b6c      	ldr	r3, [pc, #432]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a6b      	ldr	r2, [pc, #428]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 8001722:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001726:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001728:	f7ff f9c2 	bl	8000ab0 <HAL_GetTick>
 800172c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001730:	f7ff f9be 	bl	8000ab0 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e13a      	b.n	80019b8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001742:	4b63      	ldr	r3, [pc, #396]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f0      	beq.n	8001730 <HAL_RCC_OscConfig+0x5dc>
 800174e:	e018      	b.n	8001782 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001750:	4b5f      	ldr	r3, [pc, #380]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a5e      	ldr	r2, [pc, #376]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 8001756:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800175a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175c:	f7ff f9a8 	bl	8000ab0 <HAL_GetTick>
 8001760:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001764:	f7ff f9a4 	bl	8000ab0 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e120      	b.n	80019b8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001776:	4b56      	ldr	r3, [pc, #344]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f0      	bne.n	8001764 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 8115 	beq.w	80019b6 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	2b18      	cmp	r3, #24
 8001790:	f000 80af 	beq.w	80018f2 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001798:	2b02      	cmp	r3, #2
 800179a:	f040 8086 	bne.w	80018aa <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800179e:	4b4c      	ldr	r3, [pc, #304]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a4b      	ldr	r2, [pc, #300]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 80017a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017aa:	f7ff f981 	bl	8000ab0 <HAL_GetTick>
 80017ae:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80017b2:	f7ff f97d 	bl	8000ab0 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e0f9      	b.n	80019b8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80017c4:	4b42      	ldr	r3, [pc, #264]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1f0      	bne.n	80017b2 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80017d0:	4b3f      	ldr	r3, [pc, #252]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 80017d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80017d8:	f023 0303 	bic.w	r3, r3, #3
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80017e4:	0212      	lsls	r2, r2, #8
 80017e6:	430a      	orrs	r2, r1
 80017e8:	4939      	ldr	r1, [pc, #228]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	628b      	str	r3, [r1, #40]	@ 0x28
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017f2:	3b01      	subs	r3, #1
 80017f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017fc:	3b01      	subs	r3, #1
 80017fe:	025b      	lsls	r3, r3, #9
 8001800:	b29b      	uxth	r3, r3
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001808:	3b01      	subs	r3, #1
 800180a:	041b      	lsls	r3, r3, #16
 800180c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001810:	431a      	orrs	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001816:	3b01      	subs	r3, #1
 8001818:	061b      	lsls	r3, r3, #24
 800181a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800181e:	492c      	ldr	r1, [pc, #176]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 8001820:	4313      	orrs	r3, r2
 8001822:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001824:	4b2a      	ldr	r3, [pc, #168]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 8001826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001828:	4a29      	ldr	r2, [pc, #164]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 800182a:	f023 0310 	bic.w	r3, r3, #16
 800182e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001834:	4a26      	ldr	r2, [pc, #152]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800183a:	4b25      	ldr	r3, [pc, #148]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 800183c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800183e:	4a24      	ldr	r2, [pc, #144]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 8001840:	f043 0310 	orr.w	r3, r3, #16
 8001844:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8001846:	4b22      	ldr	r3, [pc, #136]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 8001848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800184a:	f023 020c 	bic.w	r2, r3, #12
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001852:	491f      	ldr	r1, [pc, #124]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 8001854:	4313      	orrs	r3, r2
 8001856:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8001858:	4b1d      	ldr	r3, [pc, #116]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 800185a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800185c:	f023 0220 	bic.w	r2, r3, #32
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001864:	491a      	ldr	r1, [pc, #104]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 8001866:	4313      	orrs	r3, r2
 8001868:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800186a:	4b19      	ldr	r3, [pc, #100]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 800186c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800186e:	4a18      	ldr	r2, [pc, #96]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 8001870:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001874:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8001876:	4b16      	ldr	r3, [pc, #88]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a15      	ldr	r2, [pc, #84]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 800187c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001882:	f7ff f915 	bl	8000ab0 <HAL_GetTick>
 8001886:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800188a:	f7ff f911 	bl	8000ab0 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e08d      	b.n	80019b8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800189c:	4b0c      	ldr	r3, [pc, #48]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x736>
 80018a8:	e085      	b.n	80019b6 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80018aa:	4b09      	ldr	r3, [pc, #36]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a08      	ldr	r2, [pc, #32]	@ (80018d0 <HAL_RCC_OscConfig+0x77c>)
 80018b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b6:	f7ff f8fb 	bl	8000ab0 <HAL_GetTick>
 80018ba:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80018bc:	e00a      	b.n	80018d4 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80018be:	f7ff f8f7 	bl	8000ab0 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d903      	bls.n	80018d4 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e073      	b.n	80019b8 <HAL_RCC_OscConfig+0x864>
 80018d0:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80018d4:	4b3a      	ldr	r3, [pc, #232]	@ (80019c0 <HAL_RCC_OscConfig+0x86c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1ee      	bne.n	80018be <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80018e0:	4b37      	ldr	r3, [pc, #220]	@ (80019c0 <HAL_RCC_OscConfig+0x86c>)
 80018e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e4:	4a36      	ldr	r2, [pc, #216]	@ (80019c0 <HAL_RCC_OscConfig+0x86c>)
 80018e6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80018ea:	f023 0303 	bic.w	r3, r3, #3
 80018ee:	6293      	str	r3, [r2, #40]	@ 0x28
 80018f0:	e061      	b.n	80019b6 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80018f2:	4b33      	ldr	r3, [pc, #204]	@ (80019c0 <HAL_RCC_OscConfig+0x86c>)
 80018f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80018f8:	4b31      	ldr	r3, [pc, #196]	@ (80019c0 <HAL_RCC_OscConfig+0x86c>)
 80018fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018fc:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001902:	2b01      	cmp	r3, #1
 8001904:	d031      	beq.n	800196a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	f003 0203 	and.w	r2, r3, #3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001910:	429a      	cmp	r2, r3
 8001912:	d12a      	bne.n	800196a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	0a1b      	lsrs	r3, r3, #8
 8001918:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001920:	429a      	cmp	r2, r3
 8001922:	d122      	bne.n	800196a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800192e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001930:	429a      	cmp	r2, r3
 8001932:	d11a      	bne.n	800196a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	0a5b      	lsrs	r3, r3, #9
 8001938:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001940:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001942:	429a      	cmp	r2, r3
 8001944:	d111      	bne.n	800196a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	0c1b      	lsrs	r3, r3, #16
 800194a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001952:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001954:	429a      	cmp	r2, r3
 8001956:	d108      	bne.n	800196a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	0e1b      	lsrs	r3, r3, #24
 800195c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001964:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001966:	429a      	cmp	r2, r3
 8001968:	d001      	beq.n	800196e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e024      	b.n	80019b8 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800196e:	4b14      	ldr	r3, [pc, #80]	@ (80019c0 <HAL_RCC_OscConfig+0x86c>)
 8001970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001972:	08db      	lsrs	r3, r3, #3
 8001974:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800197c:	429a      	cmp	r2, r3
 800197e:	d01a      	beq.n	80019b6 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001980:	4b0f      	ldr	r3, [pc, #60]	@ (80019c0 <HAL_RCC_OscConfig+0x86c>)
 8001982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001984:	4a0e      	ldr	r2, [pc, #56]	@ (80019c0 <HAL_RCC_OscConfig+0x86c>)
 8001986:	f023 0310 	bic.w	r3, r3, #16
 800198a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff f890 	bl	8000ab0 <HAL_GetTick>
 8001990:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8001992:	bf00      	nop
 8001994:	f7ff f88c 	bl	8000ab0 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	4293      	cmp	r3, r2
 800199e:	d0f9      	beq.n	8001994 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a4:	4a06      	ldr	r2, [pc, #24]	@ (80019c0 <HAL_RCC_OscConfig+0x86c>)
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80019aa:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <HAL_RCC_OscConfig+0x86c>)
 80019ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ae:	4a04      	ldr	r2, [pc, #16]	@ (80019c0 <HAL_RCC_OscConfig+0x86c>)
 80019b0:	f043 0310 	orr.w	r3, r3, #16
 80019b4:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3720      	adds	r7, #32
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	44020c00 	.word	0x44020c00

080019c4 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e19e      	b.n	8001d16 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019d8:	4b83      	ldr	r3, [pc, #524]	@ (8001be8 <HAL_RCC_ClockConfig+0x224>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 030f 	and.w	r3, r3, #15
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d910      	bls.n	8001a08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e6:	4b80      	ldr	r3, [pc, #512]	@ (8001be8 <HAL_RCC_ClockConfig+0x224>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f023 020f 	bic.w	r2, r3, #15
 80019ee:	497e      	ldr	r1, [pc, #504]	@ (8001be8 <HAL_RCC_ClockConfig+0x224>)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f6:	4b7c      	ldr	r3, [pc, #496]	@ (8001be8 <HAL_RCC_ClockConfig+0x224>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d001      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e186      	b.n	8001d16 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0310 	and.w	r3, r3, #16
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d012      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	695a      	ldr	r2, [r3, #20]
 8001a18:	4b74      	ldr	r3, [pc, #464]	@ (8001bec <HAL_RCC_ClockConfig+0x228>)
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d909      	bls.n	8001a3a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001a26:	4b71      	ldr	r3, [pc, #452]	@ (8001bec <HAL_RCC_ClockConfig+0x228>)
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	021b      	lsls	r3, r3, #8
 8001a34:	496d      	ldr	r1, [pc, #436]	@ (8001bec <HAL_RCC_ClockConfig+0x228>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d012      	beq.n	8001a6c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691a      	ldr	r2, [r3, #16]
 8001a4a:	4b68      	ldr	r3, [pc, #416]	@ (8001bec <HAL_RCC_ClockConfig+0x228>)
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	091b      	lsrs	r3, r3, #4
 8001a50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d909      	bls.n	8001a6c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001a58:	4b64      	ldr	r3, [pc, #400]	@ (8001bec <HAL_RCC_ClockConfig+0x228>)
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	011b      	lsls	r3, r3, #4
 8001a66:	4961      	ldr	r1, [pc, #388]	@ (8001bec <HAL_RCC_ClockConfig+0x228>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d010      	beq.n	8001a9a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68da      	ldr	r2, [r3, #12]
 8001a7c:	4b5b      	ldr	r3, [pc, #364]	@ (8001bec <HAL_RCC_ClockConfig+0x228>)
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d908      	bls.n	8001a9a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001a88:	4b58      	ldr	r3, [pc, #352]	@ (8001bec <HAL_RCC_ClockConfig+0x228>)
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	4955      	ldr	r1, [pc, #340]	@ (8001bec <HAL_RCC_ClockConfig+0x228>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d010      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	4b50      	ldr	r3, [pc, #320]	@ (8001bec <HAL_RCC_ClockConfig+0x228>)
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d908      	bls.n	8001ac8 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001ab6:	4b4d      	ldr	r3, [pc, #308]	@ (8001bec <HAL_RCC_ClockConfig+0x228>)
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	f023 020f 	bic.w	r2, r3, #15
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	494a      	ldr	r1, [pc, #296]	@ (8001bec <HAL_RCC_ClockConfig+0x228>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 8093 	beq.w	8001bfc <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d107      	bne.n	8001aee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001ade:	4b43      	ldr	r3, [pc, #268]	@ (8001bec <HAL_RCC_ClockConfig+0x228>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d121      	bne.n	8001b2e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e113      	b.n	8001d16 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d107      	bne.n	8001b06 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001af6:	4b3d      	ldr	r3, [pc, #244]	@ (8001bec <HAL_RCC_ClockConfig+0x228>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d115      	bne.n	8001b2e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e107      	b.n	8001d16 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d107      	bne.n	8001b1e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001b0e:	4b37      	ldr	r3, [pc, #220]	@ (8001bec <HAL_RCC_ClockConfig+0x228>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d109      	bne.n	8001b2e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e0fb      	b.n	8001d16 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b1e:	4b33      	ldr	r3, [pc, #204]	@ (8001bec <HAL_RCC_ClockConfig+0x228>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e0f3      	b.n	8001d16 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8001b2e:	4b2f      	ldr	r3, [pc, #188]	@ (8001bec <HAL_RCC_ClockConfig+0x228>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	f023 0203 	bic.w	r2, r3, #3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	492c      	ldr	r1, [pc, #176]	@ (8001bec <HAL_RCC_ClockConfig+0x228>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b40:	f7fe ffb6 	bl	8000ab0 <HAL_GetTick>
 8001b44:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	d112      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b4e:	e00a      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001b50:	f7fe ffae 	bl	8000ab0 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e0d7      	b.n	8001d16 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b66:	4b21      	ldr	r3, [pc, #132]	@ (8001bec <HAL_RCC_ClockConfig+0x228>)
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	f003 0318 	and.w	r3, r3, #24
 8001b6e:	2b18      	cmp	r3, #24
 8001b70:	d1ee      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x18c>
 8001b72:	e043      	b.n	8001bfc <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d112      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b7c:	e00a      	b.n	8001b94 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001b7e:	f7fe ff97 	bl	8000ab0 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e0c0      	b.n	8001d16 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b94:	4b15      	ldr	r3, [pc, #84]	@ (8001bec <HAL_RCC_ClockConfig+0x228>)
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	f003 0318 	and.w	r3, r3, #24
 8001b9c:	2b10      	cmp	r3, #16
 8001b9e:	d1ee      	bne.n	8001b7e <HAL_RCC_ClockConfig+0x1ba>
 8001ba0:	e02c      	b.n	8001bfc <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d122      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8001baa:	e00a      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001bac:	f7fe ff80 	bl	8000ab0 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e0a9      	b.n	8001d16 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bec <HAL_RCC_ClockConfig+0x228>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	f003 0318 	and.w	r3, r3, #24
 8001bca:	2b08      	cmp	r3, #8
 8001bcc:	d1ee      	bne.n	8001bac <HAL_RCC_ClockConfig+0x1e8>
 8001bce:	e015      	b.n	8001bfc <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd0:	f7fe ff6e 	bl	8000ab0 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d906      	bls.n	8001bf0 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e097      	b.n	8001d16 <HAL_RCC_ClockConfig+0x352>
 8001be6:	bf00      	nop
 8001be8:	40022000 	.word	0x40022000
 8001bec:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bf0:	4b4b      	ldr	r3, [pc, #300]	@ (8001d20 <HAL_RCC_ClockConfig+0x35c>)
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	f003 0318 	and.w	r3, r3, #24
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1e9      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d010      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	4b44      	ldr	r3, [pc, #272]	@ (8001d20 <HAL_RCC_ClockConfig+0x35c>)
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	f003 030f 	and.w	r3, r3, #15
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d208      	bcs.n	8001c2a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001c18:	4b41      	ldr	r3, [pc, #260]	@ (8001d20 <HAL_RCC_ClockConfig+0x35c>)
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	f023 020f 	bic.w	r2, r3, #15
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	493e      	ldr	r1, [pc, #248]	@ (8001d20 <HAL_RCC_ClockConfig+0x35c>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c2a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d24 <HAL_RCC_ClockConfig+0x360>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d210      	bcs.n	8001c5a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c38:	4b3a      	ldr	r3, [pc, #232]	@ (8001d24 <HAL_RCC_ClockConfig+0x360>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f023 020f 	bic.w	r2, r3, #15
 8001c40:	4938      	ldr	r1, [pc, #224]	@ (8001d24 <HAL_RCC_ClockConfig+0x360>)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c48:	4b36      	ldr	r3, [pc, #216]	@ (8001d24 <HAL_RCC_ClockConfig+0x360>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 030f 	and.w	r3, r3, #15
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d001      	beq.n	8001c5a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e05d      	b.n	8001d16 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d010      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d20 <HAL_RCC_ClockConfig+0x35c>)
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d208      	bcs.n	8001c88 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001c76:	4b2a      	ldr	r3, [pc, #168]	@ (8001d20 <HAL_RCC_ClockConfig+0x35c>)
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	4927      	ldr	r1, [pc, #156]	@ (8001d20 <HAL_RCC_ClockConfig+0x35c>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d012      	beq.n	8001cba <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691a      	ldr	r2, [r3, #16]
 8001c98:	4b21      	ldr	r3, [pc, #132]	@ (8001d20 <HAL_RCC_ClockConfig+0x35c>)
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	091b      	lsrs	r3, r3, #4
 8001c9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d209      	bcs.n	8001cba <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d20 <HAL_RCC_ClockConfig+0x35c>)
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	011b      	lsls	r3, r3, #4
 8001cb4:	491a      	ldr	r1, [pc, #104]	@ (8001d20 <HAL_RCC_ClockConfig+0x35c>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0310 	and.w	r3, r3, #16
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d012      	beq.n	8001cec <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	695a      	ldr	r2, [r3, #20]
 8001cca:	4b15      	ldr	r3, [pc, #84]	@ (8001d20 <HAL_RCC_ClockConfig+0x35c>)
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	0a1b      	lsrs	r3, r3, #8
 8001cd0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d209      	bcs.n	8001cec <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001cd8:	4b11      	ldr	r3, [pc, #68]	@ (8001d20 <HAL_RCC_ClockConfig+0x35c>)
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	021b      	lsls	r3, r3, #8
 8001ce6:	490e      	ldr	r1, [pc, #56]	@ (8001d20 <HAL_RCC_ClockConfig+0x35c>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001cec:	f000 f822 	bl	8001d34 <HAL_RCC_GetSysClockFreq>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d20 <HAL_RCC_ClockConfig+0x35c>)
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	490b      	ldr	r1, [pc, #44]	@ (8001d28 <HAL_RCC_ClockConfig+0x364>)
 8001cfc:	5ccb      	ldrb	r3, [r1, r3]
 8001cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001d02:	4a0a      	ldr	r2, [pc, #40]	@ (8001d2c <HAL_RCC_ClockConfig+0x368>)
 8001d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001d06:	4b0a      	ldr	r3, [pc, #40]	@ (8001d30 <HAL_RCC_ClockConfig+0x36c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fe46 	bl	800099c <HAL_InitTick>
 8001d10:	4603      	mov	r3, r0
 8001d12:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8001d14:	7afb      	ldrb	r3, [r7, #11]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	44020c00 	.word	0x44020c00
 8001d24:	40022000 	.word	0x40022000
 8001d28:	08002bd8 	.word	0x08002bd8
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	20000004 	.word	0x20000004

08001d34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b089      	sub	sp, #36	@ 0x24
 8001d38:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8001d3a:	4b8c      	ldr	r3, [pc, #560]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x238>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	f003 0318 	and.w	r3, r3, #24
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d102      	bne.n	8001d4c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001d46:	4b8a      	ldr	r3, [pc, #552]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0x23c>)
 8001d48:	61fb      	str	r3, [r7, #28]
 8001d4a:	e107      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d4c:	4b87      	ldr	r3, [pc, #540]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x238>)
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	f003 0318 	and.w	r3, r3, #24
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d112      	bne.n	8001d7e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8001d58:	4b84      	ldr	r3, [pc, #528]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x238>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0320 	and.w	r3, r3, #32
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d009      	beq.n	8001d78 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001d64:	4b81      	ldr	r3, [pc, #516]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x238>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	08db      	lsrs	r3, r3, #3
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	4a81      	ldr	r2, [pc, #516]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x240>)
 8001d70:	fa22 f303 	lsr.w	r3, r2, r3
 8001d74:	61fb      	str	r3, [r7, #28]
 8001d76:	e0f1      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8001d78:	4b7e      	ldr	r3, [pc, #504]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x240>)
 8001d7a:	61fb      	str	r3, [r7, #28]
 8001d7c:	e0ee      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d7e:	4b7b      	ldr	r3, [pc, #492]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x238>)
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	f003 0318 	and.w	r3, r3, #24
 8001d86:	2b10      	cmp	r3, #16
 8001d88:	d102      	bne.n	8001d90 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d8a:	4b7b      	ldr	r3, [pc, #492]	@ (8001f78 <HAL_RCC_GetSysClockFreq+0x244>)
 8001d8c:	61fb      	str	r3, [r7, #28]
 8001d8e:	e0e5      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d90:	4b76      	ldr	r3, [pc, #472]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x238>)
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	f003 0318 	and.w	r3, r3, #24
 8001d98:	2b18      	cmp	r3, #24
 8001d9a:	f040 80dd 	bne.w	8001f58 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8001d9e:	4b73      	ldr	r3, [pc, #460]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x238>)
 8001da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8001da8:	4b70      	ldr	r3, [pc, #448]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x238>)
 8001daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dac:	0a1b      	lsrs	r3, r3, #8
 8001dae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001db2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8001db4:	4b6d      	ldr	r3, [pc, #436]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x238>)
 8001db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8001dc0:	4b6a      	ldr	r3, [pc, #424]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x238>)
 8001dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8001dc4:	08db      	lsrs	r3, r3, #3
 8001dc6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	fb02 f303 	mul.w	r3, r2, r3
 8001dd0:	ee07 3a90 	vmov	s15, r3
 8001dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dd8:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 80b7 	beq.w	8001f52 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d003      	beq.n	8001df2 <HAL_RCC_GetSysClockFreq+0xbe>
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	2b03      	cmp	r3, #3
 8001dee:	d056      	beq.n	8001e9e <HAL_RCC_GetSysClockFreq+0x16a>
 8001df0:	e077      	b.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8001df2:	4b5e      	ldr	r3, [pc, #376]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x238>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0320 	and.w	r3, r3, #32
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d02d      	beq.n	8001e5a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001dfe:	4b5b      	ldr	r3, [pc, #364]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x238>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	08db      	lsrs	r3, r3, #3
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	4a5a      	ldr	r2, [pc, #360]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x240>)
 8001e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e0e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	ee07 3a90 	vmov	s15, r3
 8001e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	ee07 3a90 	vmov	s15, r3
 8001e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e28:	4b50      	ldr	r3, [pc, #320]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x238>)
 8001e2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e30:	ee07 3a90 	vmov	s15, r3
 8001e34:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e38:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e3c:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8001f7c <HAL_RCC_GetSysClockFreq+0x248>
 8001e40:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001e44:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e54:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8001e58:	e065      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	ee07 3a90 	vmov	s15, r3
 8001e60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e64:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8001f80 <HAL_RCC_GetSysClockFreq+0x24c>
 8001e68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e6c:	4b3f      	ldr	r3, [pc, #252]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x238>)
 8001e6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e74:	ee07 3a90 	vmov	s15, r3
 8001e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e7c:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e80:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8001f7c <HAL_RCC_GetSysClockFreq+0x248>
 8001e84:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001e88:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e90:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e98:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8001e9c:	e043      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	ee07 3a90 	vmov	s15, r3
 8001ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ea8:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8001f84 <HAL_RCC_GetSysClockFreq+0x250>
 8001eac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001eb0:	4b2e      	ldr	r3, [pc, #184]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x238>)
 8001eb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eb8:	ee07 3a90 	vmov	s15, r3
 8001ebc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ec0:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ec4:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8001f7c <HAL_RCC_GetSysClockFreq+0x248>
 8001ec8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001ecc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ed0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ed4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001edc:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8001ee0:	e021      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	ee07 3a90 	vmov	s15, r3
 8001ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eec:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001f88 <HAL_RCC_GetSysClockFreq+0x254>
 8001ef0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x238>)
 8001ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001efc:	ee07 3a90 	vmov	s15, r3
 8001f00:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f04:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f08:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8001f7c <HAL_RCC_GetSysClockFreq+0x248>
 8001f0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001f10:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f18:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f20:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8001f24:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8001f26:	4b11      	ldr	r3, [pc, #68]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x238>)
 8001f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f2a:	0a5b      	lsrs	r3, r3, #9
 8001f2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f30:	3301      	adds	r3, #1
 8001f32:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	ee07 3a90 	vmov	s15, r3
 8001f3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f3e:	edd7 6a06 	vldr	s13, [r7, #24]
 8001f42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f4a:	ee17 3a90 	vmov	r3, s15
 8001f4e:	61fb      	str	r3, [r7, #28]
 8001f50:	e004      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
 8001f56:	e001      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8001f58:	4b06      	ldr	r3, [pc, #24]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x240>)
 8001f5a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8001f5c:	69fb      	ldr	r3, [r7, #28]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3724      	adds	r7, #36	@ 0x24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	44020c00 	.word	0x44020c00
 8001f70:	003d0900 	.word	0x003d0900
 8001f74:	03d09000 	.word	0x03d09000
 8001f78:	017d7840 	.word	0x017d7840
 8001f7c:	46000000 	.word	0x46000000
 8001f80:	4c742400 	.word	0x4c742400
 8001f84:	4bbebc20 	.word	0x4bbebc20
 8001f88:	4a742400 	.word	0x4a742400

08001f8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8001f90:	f7ff fed0 	bl	8001d34 <HAL_RCC_GetSysClockFreq>
 8001f94:	4602      	mov	r2, r0
 8001f96:	4b08      	ldr	r3, [pc, #32]	@ (8001fb8 <HAL_RCC_GetHCLKFreq+0x2c>)
 8001f98:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8001f9a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8001f9e:	4907      	ldr	r1, [pc, #28]	@ (8001fbc <HAL_RCC_GetHCLKFreq+0x30>)
 8001fa0:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8001fa2:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8001fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8001faa:	4a05      	ldr	r2, [pc, #20]	@ (8001fc0 <HAL_RCC_GetHCLKFreq+0x34>)
 8001fac:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8001fae:	4b04      	ldr	r3, [pc, #16]	@ (8001fc0 <HAL_RCC_GetHCLKFreq+0x34>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	44020c00 	.word	0x44020c00
 8001fbc:	08002bd8 	.word	0x08002bd8
 8001fc0:	20000000 	.word	0x20000000

08001fc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e049      	b.n	800206a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d106      	bne.n	8001ff0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7fe fc5c 	bl	80008a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3304      	adds	r3, #4
 8002000:	4619      	mov	r1, r3
 8002002:	4610      	mov	r0, r2
 8002004:	f000 fad4 	bl	80025b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b084      	sub	sp, #16
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d020      	beq.n	80020d6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d01b      	beq.n	80020d6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f06f 0202 	mvn.w	r2, #2
 80020a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 fa59 	bl	8002574 <HAL_TIM_IC_CaptureCallback>
 80020c2:	e005      	b.n	80020d0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 fa4b 	bl	8002560 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 fa5c 	bl	8002588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d020      	beq.n	8002122 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d01b      	beq.n	8002122 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f06f 0204 	mvn.w	r2, #4
 80020f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2202      	movs	r2, #2
 80020f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 fa33 	bl	8002574 <HAL_TIM_IC_CaptureCallback>
 800210e:	e005      	b.n	800211c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 fa25 	bl	8002560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 fa36 	bl	8002588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	2b00      	cmp	r3, #0
 800212a:	d020      	beq.n	800216e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b00      	cmp	r3, #0
 8002134:	d01b      	beq.n	800216e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f06f 0208 	mvn.w	r2, #8
 800213e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2204      	movs	r2, #4
 8002144:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 fa0d 	bl	8002574 <HAL_TIM_IC_CaptureCallback>
 800215a:	e005      	b.n	8002168 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 f9ff 	bl	8002560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 fa10 	bl	8002588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	f003 0310 	and.w	r3, r3, #16
 8002174:	2b00      	cmp	r3, #0
 8002176:	d020      	beq.n	80021ba <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f003 0310 	and.w	r3, r3, #16
 800217e:	2b00      	cmp	r3, #0
 8002180:	d01b      	beq.n	80021ba <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f06f 0210 	mvn.w	r2, #16
 800218a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2208      	movs	r2, #8
 8002190:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	69db      	ldr	r3, [r3, #28]
 8002198:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800219c:	2b00      	cmp	r3, #0
 800219e:	d003      	beq.n	80021a8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f9e7 	bl	8002574 <HAL_TIM_IC_CaptureCallback>
 80021a6:	e005      	b.n	80021b4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 f9d9 	bl	8002560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f9ea 	bl	8002588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00c      	beq.n	80021de <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d007      	beq.n	80021de <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f06f 0201 	mvn.w	r2, #1
 80021d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f9b7 	bl	800254c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d104      	bne.n	80021f2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00c      	beq.n	800220c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d007      	beq.n	800220c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 fc72 	bl	8002af0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00c      	beq.n	8002230 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800221c:	2b00      	cmp	r3, #0
 800221e:	d007      	beq.n	8002230 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 fc6a 	bl	8002b04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00c      	beq.n	8002254 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002240:	2b00      	cmp	r3, #0
 8002242:	d007      	beq.n	8002254 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800224c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f9a4 	bl	800259c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	f003 0320 	and.w	r3, r3, #32
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00c      	beq.n	8002278 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f003 0320 	and.w	r3, r3, #32
 8002264:	2b00      	cmp	r3, #0
 8002266:	d007      	beq.n	8002278 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f06f 0220 	mvn.w	r2, #32
 8002270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 fc32 	bl	8002adc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00c      	beq.n	800229c <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d007      	beq.n	800229c <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8002294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 fc3e 	bl	8002b18 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00c      	beq.n	80022c0 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d007      	beq.n	80022c0 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80022b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 fc36 	bl	8002b2c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00c      	beq.n	80022e4 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d007      	beq.n	80022e4 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80022dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 fc2e 	bl	8002b40 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00c      	beq.n	8002308 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d007      	beq.n	8002308 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8002300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 fc26 	bl	8002b54 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002308:	bf00      	nop
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_TIM_ConfigClockSource+0x1c>
 8002328:	2302      	movs	r3, #2
 800232a:	e0fe      	b.n	800252a <HAL_TIM_ConfigClockSource+0x21a>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800234a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800234e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002356:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002368:	f000 80c9 	beq.w	80024fe <HAL_TIM_ConfigClockSource+0x1ee>
 800236c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002370:	f200 80ce 	bhi.w	8002510 <HAL_TIM_ConfigClockSource+0x200>
 8002374:	4a6f      	ldr	r2, [pc, #444]	@ (8002534 <HAL_TIM_ConfigClockSource+0x224>)
 8002376:	4293      	cmp	r3, r2
 8002378:	f000 80c1 	beq.w	80024fe <HAL_TIM_ConfigClockSource+0x1ee>
 800237c:	4a6d      	ldr	r2, [pc, #436]	@ (8002534 <HAL_TIM_ConfigClockSource+0x224>)
 800237e:	4293      	cmp	r3, r2
 8002380:	f200 80c6 	bhi.w	8002510 <HAL_TIM_ConfigClockSource+0x200>
 8002384:	4a6c      	ldr	r2, [pc, #432]	@ (8002538 <HAL_TIM_ConfigClockSource+0x228>)
 8002386:	4293      	cmp	r3, r2
 8002388:	f000 80b9 	beq.w	80024fe <HAL_TIM_ConfigClockSource+0x1ee>
 800238c:	4a6a      	ldr	r2, [pc, #424]	@ (8002538 <HAL_TIM_ConfigClockSource+0x228>)
 800238e:	4293      	cmp	r3, r2
 8002390:	f200 80be 	bhi.w	8002510 <HAL_TIM_ConfigClockSource+0x200>
 8002394:	4a69      	ldr	r2, [pc, #420]	@ (800253c <HAL_TIM_ConfigClockSource+0x22c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	f000 80b1 	beq.w	80024fe <HAL_TIM_ConfigClockSource+0x1ee>
 800239c:	4a67      	ldr	r2, [pc, #412]	@ (800253c <HAL_TIM_ConfigClockSource+0x22c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	f200 80b6 	bhi.w	8002510 <HAL_TIM_ConfigClockSource+0x200>
 80023a4:	4a66      	ldr	r2, [pc, #408]	@ (8002540 <HAL_TIM_ConfigClockSource+0x230>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	f000 80a9 	beq.w	80024fe <HAL_TIM_ConfigClockSource+0x1ee>
 80023ac:	4a64      	ldr	r2, [pc, #400]	@ (8002540 <HAL_TIM_ConfigClockSource+0x230>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	f200 80ae 	bhi.w	8002510 <HAL_TIM_ConfigClockSource+0x200>
 80023b4:	4a63      	ldr	r2, [pc, #396]	@ (8002544 <HAL_TIM_ConfigClockSource+0x234>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	f000 80a1 	beq.w	80024fe <HAL_TIM_ConfigClockSource+0x1ee>
 80023bc:	4a61      	ldr	r2, [pc, #388]	@ (8002544 <HAL_TIM_ConfigClockSource+0x234>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	f200 80a6 	bhi.w	8002510 <HAL_TIM_ConfigClockSource+0x200>
 80023c4:	4a60      	ldr	r2, [pc, #384]	@ (8002548 <HAL_TIM_ConfigClockSource+0x238>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	f000 8099 	beq.w	80024fe <HAL_TIM_ConfigClockSource+0x1ee>
 80023cc:	4a5e      	ldr	r2, [pc, #376]	@ (8002548 <HAL_TIM_ConfigClockSource+0x238>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	f200 809e 	bhi.w	8002510 <HAL_TIM_ConfigClockSource+0x200>
 80023d4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80023d8:	f000 8091 	beq.w	80024fe <HAL_TIM_ConfigClockSource+0x1ee>
 80023dc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80023e0:	f200 8096 	bhi.w	8002510 <HAL_TIM_ConfigClockSource+0x200>
 80023e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023e8:	f000 8089 	beq.w	80024fe <HAL_TIM_ConfigClockSource+0x1ee>
 80023ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023f0:	f200 808e 	bhi.w	8002510 <HAL_TIM_ConfigClockSource+0x200>
 80023f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023f8:	d03e      	beq.n	8002478 <HAL_TIM_ConfigClockSource+0x168>
 80023fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023fe:	f200 8087 	bhi.w	8002510 <HAL_TIM_ConfigClockSource+0x200>
 8002402:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002406:	f000 8086 	beq.w	8002516 <HAL_TIM_ConfigClockSource+0x206>
 800240a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800240e:	d87f      	bhi.n	8002510 <HAL_TIM_ConfigClockSource+0x200>
 8002410:	2b70      	cmp	r3, #112	@ 0x70
 8002412:	d01a      	beq.n	800244a <HAL_TIM_ConfigClockSource+0x13a>
 8002414:	2b70      	cmp	r3, #112	@ 0x70
 8002416:	d87b      	bhi.n	8002510 <HAL_TIM_ConfigClockSource+0x200>
 8002418:	2b60      	cmp	r3, #96	@ 0x60
 800241a:	d050      	beq.n	80024be <HAL_TIM_ConfigClockSource+0x1ae>
 800241c:	2b60      	cmp	r3, #96	@ 0x60
 800241e:	d877      	bhi.n	8002510 <HAL_TIM_ConfigClockSource+0x200>
 8002420:	2b50      	cmp	r3, #80	@ 0x50
 8002422:	d03c      	beq.n	800249e <HAL_TIM_ConfigClockSource+0x18e>
 8002424:	2b50      	cmp	r3, #80	@ 0x50
 8002426:	d873      	bhi.n	8002510 <HAL_TIM_ConfigClockSource+0x200>
 8002428:	2b40      	cmp	r3, #64	@ 0x40
 800242a:	d058      	beq.n	80024de <HAL_TIM_ConfigClockSource+0x1ce>
 800242c:	2b40      	cmp	r3, #64	@ 0x40
 800242e:	d86f      	bhi.n	8002510 <HAL_TIM_ConfigClockSource+0x200>
 8002430:	2b30      	cmp	r3, #48	@ 0x30
 8002432:	d064      	beq.n	80024fe <HAL_TIM_ConfigClockSource+0x1ee>
 8002434:	2b30      	cmp	r3, #48	@ 0x30
 8002436:	d86b      	bhi.n	8002510 <HAL_TIM_ConfigClockSource+0x200>
 8002438:	2b20      	cmp	r3, #32
 800243a:	d060      	beq.n	80024fe <HAL_TIM_ConfigClockSource+0x1ee>
 800243c:	2b20      	cmp	r3, #32
 800243e:	d867      	bhi.n	8002510 <HAL_TIM_ConfigClockSource+0x200>
 8002440:	2b00      	cmp	r3, #0
 8002442:	d05c      	beq.n	80024fe <HAL_TIM_ConfigClockSource+0x1ee>
 8002444:	2b10      	cmp	r3, #16
 8002446:	d05a      	beq.n	80024fe <HAL_TIM_ConfigClockSource+0x1ee>
 8002448:	e062      	b.n	8002510 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800245a:	f000 fa4f 	bl	80028fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800246c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	609a      	str	r2, [r3, #8]
      break;
 8002476:	e04f      	b.n	8002518 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002488:	f000 fa38 	bl	80028fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800249a:	609a      	str	r2, [r3, #8]
      break;
 800249c:	e03c      	b.n	8002518 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024aa:	461a      	mov	r2, r3
 80024ac:	f000 f9aa 	bl	8002804 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2150      	movs	r1, #80	@ 0x50
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 fa03 	bl	80028c2 <TIM_ITRx_SetConfig>
      break;
 80024bc:	e02c      	b.n	8002518 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024ca:	461a      	mov	r2, r3
 80024cc:	f000 f9c9 	bl	8002862 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2160      	movs	r1, #96	@ 0x60
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 f9f3 	bl	80028c2 <TIM_ITRx_SetConfig>
      break;
 80024dc:	e01c      	b.n	8002518 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ea:	461a      	mov	r2, r3
 80024ec:	f000 f98a 	bl	8002804 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2140      	movs	r1, #64	@ 0x40
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 f9e3 	bl	80028c2 <TIM_ITRx_SetConfig>
      break;
 80024fc:	e00c      	b.n	8002518 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4619      	mov	r1, r3
 8002508:	4610      	mov	r0, r2
 800250a:	f000 f9da 	bl	80028c2 <TIM_ITRx_SetConfig>
      break;
 800250e:	e003      	b.n	8002518 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	73fb      	strb	r3, [r7, #15]
      break;
 8002514:	e000      	b.n	8002518 <HAL_TIM_ConfigClockSource+0x208>
      break;
 8002516:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002528:	7bfb      	ldrb	r3, [r7, #15]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	00100070 	.word	0x00100070
 8002538:	00100060 	.word	0x00100060
 800253c:	00100050 	.word	0x00100050
 8002540:	00100040 	.word	0x00100040
 8002544:	00100030 	.word	0x00100030
 8002548:	00100020 	.word	0x00100020

0800254c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a7a      	ldr	r2, [pc, #488]	@ (80027ac <TIM_Base_SetConfig+0x1fc>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d02b      	beq.n	8002620 <TIM_Base_SetConfig+0x70>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a79      	ldr	r2, [pc, #484]	@ (80027b0 <TIM_Base_SetConfig+0x200>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d027      	beq.n	8002620 <TIM_Base_SetConfig+0x70>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025d6:	d023      	beq.n	8002620 <TIM_Base_SetConfig+0x70>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025de:	d01f      	beq.n	8002620 <TIM_Base_SetConfig+0x70>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a74      	ldr	r2, [pc, #464]	@ (80027b4 <TIM_Base_SetConfig+0x204>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d01b      	beq.n	8002620 <TIM_Base_SetConfig+0x70>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a73      	ldr	r2, [pc, #460]	@ (80027b8 <TIM_Base_SetConfig+0x208>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d017      	beq.n	8002620 <TIM_Base_SetConfig+0x70>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a72      	ldr	r2, [pc, #456]	@ (80027bc <TIM_Base_SetConfig+0x20c>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d013      	beq.n	8002620 <TIM_Base_SetConfig+0x70>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a71      	ldr	r2, [pc, #452]	@ (80027c0 <TIM_Base_SetConfig+0x210>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d00f      	beq.n	8002620 <TIM_Base_SetConfig+0x70>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a70      	ldr	r2, [pc, #448]	@ (80027c4 <TIM_Base_SetConfig+0x214>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d00b      	beq.n	8002620 <TIM_Base_SetConfig+0x70>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a6f      	ldr	r2, [pc, #444]	@ (80027c8 <TIM_Base_SetConfig+0x218>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d007      	beq.n	8002620 <TIM_Base_SetConfig+0x70>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a6e      	ldr	r2, [pc, #440]	@ (80027cc <TIM_Base_SetConfig+0x21c>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d003      	beq.n	8002620 <TIM_Base_SetConfig+0x70>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a6d      	ldr	r2, [pc, #436]	@ (80027d0 <TIM_Base_SetConfig+0x220>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d108      	bne.n	8002632 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002626:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	4313      	orrs	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a5d      	ldr	r2, [pc, #372]	@ (80027ac <TIM_Base_SetConfig+0x1fc>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d05b      	beq.n	80026f2 <TIM_Base_SetConfig+0x142>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a5c      	ldr	r2, [pc, #368]	@ (80027b0 <TIM_Base_SetConfig+0x200>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d057      	beq.n	80026f2 <TIM_Base_SetConfig+0x142>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002648:	d053      	beq.n	80026f2 <TIM_Base_SetConfig+0x142>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002650:	d04f      	beq.n	80026f2 <TIM_Base_SetConfig+0x142>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a57      	ldr	r2, [pc, #348]	@ (80027b4 <TIM_Base_SetConfig+0x204>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d04b      	beq.n	80026f2 <TIM_Base_SetConfig+0x142>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a56      	ldr	r2, [pc, #344]	@ (80027b8 <TIM_Base_SetConfig+0x208>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d047      	beq.n	80026f2 <TIM_Base_SetConfig+0x142>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a55      	ldr	r2, [pc, #340]	@ (80027bc <TIM_Base_SetConfig+0x20c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d043      	beq.n	80026f2 <TIM_Base_SetConfig+0x142>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a54      	ldr	r2, [pc, #336]	@ (80027c0 <TIM_Base_SetConfig+0x210>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d03f      	beq.n	80026f2 <TIM_Base_SetConfig+0x142>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a53      	ldr	r2, [pc, #332]	@ (80027c4 <TIM_Base_SetConfig+0x214>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d03b      	beq.n	80026f2 <TIM_Base_SetConfig+0x142>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a52      	ldr	r2, [pc, #328]	@ (80027c8 <TIM_Base_SetConfig+0x218>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d037      	beq.n	80026f2 <TIM_Base_SetConfig+0x142>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a51      	ldr	r2, [pc, #324]	@ (80027cc <TIM_Base_SetConfig+0x21c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d033      	beq.n	80026f2 <TIM_Base_SetConfig+0x142>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a50      	ldr	r2, [pc, #320]	@ (80027d0 <TIM_Base_SetConfig+0x220>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d02f      	beq.n	80026f2 <TIM_Base_SetConfig+0x142>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a4f      	ldr	r2, [pc, #316]	@ (80027d4 <TIM_Base_SetConfig+0x224>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d02b      	beq.n	80026f2 <TIM_Base_SetConfig+0x142>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a4e      	ldr	r2, [pc, #312]	@ (80027d8 <TIM_Base_SetConfig+0x228>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d027      	beq.n	80026f2 <TIM_Base_SetConfig+0x142>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a4d      	ldr	r2, [pc, #308]	@ (80027dc <TIM_Base_SetConfig+0x22c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d023      	beq.n	80026f2 <TIM_Base_SetConfig+0x142>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a4c      	ldr	r2, [pc, #304]	@ (80027e0 <TIM_Base_SetConfig+0x230>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d01f      	beq.n	80026f2 <TIM_Base_SetConfig+0x142>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a4b      	ldr	r2, [pc, #300]	@ (80027e4 <TIM_Base_SetConfig+0x234>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d01b      	beq.n	80026f2 <TIM_Base_SetConfig+0x142>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a4a      	ldr	r2, [pc, #296]	@ (80027e8 <TIM_Base_SetConfig+0x238>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d017      	beq.n	80026f2 <TIM_Base_SetConfig+0x142>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a49      	ldr	r2, [pc, #292]	@ (80027ec <TIM_Base_SetConfig+0x23c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d013      	beq.n	80026f2 <TIM_Base_SetConfig+0x142>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a48      	ldr	r2, [pc, #288]	@ (80027f0 <TIM_Base_SetConfig+0x240>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d00f      	beq.n	80026f2 <TIM_Base_SetConfig+0x142>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a47      	ldr	r2, [pc, #284]	@ (80027f4 <TIM_Base_SetConfig+0x244>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d00b      	beq.n	80026f2 <TIM_Base_SetConfig+0x142>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a46      	ldr	r2, [pc, #280]	@ (80027f8 <TIM_Base_SetConfig+0x248>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d007      	beq.n	80026f2 <TIM_Base_SetConfig+0x142>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a45      	ldr	r2, [pc, #276]	@ (80027fc <TIM_Base_SetConfig+0x24c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d003      	beq.n	80026f2 <TIM_Base_SetConfig+0x142>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a44      	ldr	r2, [pc, #272]	@ (8002800 <TIM_Base_SetConfig+0x250>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d108      	bne.n	8002704 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	4313      	orrs	r3, r2
 8002702:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	4313      	orrs	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a20      	ldr	r2, [pc, #128]	@ (80027ac <TIM_Base_SetConfig+0x1fc>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d023      	beq.n	8002778 <TIM_Base_SetConfig+0x1c8>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a1f      	ldr	r2, [pc, #124]	@ (80027b0 <TIM_Base_SetConfig+0x200>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d01f      	beq.n	8002778 <TIM_Base_SetConfig+0x1c8>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a24      	ldr	r2, [pc, #144]	@ (80027cc <TIM_Base_SetConfig+0x21c>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d01b      	beq.n	8002778 <TIM_Base_SetConfig+0x1c8>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a23      	ldr	r2, [pc, #140]	@ (80027d0 <TIM_Base_SetConfig+0x220>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d017      	beq.n	8002778 <TIM_Base_SetConfig+0x1c8>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a28      	ldr	r2, [pc, #160]	@ (80027ec <TIM_Base_SetConfig+0x23c>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d013      	beq.n	8002778 <TIM_Base_SetConfig+0x1c8>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a27      	ldr	r2, [pc, #156]	@ (80027f0 <TIM_Base_SetConfig+0x240>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d00f      	beq.n	8002778 <TIM_Base_SetConfig+0x1c8>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a26      	ldr	r2, [pc, #152]	@ (80027f4 <TIM_Base_SetConfig+0x244>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d00b      	beq.n	8002778 <TIM_Base_SetConfig+0x1c8>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a25      	ldr	r2, [pc, #148]	@ (80027f8 <TIM_Base_SetConfig+0x248>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d007      	beq.n	8002778 <TIM_Base_SetConfig+0x1c8>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a24      	ldr	r2, [pc, #144]	@ (80027fc <TIM_Base_SetConfig+0x24c>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d003      	beq.n	8002778 <TIM_Base_SetConfig+0x1c8>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a23      	ldr	r2, [pc, #140]	@ (8002800 <TIM_Base_SetConfig+0x250>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d103      	bne.n	8002780 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	691a      	ldr	r2, [r3, #16]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b01      	cmp	r3, #1
 8002790:	d105      	bne.n	800279e <TIM_Base_SetConfig+0x1ee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	f023 0201 	bic.w	r2, r3, #1
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	611a      	str	r2, [r3, #16]
  }
}
 800279e:	bf00      	nop
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	40012c00 	.word	0x40012c00
 80027b0:	50012c00 	.word	0x50012c00
 80027b4:	40000400 	.word	0x40000400
 80027b8:	50000400 	.word	0x50000400
 80027bc:	40000800 	.word	0x40000800
 80027c0:	50000800 	.word	0x50000800
 80027c4:	40000c00 	.word	0x40000c00
 80027c8:	50000c00 	.word	0x50000c00
 80027cc:	40013400 	.word	0x40013400
 80027d0:	50013400 	.word	0x50013400
 80027d4:	40001800 	.word	0x40001800
 80027d8:	50001800 	.word	0x50001800
 80027dc:	40001c00 	.word	0x40001c00
 80027e0:	50001c00 	.word	0x50001c00
 80027e4:	40002000 	.word	0x40002000
 80027e8:	50002000 	.word	0x50002000
 80027ec:	40014000 	.word	0x40014000
 80027f0:	50014000 	.word	0x50014000
 80027f4:	40014400 	.word	0x40014400
 80027f8:	50014400 	.word	0x50014400
 80027fc:	40014800 	.word	0x40014800
 8002800:	50014800 	.word	0x50014800

08002804 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	f023 0201 	bic.w	r2, r3, #1
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800282e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	011b      	lsls	r3, r3, #4
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4313      	orrs	r3, r2
 8002838:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f023 030a 	bic.w	r3, r3, #10
 8002840:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	4313      	orrs	r3, r2
 8002848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	621a      	str	r2, [r3, #32]
}
 8002856:	bf00      	nop
 8002858:	371c      	adds	r7, #28
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002862:	b480      	push	{r7}
 8002864:	b087      	sub	sp, #28
 8002866:	af00      	add	r7, sp, #0
 8002868:	60f8      	str	r0, [r7, #12]
 800286a:	60b9      	str	r1, [r7, #8]
 800286c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	f023 0210 	bic.w	r2, r3, #16
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800288c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	031b      	lsls	r3, r3, #12
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	4313      	orrs	r3, r2
 8002896:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800289e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	621a      	str	r2, [r3, #32]
}
 80028b6:	bf00      	nop
 80028b8:	371c      	adds	r7, #28
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b085      	sub	sp, #20
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
 80028ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80028d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	f043 0307 	orr.w	r3, r3, #7
 80028e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	609a      	str	r2, [r3, #8]
}
 80028f0:	bf00      	nop
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b087      	sub	sp, #28
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
 8002908:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002916:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	021a      	lsls	r2, r3, #8
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	431a      	orrs	r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	4313      	orrs	r3, r2
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	4313      	orrs	r3, r2
 8002928:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	609a      	str	r2, [r3, #8]
}
 8002930:	bf00      	nop
 8002932:	371c      	adds	r7, #28
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800294c:	2b01      	cmp	r3, #1
 800294e:	d101      	bne.n	8002954 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002950:	2302      	movs	r3, #2
 8002952:	e0a1      	b.n	8002a98 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a4a      	ldr	r2, [pc, #296]	@ (8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d00e      	beq.n	800299c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a49      	ldr	r2, [pc, #292]	@ (8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d009      	beq.n	800299c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a47      	ldr	r2, [pc, #284]	@ (8002aac <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d004      	beq.n	800299c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a46      	ldr	r2, [pc, #280]	@ (8002ab0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d108      	bne.n	80029ae <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80029a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80029b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a34      	ldr	r2, [pc, #208]	@ (8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d04a      	beq.n	8002a6c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a33      	ldr	r2, [pc, #204]	@ (8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d045      	beq.n	8002a6c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029e8:	d040      	beq.n	8002a6c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029f2:	d03b      	beq.n	8002a6c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a2e      	ldr	r2, [pc, #184]	@ (8002ab4 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d036      	beq.n	8002a6c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a2d      	ldr	r2, [pc, #180]	@ (8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d031      	beq.n	8002a6c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a2b      	ldr	r2, [pc, #172]	@ (8002abc <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d02c      	beq.n	8002a6c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a2a      	ldr	r2, [pc, #168]	@ (8002ac0 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d027      	beq.n	8002a6c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a28      	ldr	r2, [pc, #160]	@ (8002ac4 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d022      	beq.n	8002a6c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a27      	ldr	r2, [pc, #156]	@ (8002ac8 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d01d      	beq.n	8002a6c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a1d      	ldr	r2, [pc, #116]	@ (8002aac <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d018      	beq.n	8002a6c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ab0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d013      	beq.n	8002a6c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a20      	ldr	r2, [pc, #128]	@ (8002acc <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d00e      	beq.n	8002a6c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a1f      	ldr	r2, [pc, #124]	@ (8002ad0 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d009      	beq.n	8002a6c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ad4 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d004      	beq.n	8002a6c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a1c      	ldr	r2, [pc, #112]	@ (8002ad8 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d10c      	bne.n	8002a86 <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	40012c00 	.word	0x40012c00
 8002aa8:	50012c00 	.word	0x50012c00
 8002aac:	40013400 	.word	0x40013400
 8002ab0:	50013400 	.word	0x50013400
 8002ab4:	40000400 	.word	0x40000400
 8002ab8:	50000400 	.word	0x50000400
 8002abc:	40000800 	.word	0x40000800
 8002ac0:	50000800 	.word	0x50000800
 8002ac4:	40000c00 	.word	0x40000c00
 8002ac8:	50000c00 	.word	0x50000c00
 8002acc:	40001800 	.word	0x40001800
 8002ad0:	50001800 	.word	0x50001800
 8002ad4:	40014000 	.word	0x40014000
 8002ad8:	50014000 	.word	0x50014000

08002adc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <memset>:
 8002b68:	4402      	add	r2, r0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d100      	bne.n	8002b72 <memset+0xa>
 8002b70:	4770      	bx	lr
 8002b72:	f803 1b01 	strb.w	r1, [r3], #1
 8002b76:	e7f9      	b.n	8002b6c <memset+0x4>

08002b78 <__libc_init_array>:
 8002b78:	b570      	push	{r4, r5, r6, lr}
 8002b7a:	4d0d      	ldr	r5, [pc, #52]	@ (8002bb0 <__libc_init_array+0x38>)
 8002b7c:	2600      	movs	r6, #0
 8002b7e:	4c0d      	ldr	r4, [pc, #52]	@ (8002bb4 <__libc_init_array+0x3c>)
 8002b80:	1b64      	subs	r4, r4, r5
 8002b82:	10a4      	asrs	r4, r4, #2
 8002b84:	42a6      	cmp	r6, r4
 8002b86:	d109      	bne.n	8002b9c <__libc_init_array+0x24>
 8002b88:	4d0b      	ldr	r5, [pc, #44]	@ (8002bb8 <__libc_init_array+0x40>)
 8002b8a:	2600      	movs	r6, #0
 8002b8c:	4c0b      	ldr	r4, [pc, #44]	@ (8002bbc <__libc_init_array+0x44>)
 8002b8e:	f000 f817 	bl	8002bc0 <_init>
 8002b92:	1b64      	subs	r4, r4, r5
 8002b94:	10a4      	asrs	r4, r4, #2
 8002b96:	42a6      	cmp	r6, r4
 8002b98:	d105      	bne.n	8002ba6 <__libc_init_array+0x2e>
 8002b9a:	bd70      	pop	{r4, r5, r6, pc}
 8002b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ba0:	3601      	adds	r6, #1
 8002ba2:	4798      	blx	r3
 8002ba4:	e7ee      	b.n	8002b84 <__libc_init_array+0xc>
 8002ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002baa:	3601      	adds	r6, #1
 8002bac:	4798      	blx	r3
 8002bae:	e7f2      	b.n	8002b96 <__libc_init_array+0x1e>
 8002bb0:	08002be8 	.word	0x08002be8
 8002bb4:	08002be8 	.word	0x08002be8
 8002bb8:	08002be8 	.word	0x08002be8
 8002bbc:	08002bec 	.word	0x08002bec

08002bc0 <_init>:
 8002bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bc2:	bf00      	nop
 8002bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bc6:	bc08      	pop	{r3}
 8002bc8:	469e      	mov	lr, r3
 8002bca:	4770      	bx	lr

08002bcc <_fini>:
 8002bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bce:	bf00      	nop
 8002bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bd2:	bc08      	pop	{r3}
 8002bd4:	469e      	mov	lr, r3
 8002bd6:	4770      	bx	lr
