/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include<stdio.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

//creating task to run using systicck scheduler

//function prototype
void task1(void);
void task2(void);
void task3(void);
void task4(void);
void enable_systick(uint32_t);
//for each task seperate private stack memory will be fixed
/* Stack definition */
#define SIZE_OF_TASK              1024U
#define SIZE_OF_SCHEDULER         1024U

#define SRAM_START                0x20000000U
#define SRAM_END                  ((SRAM_START) + (128 * 1024))
#define T1_TASK_START             SRAM_END
#define T2_TASK_START             ((SRAM_END) + (1 * SIZE_OF_TASK))
#define T3_TASK_START             ((SRAM_END) + (2 * SIZE_OF_TASK))
#define T4_TASK_START             ((SRAM_END) + (3 * SIZE_OF_TASK))
#define TASK_SCHEDULER_START      ((SRAM_END) + (4 * SIZE_OF_TASK))

#define HSI_clock                     16000000U
#define Systick_clock                 HSI_clock
#define Tick_hz                       1000U


int main(void)
{

	enable_systick(Tick_hz);
    /* Loop forever */
	for(;;);
}

void enable_systick(uint32_t tick_hz)
{
	uint32_t count = (Systick_clock / tick_hz)-1;

	uint32_t *pSCSR = (uint32_t *)0xE000E010;
	uint32_t *pSRVR = (uint32_t *)0xE000E014;

	//loading the counter
	*pSRVR &= ~(0xFFFFFF);//clearing the register

		*pSRVR = count;//loading the count

	//enable systick exception
	*pSCSR |= (1<<0);// counter enable
	*pSCSR |= (1<<1);// exception enable
	*pSCSR |= (1<<2);// clock source - processor clock

}


uint8_t countt=0;
void SysTick_Handler(void)
{
	printf("%d\n",countt++);
}

//function definitions
void task1(void)
{
while(1) printf("task1\n");
}

void task2(void)
{
	while(1) printf("task2\n");
}

void task3(void)
{
	while(1) printf("task3\n");
}
void task4(void)
{
	while(1) printf("task4\n");
}
