/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include<stdio.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

//creating task to run using systicck scheduler

//function prototype
void task1(void);
void task2(void);
void task3(void);
void task4(void);
void enable_systick(uint32_t tick_hz);
__attribute__((naked)) void initialize_MSP(uint32_t);
void init_task_stack(void);
__attribute__((naked))SP_to_PSP(void);
void fault_init(void);
uint32_t get_psp(void);

//for each task seperate private stack memory will be fixed
/* Stack definition */
#define MAX_TASK                  4
#define SIZE_OF_TASK              1024U
#define SIZE_OF_SCHEDULER         1024U
#define DUMMY_XPSR                0x010000000U

#define SRAM_START                0x20000000U
#define SRAM_END                  ((SRAM_START) + (128 * 1024))
#define T1_TASK_START             SRAM_END
#define T2_TASK_START             ((SRAM_END) + (1 * SIZE_OF_TASK))
#define T3_TASK_START             ((SRAM_END) + (2 * SIZE_OF_TASK))
#define T4_TASK_START             ((SRAM_END) + (3 * SIZE_OF_TASK))
#define TASK_SCHEDULER_START      ((SRAM_END) + (4 * SIZE_OF_TASK))

#define HSI_clock                     16000000U
#define Systick_clock                 HSI_clock
#define Tick_hz                       1000U

//variable definitions
//creating a array with all the start address
uint32_t psp_of_task[MAX_TASK]= {T1_TASK_START,T2_TASK_START,T3_TASK_START,T4_TASK_START};
uint32_t task_fun_address[MAX_TASK];

int main(void)
{
	initialize_MSP(TASK_SCHEDULER_START);//initializing scheduler task pointer

	task_fun_address[0] = (uint32_t)task1;//assigning the address of all functions as array values for using in PCs
	task_fun_address[1] = (uint32_t)task2;
	task_fun_address[2] = (uint32_t)task3;
	task_fun_address[3] = (uint32_t)task4;

	fault_init();//enabling faults and its handler

	init_task_stack();

	enable_systick(Tick_hz);

	//change to PSP before calling the task
	SP_to_PSP();

	task1();
    /* Loop forever */
	for(;;);
}


void fault_init(void)
{
	uint32_t *pSHBSR = (uint32_t *) 0xE000ED24;

	*pSHBSR |= (1<<16);//MEMFAULTENA
	*pSHBSR |= (1<<17);//BUSFAULTENA
	*pSHBSR |= (1<<18);//USGFAULTENA

}

uint8_t current_task = 0;
uint32_t get_psp(void)
{
return psp_of_task[current_task];
}
__attribute__((naked))void SP_to_PSP(void)
{
	__asm volatile("MSR PSP,%0" ::"r"(T1_TASK_START):);

}


void init_task_stack(void)
{
	uint32_t *pPSP;
	for(int i=0; i<MAX_TASK; i++)
	{
		pPSP = (uint32_t *)psp_of_task[i];//pointer that points to the start of the stack

		pPSP --;//full descending stack .firsr CPU descends
		*pPSP = DUMMY_XPSR;

		pPSP --;//descending to the next address
		*pPSP = task_fun_address[i];//PC

		pPSP--;
		*pPSP = 0xFFFFFFFD;//LR EXIT_ret

		for(int i=0;i<13;i++)
		{
			pPSP--;
			*pPSP = 0;//all r0 to r12 register
		}

		 psp_of_task[i] = (uint32_t)pPSP;//saving the last pointer
	}

}

//initiating MSP to have Scheduler stack space
__attribute__((naked)) void initialize_MSP(uint32_t start_of_stack)
{
	__asm volatile("MSR MSP,%0": :"r" (start_of_stack) :  );
	__asm volatile("BX LR");
}

void enable_systick(uint32_t tick_hz)
{
	uint32_t count = (Systick_clock / tick_hz)-1;

	uint32_t *pSCSR = (uint32_t *)0xE000E010;
	uint32_t *pSRVR = (uint32_t *)0xE000E014;

	//loading the counter
	*pSRVR &= ~(0xFFFFFF);//clearing the register

		*pSRVR = count;//loading the count

	//enable systick exception
	*pSCSR |= (1<<0);// counter enable
	*pSCSR |= (1<<1);// exception enable
	*pSCSR |= (1<<2);// clock source - processor clock

}

void HardFault_Handler(void)
{
	printf("Hardfault\n");
	while(1);
}

void MemManage_Handler(void)
{
	printf("MEMmanagefault\n");
	while(1);
}

void BusFault_Handler(void)
{
	printf("BUSfault\n");
	while(1);
}

void SysTick_Handler(void)
{

}

//function definitions
void task1(void)
{
while(1) printf("task1\n");
}

void task2(void)
{
	while(1) printf("task2\n");
}

void task3(void)
{
	while(1) printf("task3\n");
}
void task4(void)
{
	while(1) printf("task4\n");
}
