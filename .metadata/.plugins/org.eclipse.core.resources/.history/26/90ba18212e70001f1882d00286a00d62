/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>
#include "led.h"

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


//function declarations
void task1_handler(void);
void task2_handler(void);
void task3_handler(void);
void task4_handler(void);
void enable_fault_handler(void);
void dummy_stack_init(void);
__attribute__((naked)) void MSP_scheduler_init(uint32_t);
void enable_systick(uint32_t);
__attribute__((naked))void Switch_to_PSP(void);
uint32_t get_current_psp(void);
void save_PSP(uint32_t);
void update_next_task(void);
void task_delay(uint32_t tick_count);
void unblock_task(void);

//Private stack definitions

#define SRAM_START            0x20000000U
#define SRAM_END              ((SRAM_START)+(128*1024))
#define SIZE_OF_TASK          1024U
#define SIZE_OF_SCHEDULER     1024U
#define TASK1_PSP             SRAM_END
#define TASK2_PSP             SRAM_END - (1 * SIZE_OF_TASK)
#define TASK3_PSP             SRAM_END - (2 * SIZE_OF_TASK)
#define TASK4_PSP             SRAM_END - (3 * SIZE_OF_TASK)
#define IDLE_STACK_START      SRAM_END - (4 * SIZE_OF_TASK)
#define SCHEDULER_START       SRAM_END - (5 * SIZE_OF_TASK)
#define MAX_TASK              5

//for initializing dummy stack values
#define DUMMY_XPSR        0x01000000U

//systick_definitions
#define SYSTEM_CLOCK     16000000U
#define TICK_HZ          1000U

//struct definitions
#define TASK_READY_STATE  0x00
#define TASK_BLOCKED_STATE  0xFF

//variable declarations

uint32_t *pPSP;//a pointer to point in the stack space
uint32_t current_task = 1;//zero is for idle task
/* This variable gets updated from systick handler for every systick interrupt */
uint32_t g_tick_count = 0;


typedef struct
{
	uint32_t psp_of_task;
	void  (*task_handler_address)(void);//function pointer for all task handlers
	uint32_t block_count;//count to block a specific task after execution
	uint8_t current_state;//storing the state of each task
}TCB_t;

TCB_t user_task[MAX_TASK];//creating a array element of struct each for one task.

//uint32_t psp_of_task[MAX_TASK] = {TASK1_PSP,TASK2_PSP,TASK3_PSP,TASK4_PSP};//putting all start points in a array
//uint32_t task_handler_address[MAX_TASK];



int main(void)
{
	//initialzing MSP
	 MSP_scheduler_init(SCHEDULER_START);

	//initializing all fault
	enable_fault_handler();

	//initializing the private stack with dummy values
	dummy_stack_init();

	//enabling all led
	led_init_all();
   //systick handler enabling
	enable_systick(TICK_HZ);


//initialize PSP for task to run on
	Switch_to_PSP();

	task1_handler();
    /* Loop forever */
	for(;;);
}

void idle_task(void)
{
	while(1);
}


void task1_handler(void)
{
	while(1){

		led_on(LED_GREEN);
		task_delay(1000);
		led_off(LED_GREEN);
	}
}
void task2_handler(void)
{
	while(1){

		led_on(LED_ORANGE);
		task_delay(500);
		led_off(LED_ORANGE);
	}
}
void task3_handler(void)
{
	while(1){

		led_on(LED_BLUE);
		task_delay(250);
		led_off(LED_BLUE);
	}
}
void task4_handler(void)
{
	while(1){

		led_on(LED_RED);
		task_delay(100);
		led_off(LED_RED);
	}
}

void enable_fault_handler(void)
{
	uint32_t *pSHRSR = (uint32_t *)0xE000ED24;

	*pSHRSR |= (1<<16);//MEMfault
	*pSHRSR |= (1<<17);//busfault
	*pSHRSR |= (1<<18);//usefault

}

void HardFault_Handler(void)
{
	printf("Hardfault\n");
	while(1);
}

void MemManage_Handler(void)
{
	printf("MEMmanagefault\n");
	while(1);
}

void BusFault_Handler(void)
{
	printf("BUSfault\n");
	while(1);
}


void dummy_stack_init(void)
{
	//giving initial current state as task running state

	user_task[0].current_state = TASK_READY_STATE;
	user_task[1].current_state = TASK_READY_STATE;
	user_task[2].current_state = TASK_READY_STATE;
	user_task[3].current_state = TASK_READY_STATE;
	user_task[4].current_state = TASK_READY_STATE;

//assigning the task handler address function pointer with addres of funcitons
	user_task[0].task_handler_address = idle_task;
	user_task[1].task_handler_address = task1_handler;
	user_task[2].task_handler_address = task2_handler;
	user_task[3].task_handler_address = task3_handler;
	user_task[4].task_handler_address = task4_handler;

	//assigning the PSP values
		user_task[0].psp_of_task = IDLE_STACK_START;
		user_task[1].psp_of_task = TASK2_PSP;
		user_task[2].psp_of_task = TASK3_PSP;
		user_task[3].psp_of_task = TASK4_PSP;
		user_task[4].psp_of_task = TASK4_PSP;


for(int i=0;i<MAX_TASK;i++)
{
  pPSP = (uint32_t *)user_task[i].psp_of_task;//starts with the first task Private stack
  //leaving the same space as CPU does.full descending

  //first stack value is xpsr
  --pPSP; //decremented first as the stack type is full descending.CPU decrements before saving
  *pPSP = DUMMY_XPSR;//24th bit is only of concern for tbit

  //second stack value is PC
  //PC contains the next executing instruction address
  //next task address
  --pPSP;
  *pPSP =(uint32_t)user_task[i].task_handler_address;

  //third is LR - EXIT_RET value for exception
  --pPSP;
  *pPSP = 0xFFFFFFFD;

  //r0 to r12 register are saved with 0;dummy value
  for(int j = 0 ; j < 13 ; j++)
  		{
  			pPSP--;
  		    *pPSP = 0;

  		}

  user_task[i].psp_of_task =(uint32_t)pPSP;//saving the current locaiton of psp in array

}
}

__attribute__((naked)) void MSP_scheduler_init(uint32_t SCHEDULER_START_ADD)
{
	//__asm volatile("MSR MSP,%0": :"r" (SCHEDULER_START_ADD) :  );
	__asm volatile("MSR MSP,R0");//R0 is the register which stores argumnent to a function
	__asm volatile("BX LR");
}


uint32_t get_current_psp()
{
	return user_task[current_task].psp_of_task;// initially will return first task PSP
}

__attribute__((naked))void Switch_to_PSP(void)
{
	//step one assign PSP with first task PSP
	//done using a function get_current_PSP
	//since branching takes place, LR value with EXT_ret will be corrupted
	//so saving LR value before branching
	__asm volatile("PUSH {LR}");
	__asm volatile("BL get_current_psp");//R0 being the base register for function operation,it will have current PSP address
	__asm volatile("MSR PSP,R0");//PSP is loaded with current psp of the running task
	__asm volatile("POP {LR}");//poping LR back into the usage

	//set 2nd bit of control register to work in PSP
	__asm volatile("MOV R0,#0x02");
	__asm volatile("MSR CONTROL,R0");
	__asm volatile("BX LR");


}

void enable_systick(uint32_t tick_hz)
{
	uint32_t count = (SYSTEM_CLOCK / tick_hz)-1;

	uint32_t *pSCSR = (uint32_t *)0xE000E010;
	uint32_t *pSRVR = (uint32_t *)0xE000E014;

	//loading the counter
	*pSRVR &= ~(0xFFFFFF);//clearing the register

		*pSRVR = count;//loading the count

	//enable systick exception
	*pSCSR |= (1<<0);// counter enable
	*pSCSR |= (1<<1);// exception enable
	*pSCSR |= (1<<2);// clock source - processor clock
}

__attribute__ ((naked))void PendSV_Handler()
{
	//context saving of the current task
__asm volatile("MRS R0,PSP");//getting current PSP value

__asm volatile("STMDB R0!,{R4-R11}");//saving other register values

__asm volatile("PUSH {LR}");//branching to other functions corrupts LR value

__asm volatile("BL save_PSP");//saving the current psp after updating r0 to r11

//context switching

//context retriving of next task
__asm volatile("BL update_next_task");//updating the next tsk

__asm volatile("BL get_current_psp");//getting the psp of the next task which is in R0

__asm volatile("POP {LR}");//branching to other functions corrupts LR value

__asm volatile("LDMIA R0!,{R4-R11}");//retrving r4 to R11 in PSP

__asm volatile("MSR PSP,R0");//changing PSP to next task private psp

__asm volatile("BX LR");
}

void unblock_task(void)
{
	for(int i=1; i<MAX_TASK; i++)
	{
		if(user_task[i].current_state != TASK_READY_STATE)//not eql to task ready
				{
		if(user_task[i].block_count == g_tick_count)//checking blocking state
					{
						user_task[i].current_state = TASK_READY_STATE;
					}
	}
	}
}

void SysTick_Handler()
{
	uint32_t *pICSR = (uint32_t*)0xE000ED04;//ICSR

	g_tick_count ++;//updating global tick count

	unblock_task();

	 //pend the pendsv exception
	    *pICSR |= ( 1 << 28);//pendsv to carry out context switching


}

void save_PSP(uint32_t current_psp)
{
	user_task[current_task].psp_of_task = current_psp;//saving the updated PSP values
}

void update_next_task(void)
{
	int state = TASK_BLOCKED_STATE;

	for(int i= 0 ; i < (MAX_TASK) ; i++)
	{
		current_task++;
	    current_task %= MAX_TASK;
		state = user_task[current_task].current_state;
		if( (state == TASK_READY_STATE) && (current_task != 0) )
			break;
	}

	if(state != TASK_READY_STATE)
		current_task = 0;
}

void task_delay(uint32_t tick_count)
{

	if(current_task)//not applicable for idle task
	{
	//user_task[current_task].block_count = g_tick_count + tick_count;
	user_task[current_task].block_count = tick_count;
	user_task[current_task].current_state = TASK_BLOCKED_STATE;

	uint32_t *pICSR = (uint32_t*)0xE000ED04;//ICSR
	//pend the pendsv exception
		    *pICSR |= ( 1 << 28);//pendsv to carry out context switching
	}

}
