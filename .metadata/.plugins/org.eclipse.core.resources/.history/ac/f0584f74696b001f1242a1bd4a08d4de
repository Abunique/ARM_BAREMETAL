/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
uint32_t *pSHBSR = (uint32_t *) 0xE000ED24;

*pSHBSR |= (1<<16);//MEMFAULTENA
*pSHBSR |= (1<<17);//BUSFAULTENA
//*pSHBSR |= (1<<18);//USGFAULTENA

//enable divide by zero trap
//CCR control register bit 4 to be enabled
uint32_t *CCR = (uint32_t *)0xE000ED14;

*CCR |= (1<<4);//setting the foruth bit div by zero trap

int div = 10/0;

printf("%d\n",div);


for(;;);

}

void HardFault_Handler(void)
{
	printf("Hardfault\n");
	while(1);
}

void MemManage_Handler(void)
{
	printf("MEMmanagefault\n");
	while(1);
}

void BusFault_Handler(void)
{
	printf("BUSfault\n");
	while(1);
}

__attribute__((naked)) void UsageFault_Handler(void)
{
	__asm volatile("MRS R0, MSP");
	__asm ("B UsageFault_Handler_c");//branching or calling c funciton usage_handler_c
	//as per AAP standard callee fucntion will use R0 for arguments, thus contents of R0 wil be storedin pointer pMSP automatically
}

void UsageFault_Handler_c(uint32_t *pMSP)
{
	uint32_t *pUFSR = (uint32_t *)0xE000ED2A;

	printf("%lx \n",(*pUFSR & 0xFFFF));//PUFSR usage fault status register is an 16 bit register
	printf("Usagefault\n");
	printf("%p",pMSP);//pointer address //MSP
	printf("Value of R0 :%lx\n",pMSP[0]);//contents of MSP from bottom
	printf("Value of R1 :%lx\n",pMSP[1]);
	printf("Value of R2 :%lx\n",pMSP[2]);
	printf("Value of R3 :%lx\n",pMSP[3]);
	printf("Value of R12 :%lx\n",pMSP[4]);
	printf("Value of LR :%lx\n",pMSP[5]);
	printf("Value of PC :%lx\n",pMSP[6]);
	printf("Value of xPSR :%lx\n",pMSP[7]);
	while(1);
}
