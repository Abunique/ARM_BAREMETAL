
task_scheduler_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001160  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080012e8  080012e8  000022e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001310  08001310  00003060  2**0
                  CONTENTS
  4 .ARM          00000000  08001310  08001310  00003060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001310  08001310  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001310  08001310  00002310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001314  08001314  00002314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08001318  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003060  2**0
                  CONTENTS
 10 .bss          000001c0  20000060  20000060  00003060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000220  20000220  00003060  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000e13  00000000  00000000  0000308a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005a6  00000000  00000000  00003e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000200  00000000  00000000  00004448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000169  00000000  00000000  00004648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002dfe  00000000  00000000  000047b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001cd5  00000000  00000000  000075af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009dc1  00000000  00000000  00009284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00013045  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d28  00000000  00000000  00013088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00013db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080012d0 	.word	0x080012d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000064 	.word	0x20000064
 80001c4:	080012d0 	.word	0x080012d0

080001c8 <led_init_all>:
{
  for(uint32_t i = 0 ; i < count ; i++);
}

void led_init_all(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 80001ce:	4b19      	ldr	r3, [pc, #100]	@ (8000234 <led_init_all+0x6c>)
 80001d0:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020C00;
 80001d2:	4b19      	ldr	r3, [pc, #100]	@ (8000238 <led_init_all+0x70>)
 80001d4:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= ( 1 << 3);
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	f043 0208 	orr.w	r2, r3, #8
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));
 80001e2:	683b      	ldr	r3, [r7, #0]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80001ea:	683b      	ldr	r3, [r7, #0]
 80001ec:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE));
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));
 80001fa:	683b      	ldr	r3, [r7, #0]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));
 8000206:	683b      	ldr	r3, [r7, #0]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_GREEN);
 8000212:	200c      	movs	r0, #12
 8000214:	f000 f82a 	bl	800026c <led_off>
    led_off(LED_ORANGE);
 8000218:	200d      	movs	r0, #13
 800021a:	f000 f827 	bl	800026c <led_off>
    led_off(LED_RED);
 800021e:	200e      	movs	r0, #14
 8000220:	f000 f824 	bl	800026c <led_off>
    led_off(LED_BLUE);
 8000224:	200f      	movs	r0, #15
 8000226:	f000 f821 	bl	800026c <led_off>



}
 800022a:	bf00      	nop
 800022c:	3708      	adds	r7, #8
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	40023830 	.word	0x40023830
 8000238:	40020c00 	.word	0x40020c00

0800023c <led_on>:

void led_on(uint8_t led_no)
{
 800023c:	b480      	push	{r7}
 800023e:	b085      	sub	sp, #20
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000246:	4b08      	ldr	r3, [pc, #32]	@ (8000268 <led_on+0x2c>)
 8000248:	60fb      	str	r3, [r7, #12]
  *pGpiodDataReg |= ( 1 << led_no);
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	79fa      	ldrb	r2, [r7, #7]
 8000250:	2101      	movs	r1, #1
 8000252:	fa01 f202 	lsl.w	r2, r1, r2
 8000256:	431a      	orrs	r2, r3
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	601a      	str	r2, [r3, #0]

}
 800025c:	bf00      	nop
 800025e:	3714      	adds	r7, #20
 8000260:	46bd      	mov	sp, r7
 8000262:	bc80      	pop	{r7}
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	40020c14 	.word	0x40020c14

0800026c <led_off>:

void led_off(uint8_t led_no)
{
 800026c:	b480      	push	{r7}
 800026e:	b085      	sub	sp, #20
 8000270:	af00      	add	r7, sp, #0
 8000272:	4603      	mov	r3, r0
 8000274:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000276:	4b08      	ldr	r3, [pc, #32]	@ (8000298 <led_off+0x2c>)
 8000278:	60fb      	str	r3, [r7, #12]
	  *pGpiodDataReg &= ~( 1 << led_no);
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	79fa      	ldrb	r2, [r7, #7]
 8000280:	2101      	movs	r1, #1
 8000282:	fa01 f202 	lsl.w	r2, r1, r2
 8000286:	43d2      	mvns	r2, r2
 8000288:	401a      	ands	r2, r3
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	601a      	str	r2, [r3, #0]

}
 800028e:	bf00      	nop
 8000290:	3714      	adds	r7, #20
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr
 8000298:	40020c14 	.word	0x40020c14

0800029c <main>:
//uint32_t task_handler_address[MAX_TASK];



int main(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0

	//initializing all fault
	enable_fault_handler();
 80002a0:	f000 f85c 	bl	800035c <enable_fault_handler>

	//initialzing MSP
	 MSP_scheduler_init(SCHED_STACK_START);
 80002a4:	4808      	ldr	r0, [pc, #32]	@ (80002c8 <main+0x2c>)
 80002a6:	f000 f923 	bl	80004f0 <MSP_scheduler_init>

	//initializing the private stack with dummy values
	dummy_stack_init();
 80002aa:	f000 f893 	bl	80003d4 <dummy_stack_init>

	//enabling all led
	led_init_all();
 80002ae:	f7ff ff8b 	bl	80001c8 <led_init_all>
   //systick handler enabling
	enable_systick(TICK_HZ);
 80002b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002b6:	f000 f93f 	bl	8000538 <enable_systick>


//initialize PSP for task to run on
	Switch_to_PSP();
 80002ba:	f000 f92f 	bl	800051c <Switch_to_PSP>

	task1_handler();
 80002be:	f000 f809 	bl	80002d4 <task1_handler>
    /* Loop forever */
	for(;;);
 80002c2:	bf00      	nop
 80002c4:	e7fd      	b.n	80002c2 <main+0x26>
 80002c6:	bf00      	nop
 80002c8:	2001ec00 	.word	0x2001ec00

080002cc <idle_task>:
}

void idle_task(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
	while(1);
 80002d0:	bf00      	nop
 80002d2:	e7fd      	b.n	80002d0 <idle_task+0x4>

080002d4 <task1_handler>:

}


void task1_handler(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0

	while(1){
		led_on(LED_GREEN);
 80002d8:	200c      	movs	r0, #12
 80002da:	f7ff ffaf 	bl	800023c <led_on>
		task_delay(1000);
 80002de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002e2:	f000 fa2d 	bl	8000740 <task_delay>

		led_off(LED_GREEN);
 80002e6:	200c      	movs	r0, #12
 80002e8:	f7ff ffc0 	bl	800026c <led_off>
		task_delay(1000);
 80002ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002f0:	f000 fa26 	bl	8000740 <task_delay>
		led_on(LED_GREEN);
 80002f4:	bf00      	nop
 80002f6:	e7ef      	b.n	80002d8 <task1_handler+0x4>

080002f8 <task2_handler>:
	}
}
void task2_handler(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	while(1){

		led_on(LED_ORANGE);
 80002fc:	200d      	movs	r0, #13
 80002fe:	f7ff ff9d 	bl	800023c <led_on>
		task_delay(500);
 8000302:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000306:	f000 fa1b 	bl	8000740 <task_delay>

		led_off(LED_ORANGE);
 800030a:	200d      	movs	r0, #13
 800030c:	f7ff ffae 	bl	800026c <led_off>
		task_delay(500);
 8000310:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000314:	f000 fa14 	bl	8000740 <task_delay>
		led_on(LED_ORANGE);
 8000318:	bf00      	nop
 800031a:	e7ef      	b.n	80002fc <task2_handler+0x4>

0800031c <task3_handler>:
	}
}
void task3_handler(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	while(1){

		led_on(LED_BLUE);
 8000320:	200f      	movs	r0, #15
 8000322:	f7ff ff8b 	bl	800023c <led_on>
		task_delay(250);
 8000326:	20fa      	movs	r0, #250	@ 0xfa
 8000328:	f000 fa0a 	bl	8000740 <task_delay>

		led_off(LED_BLUE);
 800032c:	200f      	movs	r0, #15
 800032e:	f7ff ff9d 	bl	800026c <led_off>
		task_delay(250);
 8000332:	20fa      	movs	r0, #250	@ 0xfa
 8000334:	f000 fa04 	bl	8000740 <task_delay>
		led_on(LED_BLUE);
 8000338:	bf00      	nop
 800033a:	e7f1      	b.n	8000320 <task3_handler+0x4>

0800033c <task4_handler>:
	}
}
void task4_handler(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	while(1){

		led_on(LED_RED);
 8000340:	200e      	movs	r0, #14
 8000342:	f7ff ff7b 	bl	800023c <led_on>
		task_delay(100);
 8000346:	2064      	movs	r0, #100	@ 0x64
 8000348:	f000 f9fa 	bl	8000740 <task_delay>

		led_off(LED_RED);
 800034c:	200e      	movs	r0, #14
 800034e:	f7ff ff8d 	bl	800026c <led_off>
		task_delay(100);
 8000352:	2064      	movs	r0, #100	@ 0x64
 8000354:	f000 f9f4 	bl	8000740 <task_delay>
		led_on(LED_RED);
 8000358:	bf00      	nop
 800035a:	e7f1      	b.n	8000340 <task4_handler+0x4>

0800035c <enable_fault_handler>:
	}
}

void enable_fault_handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
	uint32_t *pSHRSR = (uint32_t *)0xE000ED24;
 8000362:	4b0c      	ldr	r3, [pc, #48]	@ (8000394 <enable_fault_handler+0x38>)
 8000364:	607b      	str	r3, [r7, #4]

	*pSHRSR |= (1<<16);//MEMfault
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	601a      	str	r2, [r3, #0]
	*pSHRSR |= (1<<17);//busfault
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	601a      	str	r2, [r3, #0]
	*pSHRSR |= (1<<18);//usefault
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	601a      	str	r2, [r3, #0]

}
 800038a:	bf00      	nop
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr
 8000394:	e000ed24 	.word	0xe000ed24

08000398 <HardFault_Handler>:

void HardFault_Handler(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	printf("Hardfault\n");
 800039c:	4802      	ldr	r0, [pc, #8]	@ (80003a8 <HardFault_Handler+0x10>)
 800039e:	f000 fc07 	bl	8000bb0 <puts>
	while(1);
 80003a2:	bf00      	nop
 80003a4:	e7fd      	b.n	80003a2 <HardFault_Handler+0xa>
 80003a6:	bf00      	nop
 80003a8:	080012e8 	.word	0x080012e8

080003ac <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	printf("MEMmanagefault\n");
 80003b0:	4802      	ldr	r0, [pc, #8]	@ (80003bc <MemManage_Handler+0x10>)
 80003b2:	f000 fbfd 	bl	8000bb0 <puts>
	while(1);
 80003b6:	bf00      	nop
 80003b8:	e7fd      	b.n	80003b6 <MemManage_Handler+0xa>
 80003ba:	bf00      	nop
 80003bc:	080012f4 	.word	0x080012f4

080003c0 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
	printf("BUSfault\n");
 80003c4:	4802      	ldr	r0, [pc, #8]	@ (80003d0 <BusFault_Handler+0x10>)
 80003c6:	f000 fbf3 	bl	8000bb0 <puts>
	while(1);
 80003ca:	bf00      	nop
 80003cc:	e7fd      	b.n	80003ca <BusFault_Handler+0xa>
 80003ce:	bf00      	nop
 80003d0:	08001304 	.word	0x08001304

080003d4 <dummy_stack_init>:
}


void dummy_stack_init(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
	//giving initial current state as task running state

	user_task[0].current_state = TASK_READY_STATE;
 80003da:	4b3a      	ldr	r3, [pc, #232]	@ (80004c4 <dummy_stack_init+0xf0>)
 80003dc:	2200      	movs	r2, #0
 80003de:	731a      	strb	r2, [r3, #12]
	user_task[1].current_state = TASK_READY_STATE;
 80003e0:	4b38      	ldr	r3, [pc, #224]	@ (80004c4 <dummy_stack_init+0xf0>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	771a      	strb	r2, [r3, #28]
	user_task[2].current_state = TASK_READY_STATE;
 80003e6:	4b37      	ldr	r3, [pc, #220]	@ (80004c4 <dummy_stack_init+0xf0>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	user_task[3].current_state = TASK_READY_STATE;
 80003ee:	4b35      	ldr	r3, [pc, #212]	@ (80004c4 <dummy_stack_init+0xf0>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	user_task[4].current_state = TASK_READY_STATE;
 80003f6:	4b33      	ldr	r3, [pc, #204]	@ (80004c4 <dummy_stack_init+0xf0>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

	//assigning the PSP values
		user_task[0].psp_of_task = IDLE_STACK_START;
 80003fe:	4b31      	ldr	r3, [pc, #196]	@ (80004c4 <dummy_stack_init+0xf0>)
 8000400:	4a31      	ldr	r2, [pc, #196]	@ (80004c8 <dummy_stack_init+0xf4>)
 8000402:	601a      	str	r2, [r3, #0]
		user_task[1].psp_of_task = T1_STACK_START;
 8000404:	4b2f      	ldr	r3, [pc, #188]	@ (80004c4 <dummy_stack_init+0xf0>)
 8000406:	4a31      	ldr	r2, [pc, #196]	@ (80004cc <dummy_stack_init+0xf8>)
 8000408:	611a      	str	r2, [r3, #16]
		user_task[2].psp_of_task = T2_STACK_START;
 800040a:	4b2e      	ldr	r3, [pc, #184]	@ (80004c4 <dummy_stack_init+0xf0>)
 800040c:	4a30      	ldr	r2, [pc, #192]	@ (80004d0 <dummy_stack_init+0xfc>)
 800040e:	621a      	str	r2, [r3, #32]
		user_task[3].psp_of_task = T3_STACK_START;
 8000410:	4b2c      	ldr	r3, [pc, #176]	@ (80004c4 <dummy_stack_init+0xf0>)
 8000412:	4a30      	ldr	r2, [pc, #192]	@ (80004d4 <dummy_stack_init+0x100>)
 8000414:	631a      	str	r2, [r3, #48]	@ 0x30
		user_task[4].psp_of_task = T4_STACK_START;
 8000416:	4b2b      	ldr	r3, [pc, #172]	@ (80004c4 <dummy_stack_init+0xf0>)
 8000418:	4a2f      	ldr	r2, [pc, #188]	@ (80004d8 <dummy_stack_init+0x104>)
 800041a:	641a      	str	r2, [r3, #64]	@ 0x40

//assigning the task handler address function pointer with addres of funcitons
	user_task[0].task_handler_address = idle_task;
 800041c:	4b29      	ldr	r3, [pc, #164]	@ (80004c4 <dummy_stack_init+0xf0>)
 800041e:	4a2f      	ldr	r2, [pc, #188]	@ (80004dc <dummy_stack_init+0x108>)
 8000420:	605a      	str	r2, [r3, #4]
	user_task[1].task_handler_address = task1_handler;
 8000422:	4b28      	ldr	r3, [pc, #160]	@ (80004c4 <dummy_stack_init+0xf0>)
 8000424:	4a2e      	ldr	r2, [pc, #184]	@ (80004e0 <dummy_stack_init+0x10c>)
 8000426:	615a      	str	r2, [r3, #20]
	user_task[2].task_handler_address = task2_handler;
 8000428:	4b26      	ldr	r3, [pc, #152]	@ (80004c4 <dummy_stack_init+0xf0>)
 800042a:	4a2e      	ldr	r2, [pc, #184]	@ (80004e4 <dummy_stack_init+0x110>)
 800042c:	625a      	str	r2, [r3, #36]	@ 0x24
	user_task[3].task_handler_address = task3_handler;
 800042e:	4b25      	ldr	r3, [pc, #148]	@ (80004c4 <dummy_stack_init+0xf0>)
 8000430:	4a2d      	ldr	r2, [pc, #180]	@ (80004e8 <dummy_stack_init+0x114>)
 8000432:	635a      	str	r2, [r3, #52]	@ 0x34
	user_task[4].task_handler_address = task4_handler;
 8000434:	4b23      	ldr	r3, [pc, #140]	@ (80004c4 <dummy_stack_init+0xf0>)
 8000436:	4a2d      	ldr	r2, [pc, #180]	@ (80004ec <dummy_stack_init+0x118>)
 8000438:	645a      	str	r2, [r3, #68]	@ 0x44


	uint32_t *pPSP;//a pointer to point in the stack space

for(int i=0;i<MAX_TASK;i++)
 800043a:	2300      	movs	r3, #0
 800043c:	60bb      	str	r3, [r7, #8]
 800043e:	e037      	b.n	80004b0 <dummy_stack_init+0xdc>
{
  pPSP = (uint32_t *)user_task[i].psp_of_task;//starts with the first task Private stack
 8000440:	4a20      	ldr	r2, [pc, #128]	@ (80004c4 <dummy_stack_init+0xf0>)
 8000442:	68bb      	ldr	r3, [r7, #8]
 8000444:	011b      	lsls	r3, r3, #4
 8000446:	4413      	add	r3, r2
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	60fb      	str	r3, [r7, #12]
  //leaving the same space as CPU does.full descending

  //first stack value is xpsr
  --pPSP; //decremented first as the stack type is full descending.CPU decrements before saving
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	3b04      	subs	r3, #4
 8000450:	60fb      	str	r3, [r7, #12]
  *pPSP = DUMMY_XPSR;//24th bit is only of concern for tbit
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000458:	601a      	str	r2, [r3, #0]

  //second stack value is PC
  //PC contains the next executing instruction address
  //next task address
  --pPSP;
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	3b04      	subs	r3, #4
 800045e:	60fb      	str	r3, [r7, #12]
  *pPSP =(uint32_t)user_task[i].task_handler_address;
 8000460:	4a18      	ldr	r2, [pc, #96]	@ (80004c4 <dummy_stack_init+0xf0>)
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	011b      	lsls	r3, r3, #4
 8000466:	4413      	add	r3, r2
 8000468:	3304      	adds	r3, #4
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	461a      	mov	r2, r3
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	601a      	str	r2, [r3, #0]

  //third is LR - EXIT_RET value for exception
  --pPSP;
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	3b04      	subs	r3, #4
 8000476:	60fb      	str	r3, [r7, #12]
  *pPSP = 0xFFFFFFFD;
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	f06f 0202 	mvn.w	r2, #2
 800047e:	601a      	str	r2, [r3, #0]

  //r0 to r12 register are saved with 0;dummy value
  for(int j = 0 ; j < 13 ; j++)
 8000480:	2300      	movs	r3, #0
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	e008      	b.n	8000498 <dummy_stack_init+0xc4>
  		{
  			pPSP--;
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	3b04      	subs	r3, #4
 800048a:	60fb      	str	r3, [r7, #12]
  		    *pPSP = 0;
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
  for(int j = 0 ; j < 13 ; j++)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	3301      	adds	r3, #1
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	2b0c      	cmp	r3, #12
 800049c:	ddf3      	ble.n	8000486 <dummy_stack_init+0xb2>

  		}

  user_task[i].psp_of_task =(uint32_t)pPSP;//saving the current locaiton of psp in array
 800049e:	68fa      	ldr	r2, [r7, #12]
 80004a0:	4908      	ldr	r1, [pc, #32]	@ (80004c4 <dummy_stack_init+0xf0>)
 80004a2:	68bb      	ldr	r3, [r7, #8]
 80004a4:	011b      	lsls	r3, r3, #4
 80004a6:	440b      	add	r3, r1
 80004a8:	601a      	str	r2, [r3, #0]
for(int i=0;i<MAX_TASK;i++)
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	3301      	adds	r3, #1
 80004ae:	60bb      	str	r3, [r7, #8]
 80004b0:	68bb      	ldr	r3, [r7, #8]
 80004b2:	2b04      	cmp	r3, #4
 80004b4:	ddc4      	ble.n	8000440 <dummy_stack_init+0x6c>

}
}
 80004b6:	bf00      	nop
 80004b8:	bf00      	nop
 80004ba:	3714      	adds	r7, #20
 80004bc:	46bd      	mov	sp, r7
 80004be:	bc80      	pop	{r7}
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	20000080 	.word	0x20000080
 80004c8:	2001f000 	.word	0x2001f000
 80004cc:	20020000 	.word	0x20020000
 80004d0:	2001fc00 	.word	0x2001fc00
 80004d4:	2001f800 	.word	0x2001f800
 80004d8:	2001f400 	.word	0x2001f400
 80004dc:	080002cd 	.word	0x080002cd
 80004e0:	080002d5 	.word	0x080002d5
 80004e4:	080002f9 	.word	0x080002f9
 80004e8:	0800031d 	.word	0x0800031d
 80004ec:	0800033d 	.word	0x0800033d

080004f0 <MSP_scheduler_init>:

__attribute__((naked)) void MSP_scheduler_init(uint32_t SCHEDULER_START_ADD)
{
 80004f0:	4603      	mov	r3, r0
	__asm volatile("MSR MSP,%0": :"r" (SCHEDULER_START_ADD) :  );
 80004f2:	f383 8808 	msr	MSP, r3
	//__asm volatile("MSR MSP,R0");//R0 is the register which stores argumnent to a function
	__asm volatile("BX LR");
 80004f6:	4770      	bx	lr
}
 80004f8:	bf00      	nop
	...

080004fc <get_current_psp>:


uint32_t get_current_psp()
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
	return user_task[current_task].psp_of_task;// initially will return first task PSP
 8000500:	4b04      	ldr	r3, [pc, #16]	@ (8000514 <get_current_psp+0x18>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a04      	ldr	r2, [pc, #16]	@ (8000518 <get_current_psp+0x1c>)
 8000506:	011b      	lsls	r3, r3, #4
 8000508:	4413      	add	r3, r2
 800050a:	681b      	ldr	r3, [r3, #0]
}
 800050c:	4618      	mov	r0, r3
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr
 8000514:	20000000 	.word	0x20000000
 8000518:	20000080 	.word	0x20000080

0800051c <Switch_to_PSP>:
{
	//step one assign PSP with first task PSP
	//done using a function get_current_PSP
	//since branching takes place, LR value with EXT_ret will be corrupted
	//so saving LR value before branching
	__asm volatile("PUSH {LR}");
 800051c:	b500      	push	{lr}
	__asm volatile("BL get_current_psp");//R0 being the base register for function operation,it will have current PSP address
 800051e:	f7ff ffed 	bl	80004fc <get_current_psp>
	__asm volatile("MSR PSP,R0");//PSP is loaded with current psp of the running task
 8000522:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");//poping LR back into the usage
 8000526:	f85d eb04 	ldr.w	lr, [sp], #4

	//set 2nd bit of control register to work in PSP
	__asm volatile("MOV R0,#0x02");
 800052a:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL,R0");
 800052e:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 8000532:	4770      	bx	lr


}
 8000534:	bf00      	nop
	...

08000538 <enable_systick>:

void enable_systick(uint32_t tick_hz)
{
 8000538:	b480      	push	{r7}
 800053a:	b087      	sub	sp, #28
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	uint32_t count = (SYSTICK_TIM_CLK / tick_hz)-1;
 8000540:	4a14      	ldr	r2, [pc, #80]	@ (8000594 <enable_systick+0x5c>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	fbb2 f3f3 	udiv	r3, r2, r3
 8000548:	3b01      	subs	r3, #1
 800054a:	617b      	str	r3, [r7, #20]

	uint32_t *pSCSR = (uint32_t *)0xE000E010;
 800054c:	4b12      	ldr	r3, [pc, #72]	@ (8000598 <enable_systick+0x60>)
 800054e:	613b      	str	r3, [r7, #16]
	uint32_t *pSRVR = (uint32_t *)0xE000E014;
 8000550:	4b12      	ldr	r3, [pc, #72]	@ (800059c <enable_systick+0x64>)
 8000552:	60fb      	str	r3, [r7, #12]

	//loading the counter
	*pSRVR &= ~(0xFFFFFF);//clearing the register
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	601a      	str	r2, [r3, #0]

		*pSRVR = count;//loading the count
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	697a      	ldr	r2, [r7, #20]
 8000564:	601a      	str	r2, [r3, #0]

	//enable systick exception
	*pSCSR |= (1<<0);// counter enable
 8000566:	693b      	ldr	r3, [r7, #16]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f043 0201 	orr.w	r2, r3, #1
 800056e:	693b      	ldr	r3, [r7, #16]
 8000570:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1<<1);// exception enable
 8000572:	693b      	ldr	r3, [r7, #16]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f043 0202 	orr.w	r2, r3, #2
 800057a:	693b      	ldr	r3, [r7, #16]
 800057c:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1<<2);// clock source - processor clock
 800057e:	693b      	ldr	r3, [r7, #16]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f043 0204 	orr.w	r2, r3, #4
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	601a      	str	r2, [r3, #0]
}
 800058a:	bf00      	nop
 800058c:	371c      	adds	r7, #28
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr
 8000594:	00f42400 	.word	0x00f42400
 8000598:	e000e010 	.word	0xe000e010
 800059c:	e000e014 	.word	0xe000e014

080005a0 <PendSV_Handler>:

__attribute__ ((naked))void PendSV_Handler()
{
	//context saving of the current task
__asm volatile("MRS R0,PSP");//getting current PSP value
 80005a0:	f3ef 8009 	mrs	r0, PSP

__asm volatile("STMDB R0!,{R4-R11}");//saving other register values
 80005a4:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

__asm volatile("PUSH {LR}");//branching to other functions corrupts LR value
 80005a8:	b500      	push	{lr}

__asm volatile("BL save_PSP");//saving the current psp after updating r0 to r11
 80005aa:	f000 f861 	bl	8000670 <save_PSP>

//context switching

//context retriving of next task
__asm volatile("BL update_next_task");//updating the next tsk
 80005ae:	f000 f873 	bl	8000698 <update_next_task>

__asm volatile("BL get_current_psp");//getting the psp of the next task which is in R0
 80005b2:	f7ff ffa3 	bl	80004fc <get_current_psp>

__asm volatile("POP {LR}");//branching to other functions corrupts LR value
 80005b6:	f85d eb04 	ldr.w	lr, [sp], #4

__asm volatile("LDMIA R0!,{R4-R11}");//retrving r4 to R11 in PSP
 80005ba:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

__asm volatile("MSR PSP,R0");//changing PSP to next task private psp
 80005be:	f380 8809 	msr	PSP, r0

__asm volatile("BX LR");
 80005c2:	4770      	bx	lr
}
 80005c4:	bf00      	nop
	...

080005c8 <update_global_tick_count>:

void update_global_tick_count(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
	g_tick_count++;
 80005cc:	4b04      	ldr	r3, [pc, #16]	@ (80005e0 <update_global_tick_count+0x18>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	3301      	adds	r3, #1
 80005d2:	4a03      	ldr	r2, [pc, #12]	@ (80005e0 <update_global_tick_count+0x18>)
 80005d4:	6013      	str	r3, [r2, #0]
}
 80005d6:	bf00      	nop
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	2000007c 	.word	0x2000007c

080005e4 <unblock_tasks>:

void unblock_tasks(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
	for(int i = 1 ; i < MAX_TASK ; i++)
 80005ea:	2301      	movs	r3, #1
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	e01b      	b.n	8000628 <unblock_tasks+0x44>
	{
		if(user_task[i].current_state != TASK_READY_STATE)
 80005f0:	4a12      	ldr	r2, [pc, #72]	@ (800063c <unblock_tasks+0x58>)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	011b      	lsls	r3, r3, #4
 80005f6:	4413      	add	r3, r2
 80005f8:	330c      	adds	r3, #12
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d010      	beq.n	8000622 <unblock_tasks+0x3e>
		{
			if(user_task[i].block_count == g_tick_count)
 8000600:	4a0e      	ldr	r2, [pc, #56]	@ (800063c <unblock_tasks+0x58>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	011b      	lsls	r3, r3, #4
 8000606:	4413      	add	r3, r2
 8000608:	3308      	adds	r3, #8
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <unblock_tasks+0x5c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	429a      	cmp	r2, r3
 8000612:	d106      	bne.n	8000622 <unblock_tasks+0x3e>
			{
				user_task[i].current_state = TASK_READY_STATE;
 8000614:	4a09      	ldr	r2, [pc, #36]	@ (800063c <unblock_tasks+0x58>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	011b      	lsls	r3, r3, #4
 800061a:	4413      	add	r3, r2
 800061c:	330c      	adds	r3, #12
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
	for(int i = 1 ; i < MAX_TASK ; i++)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	3301      	adds	r3, #1
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2b04      	cmp	r3, #4
 800062c:	dde0      	ble.n	80005f0 <unblock_tasks+0xc>
			}
		}

	}

}
 800062e:	bf00      	nop
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20000080 	.word	0x20000080
 8000640:	2000007c 	.word	0x2000007c

08000644 <SysTick_Handler>:

void SysTick_Handler()
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
	uint32_t *pICSR = (uint32_t*)0xE000ED04;//ICSR
 800064a:	4b08      	ldr	r3, [pc, #32]	@ (800066c <SysTick_Handler+0x28>)
 800064c:	607b      	str	r3, [r7, #4]

	update_global_tick_count();//updating global tick count
 800064e:	f7ff ffbb 	bl	80005c8 <update_global_tick_count>

	unblock_tasks();
 8000652:	f7ff ffc7 	bl	80005e4 <unblock_tasks>

	 //pend the pendsv exception
	    *pICSR |= ( 1 << 28);//pendsv to carry out context switching
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]


}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	e000ed04 	.word	0xe000ed04

08000670 <save_PSP>:

void save_PSP(uint32_t current_psp)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	user_task[current_task].psp_of_task = current_psp;//saving the updated PSP values
 8000678:	4b05      	ldr	r3, [pc, #20]	@ (8000690 <save_PSP+0x20>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a05      	ldr	r2, [pc, #20]	@ (8000694 <save_PSP+0x24>)
 800067e:	011b      	lsls	r3, r3, #4
 8000680:	4413      	add	r3, r2
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	601a      	str	r2, [r3, #0]
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr
 8000690:	20000000 	.word	0x20000000
 8000694:	20000080 	.word	0x20000080

08000698 <update_next_task>:

void update_next_task(void)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
	int state = TASK_BLOCKED_STATE;
 800069e:	23ff      	movs	r3, #255	@ 0xff
 80006a0:	607b      	str	r3, [r7, #4]

	for(int i= 0 ; i < (MAX_TASK) ; i++)
 80006a2:	2300      	movs	r3, #0
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	e022      	b.n	80006ee <update_next_task+0x56>
	{
		current_task++;
 80006a8:	4b19      	ldr	r3, [pc, #100]	@ (8000710 <update_next_task+0x78>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	3301      	adds	r3, #1
 80006ae:	4a18      	ldr	r2, [pc, #96]	@ (8000710 <update_next_task+0x78>)
 80006b0:	6013      	str	r3, [r2, #0]
	    current_task %= MAX_TASK;
 80006b2:	4b17      	ldr	r3, [pc, #92]	@ (8000710 <update_next_task+0x78>)
 80006b4:	6819      	ldr	r1, [r3, #0]
 80006b6:	4b17      	ldr	r3, [pc, #92]	@ (8000714 <update_next_task+0x7c>)
 80006b8:	fba3 2301 	umull	r2, r3, r3, r1
 80006bc:	089a      	lsrs	r2, r3, #2
 80006be:	4613      	mov	r3, r2
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	4413      	add	r3, r2
 80006c4:	1aca      	subs	r2, r1, r3
 80006c6:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <update_next_task+0x78>)
 80006c8:	601a      	str	r2, [r3, #0]
		state = user_task[current_task].current_state;
 80006ca:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <update_next_task+0x78>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a12      	ldr	r2, [pc, #72]	@ (8000718 <update_next_task+0x80>)
 80006d0:	011b      	lsls	r3, r3, #4
 80006d2:	4413      	add	r3, r2
 80006d4:	330c      	adds	r3, #12
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	607b      	str	r3, [r7, #4]
		if( (state == TASK_READY_STATE) && (current_task != 0) )
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d103      	bne.n	80006e8 <update_next_task+0x50>
 80006e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000710 <update_next_task+0x78>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d106      	bne.n	80006f6 <update_next_task+0x5e>
	for(int i= 0 ; i < (MAX_TASK) ; i++)
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	3301      	adds	r3, #1
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	2b04      	cmp	r3, #4
 80006f2:	ddd9      	ble.n	80006a8 <update_next_task+0x10>
 80006f4:	e000      	b.n	80006f8 <update_next_task+0x60>
			break;
 80006f6:	bf00      	nop
	}

	if(state != TASK_READY_STATE)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d002      	beq.n	8000704 <update_next_task+0x6c>
		current_task = 0;
 80006fe:	4b04      	ldr	r3, [pc, #16]	@ (8000710 <update_next_task+0x78>)
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	20000000 	.word	0x20000000
 8000714:	cccccccd 	.word	0xcccccccd
 8000718:	20000080 	.word	0x20000080

0800071c <schedule>:

void schedule(void)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
	//pend the pendsv exception
	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 8000722:	4b06      	ldr	r3, [pc, #24]	@ (800073c <schedule+0x20>)
 8000724:	607b      	str	r3, [r7, #4]
	*pICSR |= ( 1 << 28);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	601a      	str	r2, [r3, #0]

}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr
 800073c:	e000ed04 	.word	0xe000ed04

08000740 <task_delay>:


void task_delay(uint32_t tick_count)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	//disable interrupt
	INTERRUPT_DISABLE();
 8000748:	f04f 0001 	mov.w	r0, #1
 800074c:	f380 8810 	msr	PRIMASK, r0

	if(current_task)
 8000750:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <task_delay+0x54>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d014      	beq.n	8000782 <task_delay+0x42>
	{
	   user_task[current_task].block_count = g_tick_count + tick_count;
 8000758:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <task_delay+0x58>)
 800075a:	6819      	ldr	r1, [r3, #0]
 800075c:	4b0d      	ldr	r3, [pc, #52]	@ (8000794 <task_delay+0x54>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	440a      	add	r2, r1
 8000764:	490d      	ldr	r1, [pc, #52]	@ (800079c <task_delay+0x5c>)
 8000766:	011b      	lsls	r3, r3, #4
 8000768:	440b      	add	r3, r1
 800076a:	3308      	adds	r3, #8
 800076c:	601a      	str	r2, [r3, #0]
	   user_task[current_task].current_state = TASK_BLOCKED_STATE;
 800076e:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <task_delay+0x54>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a0a      	ldr	r2, [pc, #40]	@ (800079c <task_delay+0x5c>)
 8000774:	011b      	lsls	r3, r3, #4
 8000776:	4413      	add	r3, r2
 8000778:	330c      	adds	r3, #12
 800077a:	22ff      	movs	r2, #255	@ 0xff
 800077c:	701a      	strb	r2, [r3, #0]
	   schedule();
 800077e:	f7ff ffcd 	bl	800071c <schedule>
	}

	//enable interrupt
	INTERRUPT_ENABLE();
 8000782:	f04f 0000 	mov.w	r0, #0
 8000786:	f380 8810 	msr	PRIMASK, r0

}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000000 	.word	0x20000000
 8000798:	2000007c 	.word	0x2000007c
 800079c:	20000080 	.word	0x20000080

080007a0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80007aa:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <ITM_SendChar+0x44>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a0d      	ldr	r2, [pc, #52]	@ (80007e4 <ITM_SendChar+0x44>)
 80007b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80007b4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80007b6:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <ITM_SendChar+0x48>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a0b      	ldr	r2, [pc, #44]	@ (80007e8 <ITM_SendChar+0x48>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80007c2:	bf00      	nop
 80007c4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d0f8      	beq.n	80007c4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80007d2:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	6013      	str	r3, [r2, #0]
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr
 80007e4:	e000edfc 	.word	0xe000edfc
 80007e8:	e0000e00 	.word	0xe0000e00

080007ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	e00a      	b.n	8000814 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007fe:	f3af 8000 	nop.w
 8000802:	4601      	mov	r1, r0
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	1c5a      	adds	r2, r3, #1
 8000808:	60ba      	str	r2, [r7, #8]
 800080a:	b2ca      	uxtb	r2, r1
 800080c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	3301      	adds	r3, #1
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	697a      	ldr	r2, [r7, #20]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	429a      	cmp	r2, r3
 800081a:	dbf0      	blt.n	80007fe <_read+0x12>
  }

  return len;
 800081c:	687b      	ldr	r3, [r7, #4]
}
 800081e:	4618      	mov	r0, r3
 8000820:	3718      	adds	r7, #24
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b086      	sub	sp, #24
 800082a:	af00      	add	r7, sp, #0
 800082c:	60f8      	str	r0, [r7, #12]
 800082e:	60b9      	str	r1, [r7, #8]
 8000830:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	e009      	b.n	800084c <_write+0x26>
  {
//    __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	1c5a      	adds	r2, r3, #1
 800083c:	60ba      	str	r2, [r7, #8]
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ffad 	bl	80007a0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	3301      	adds	r3, #1
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	697a      	ldr	r2, [r7, #20]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	429a      	cmp	r2, r3
 8000852:	dbf1      	blt.n	8000838 <_write+0x12>

  }
  return len;
 8000854:	687b      	ldr	r3, [r7, #4]
}
 8000856:	4618      	mov	r0, r3
 8000858:	3718      	adds	r7, #24
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <_close>:

int _close(int file)
{
 800085e:	b480      	push	{r7}
 8000860:	b083      	sub	sp, #12
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000866:	f04f 33ff 	mov.w	r3, #4294967295
}
 800086a:	4618      	mov	r0, r3
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr

08000874 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000884:	605a      	str	r2, [r3, #4]
  return 0;
 8000886:	2300      	movs	r3, #0
}
 8000888:	4618      	mov	r0, r3
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr

08000892 <_isatty>:

int _isatty(int file)
{
 8000892:	b480      	push	{r7}
 8000894:	b083      	sub	sp, #12
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800089a:	2301      	movs	r3, #1
}
 800089c:	4618      	mov	r0, r3
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr

080008a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008a6:	b480      	push	{r7}
 80008a8:	b085      	sub	sp, #20
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	60f8      	str	r0, [r7, #12]
 80008ae:	60b9      	str	r1, [r7, #8]
 80008b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008b2:	2300      	movs	r3, #0
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3714      	adds	r7, #20
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
	...

080008c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008c8:	4a14      	ldr	r2, [pc, #80]	@ (800091c <_sbrk+0x5c>)
 80008ca:	4b15      	ldr	r3, [pc, #84]	@ (8000920 <_sbrk+0x60>)
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d4:	4b13      	ldr	r3, [pc, #76]	@ (8000924 <_sbrk+0x64>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d102      	bne.n	80008e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008dc:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <_sbrk+0x64>)
 80008de:	4a12      	ldr	r2, [pc, #72]	@ (8000928 <_sbrk+0x68>)
 80008e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008e2:	4b10      	ldr	r3, [pc, #64]	@ (8000924 <_sbrk+0x64>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4413      	add	r3, r2
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d207      	bcs.n	8000900 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008f0:	f000 fa8c 	bl	8000e0c <__errno>
 80008f4:	4603      	mov	r3, r0
 80008f6:	220c      	movs	r2, #12
 80008f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008fa:	f04f 33ff 	mov.w	r3, #4294967295
 80008fe:	e009      	b.n	8000914 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000900:	4b08      	ldr	r3, [pc, #32]	@ (8000924 <_sbrk+0x64>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000906:	4b07      	ldr	r3, [pc, #28]	@ (8000924 <_sbrk+0x64>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4413      	add	r3, r2
 800090e:	4a05      	ldr	r2, [pc, #20]	@ (8000924 <_sbrk+0x64>)
 8000910:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000912:	68fb      	ldr	r3, [r7, #12]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20020000 	.word	0x20020000
 8000920:	00000400 	.word	0x00000400
 8000924:	200000d0 	.word	0x200000d0
 8000928:	20000220 	.word	0x20000220

0800092c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800092c:	480d      	ldr	r0, [pc, #52]	@ (8000964 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800092e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000930:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000934:	480c      	ldr	r0, [pc, #48]	@ (8000968 <LoopForever+0x6>)
  ldr r1, =_edata
 8000936:	490d      	ldr	r1, [pc, #52]	@ (800096c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000938:	4a0d      	ldr	r2, [pc, #52]	@ (8000970 <LoopForever+0xe>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800093c:	e002      	b.n	8000944 <LoopCopyDataInit>

0800093e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000942:	3304      	adds	r3, #4

08000944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000948:	d3f9      	bcc.n	800093e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094a:	4a0a      	ldr	r2, [pc, #40]	@ (8000974 <LoopForever+0x12>)
  ldr r4, =_ebss
 800094c:	4c0a      	ldr	r4, [pc, #40]	@ (8000978 <LoopForever+0x16>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000950:	e001      	b.n	8000956 <LoopFillZerobss>

08000952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000954:	3204      	adds	r2, #4

08000956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000958:	d3fb      	bcc.n	8000952 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800095a:	f000 fa5d 	bl	8000e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800095e:	f7ff fc9d 	bl	800029c <main>

08000962 <LoopForever>:

LoopForever:
  b LoopForever
 8000962:	e7fe      	b.n	8000962 <LoopForever>
  ldr   r0, =_estack
 8000964:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800096c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000970:	08001318 	.word	0x08001318
  ldr r2, =_sbss
 8000974:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000978:	20000220 	.word	0x20000220

0800097c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800097c:	e7fe      	b.n	800097c <ADC_IRQHandler>
	...

08000980 <std>:
 8000980:	2300      	movs	r3, #0
 8000982:	b510      	push	{r4, lr}
 8000984:	4604      	mov	r4, r0
 8000986:	e9c0 3300 	strd	r3, r3, [r0]
 800098a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800098e:	6083      	str	r3, [r0, #8]
 8000990:	8181      	strh	r1, [r0, #12]
 8000992:	6643      	str	r3, [r0, #100]	@ 0x64
 8000994:	81c2      	strh	r2, [r0, #14]
 8000996:	6183      	str	r3, [r0, #24]
 8000998:	4619      	mov	r1, r3
 800099a:	2208      	movs	r2, #8
 800099c:	305c      	adds	r0, #92	@ 0x5c
 800099e:	f000 f9e7 	bl	8000d70 <memset>
 80009a2:	4b0d      	ldr	r3, [pc, #52]	@ (80009d8 <std+0x58>)
 80009a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80009a6:	4b0d      	ldr	r3, [pc, #52]	@ (80009dc <std+0x5c>)
 80009a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80009aa:	4b0d      	ldr	r3, [pc, #52]	@ (80009e0 <std+0x60>)
 80009ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80009ae:	4b0d      	ldr	r3, [pc, #52]	@ (80009e4 <std+0x64>)
 80009b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80009b2:	4b0d      	ldr	r3, [pc, #52]	@ (80009e8 <std+0x68>)
 80009b4:	6224      	str	r4, [r4, #32]
 80009b6:	429c      	cmp	r4, r3
 80009b8:	d006      	beq.n	80009c8 <std+0x48>
 80009ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80009be:	4294      	cmp	r4, r2
 80009c0:	d002      	beq.n	80009c8 <std+0x48>
 80009c2:	33d0      	adds	r3, #208	@ 0xd0
 80009c4:	429c      	cmp	r4, r3
 80009c6:	d105      	bne.n	80009d4 <std+0x54>
 80009c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80009cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009d0:	f000 ba46 	b.w	8000e60 <__retarget_lock_init_recursive>
 80009d4:	bd10      	pop	{r4, pc}
 80009d6:	bf00      	nop
 80009d8:	08000bc1 	.word	0x08000bc1
 80009dc:	08000be3 	.word	0x08000be3
 80009e0:	08000c1b 	.word	0x08000c1b
 80009e4:	08000c3f 	.word	0x08000c3f
 80009e8:	200000d4 	.word	0x200000d4

080009ec <stdio_exit_handler>:
 80009ec:	4a02      	ldr	r2, [pc, #8]	@ (80009f8 <stdio_exit_handler+0xc>)
 80009ee:	4903      	ldr	r1, [pc, #12]	@ (80009fc <stdio_exit_handler+0x10>)
 80009f0:	4803      	ldr	r0, [pc, #12]	@ (8000a00 <stdio_exit_handler+0x14>)
 80009f2:	f000 b869 	b.w	8000ac8 <_fwalk_sglue>
 80009f6:	bf00      	nop
 80009f8:	20000004 	.word	0x20000004
 80009fc:	08001159 	.word	0x08001159
 8000a00:	20000014 	.word	0x20000014

08000a04 <cleanup_stdio>:
 8000a04:	6841      	ldr	r1, [r0, #4]
 8000a06:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <cleanup_stdio+0x34>)
 8000a08:	4299      	cmp	r1, r3
 8000a0a:	b510      	push	{r4, lr}
 8000a0c:	4604      	mov	r4, r0
 8000a0e:	d001      	beq.n	8000a14 <cleanup_stdio+0x10>
 8000a10:	f000 fba2 	bl	8001158 <_fflush_r>
 8000a14:	68a1      	ldr	r1, [r4, #8]
 8000a16:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <cleanup_stdio+0x38>)
 8000a18:	4299      	cmp	r1, r3
 8000a1a:	d002      	beq.n	8000a22 <cleanup_stdio+0x1e>
 8000a1c:	4620      	mov	r0, r4
 8000a1e:	f000 fb9b 	bl	8001158 <_fflush_r>
 8000a22:	68e1      	ldr	r1, [r4, #12]
 8000a24:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <cleanup_stdio+0x3c>)
 8000a26:	4299      	cmp	r1, r3
 8000a28:	d004      	beq.n	8000a34 <cleanup_stdio+0x30>
 8000a2a:	4620      	mov	r0, r4
 8000a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a30:	f000 bb92 	b.w	8001158 <_fflush_r>
 8000a34:	bd10      	pop	{r4, pc}
 8000a36:	bf00      	nop
 8000a38:	200000d4 	.word	0x200000d4
 8000a3c:	2000013c 	.word	0x2000013c
 8000a40:	200001a4 	.word	0x200001a4

08000a44 <global_stdio_init.part.0>:
 8000a44:	b510      	push	{r4, lr}
 8000a46:	4b0b      	ldr	r3, [pc, #44]	@ (8000a74 <global_stdio_init.part.0+0x30>)
 8000a48:	4c0b      	ldr	r4, [pc, #44]	@ (8000a78 <global_stdio_init.part.0+0x34>)
 8000a4a:	4a0c      	ldr	r2, [pc, #48]	@ (8000a7c <global_stdio_init.part.0+0x38>)
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	4620      	mov	r0, r4
 8000a50:	2200      	movs	r2, #0
 8000a52:	2104      	movs	r1, #4
 8000a54:	f7ff ff94 	bl	8000980 <std>
 8000a58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2109      	movs	r1, #9
 8000a60:	f7ff ff8e 	bl	8000980 <std>
 8000a64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000a68:	2202      	movs	r2, #2
 8000a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a6e:	2112      	movs	r1, #18
 8000a70:	f7ff bf86 	b.w	8000980 <std>
 8000a74:	2000020c 	.word	0x2000020c
 8000a78:	200000d4 	.word	0x200000d4
 8000a7c:	080009ed 	.word	0x080009ed

08000a80 <__sfp_lock_acquire>:
 8000a80:	4801      	ldr	r0, [pc, #4]	@ (8000a88 <__sfp_lock_acquire+0x8>)
 8000a82:	f000 b9ee 	b.w	8000e62 <__retarget_lock_acquire_recursive>
 8000a86:	bf00      	nop
 8000a88:	20000215 	.word	0x20000215

08000a8c <__sfp_lock_release>:
 8000a8c:	4801      	ldr	r0, [pc, #4]	@ (8000a94 <__sfp_lock_release+0x8>)
 8000a8e:	f000 b9e9 	b.w	8000e64 <__retarget_lock_release_recursive>
 8000a92:	bf00      	nop
 8000a94:	20000215 	.word	0x20000215

08000a98 <__sinit>:
 8000a98:	b510      	push	{r4, lr}
 8000a9a:	4604      	mov	r4, r0
 8000a9c:	f7ff fff0 	bl	8000a80 <__sfp_lock_acquire>
 8000aa0:	6a23      	ldr	r3, [r4, #32]
 8000aa2:	b11b      	cbz	r3, 8000aac <__sinit+0x14>
 8000aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000aa8:	f7ff bff0 	b.w	8000a8c <__sfp_lock_release>
 8000aac:	4b04      	ldr	r3, [pc, #16]	@ (8000ac0 <__sinit+0x28>)
 8000aae:	6223      	str	r3, [r4, #32]
 8000ab0:	4b04      	ldr	r3, [pc, #16]	@ (8000ac4 <__sinit+0x2c>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d1f5      	bne.n	8000aa4 <__sinit+0xc>
 8000ab8:	f7ff ffc4 	bl	8000a44 <global_stdio_init.part.0>
 8000abc:	e7f2      	b.n	8000aa4 <__sinit+0xc>
 8000abe:	bf00      	nop
 8000ac0:	08000a05 	.word	0x08000a05
 8000ac4:	2000020c 	.word	0x2000020c

08000ac8 <_fwalk_sglue>:
 8000ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000acc:	4607      	mov	r7, r0
 8000ace:	4688      	mov	r8, r1
 8000ad0:	4614      	mov	r4, r2
 8000ad2:	2600      	movs	r6, #0
 8000ad4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000ad8:	f1b9 0901 	subs.w	r9, r9, #1
 8000adc:	d505      	bpl.n	8000aea <_fwalk_sglue+0x22>
 8000ade:	6824      	ldr	r4, [r4, #0]
 8000ae0:	2c00      	cmp	r4, #0
 8000ae2:	d1f7      	bne.n	8000ad4 <_fwalk_sglue+0xc>
 8000ae4:	4630      	mov	r0, r6
 8000ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000aea:	89ab      	ldrh	r3, [r5, #12]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d907      	bls.n	8000b00 <_fwalk_sglue+0x38>
 8000af0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000af4:	3301      	adds	r3, #1
 8000af6:	d003      	beq.n	8000b00 <_fwalk_sglue+0x38>
 8000af8:	4629      	mov	r1, r5
 8000afa:	4638      	mov	r0, r7
 8000afc:	47c0      	blx	r8
 8000afe:	4306      	orrs	r6, r0
 8000b00:	3568      	adds	r5, #104	@ 0x68
 8000b02:	e7e9      	b.n	8000ad8 <_fwalk_sglue+0x10>

08000b04 <_puts_r>:
 8000b04:	6a03      	ldr	r3, [r0, #32]
 8000b06:	b570      	push	{r4, r5, r6, lr}
 8000b08:	6884      	ldr	r4, [r0, #8]
 8000b0a:	4605      	mov	r5, r0
 8000b0c:	460e      	mov	r6, r1
 8000b0e:	b90b      	cbnz	r3, 8000b14 <_puts_r+0x10>
 8000b10:	f7ff ffc2 	bl	8000a98 <__sinit>
 8000b14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000b16:	07db      	lsls	r3, r3, #31
 8000b18:	d405      	bmi.n	8000b26 <_puts_r+0x22>
 8000b1a:	89a3      	ldrh	r3, [r4, #12]
 8000b1c:	0598      	lsls	r0, r3, #22
 8000b1e:	d402      	bmi.n	8000b26 <_puts_r+0x22>
 8000b20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000b22:	f000 f99e 	bl	8000e62 <__retarget_lock_acquire_recursive>
 8000b26:	89a3      	ldrh	r3, [r4, #12]
 8000b28:	0719      	lsls	r1, r3, #28
 8000b2a:	d502      	bpl.n	8000b32 <_puts_r+0x2e>
 8000b2c:	6923      	ldr	r3, [r4, #16]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d135      	bne.n	8000b9e <_puts_r+0x9a>
 8000b32:	4621      	mov	r1, r4
 8000b34:	4628      	mov	r0, r5
 8000b36:	f000 f8c5 	bl	8000cc4 <__swsetup_r>
 8000b3a:	b380      	cbz	r0, 8000b9e <_puts_r+0x9a>
 8000b3c:	f04f 35ff 	mov.w	r5, #4294967295
 8000b40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000b42:	07da      	lsls	r2, r3, #31
 8000b44:	d405      	bmi.n	8000b52 <_puts_r+0x4e>
 8000b46:	89a3      	ldrh	r3, [r4, #12]
 8000b48:	059b      	lsls	r3, r3, #22
 8000b4a:	d402      	bmi.n	8000b52 <_puts_r+0x4e>
 8000b4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000b4e:	f000 f989 	bl	8000e64 <__retarget_lock_release_recursive>
 8000b52:	4628      	mov	r0, r5
 8000b54:	bd70      	pop	{r4, r5, r6, pc}
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	da04      	bge.n	8000b64 <_puts_r+0x60>
 8000b5a:	69a2      	ldr	r2, [r4, #24]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	dc17      	bgt.n	8000b90 <_puts_r+0x8c>
 8000b60:	290a      	cmp	r1, #10
 8000b62:	d015      	beq.n	8000b90 <_puts_r+0x8c>
 8000b64:	6823      	ldr	r3, [r4, #0]
 8000b66:	1c5a      	adds	r2, r3, #1
 8000b68:	6022      	str	r2, [r4, #0]
 8000b6a:	7019      	strb	r1, [r3, #0]
 8000b6c:	68a3      	ldr	r3, [r4, #8]
 8000b6e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000b72:	3b01      	subs	r3, #1
 8000b74:	60a3      	str	r3, [r4, #8]
 8000b76:	2900      	cmp	r1, #0
 8000b78:	d1ed      	bne.n	8000b56 <_puts_r+0x52>
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	da11      	bge.n	8000ba2 <_puts_r+0x9e>
 8000b7e:	4622      	mov	r2, r4
 8000b80:	210a      	movs	r1, #10
 8000b82:	4628      	mov	r0, r5
 8000b84:	f000 f85f 	bl	8000c46 <__swbuf_r>
 8000b88:	3001      	adds	r0, #1
 8000b8a:	d0d7      	beq.n	8000b3c <_puts_r+0x38>
 8000b8c:	250a      	movs	r5, #10
 8000b8e:	e7d7      	b.n	8000b40 <_puts_r+0x3c>
 8000b90:	4622      	mov	r2, r4
 8000b92:	4628      	mov	r0, r5
 8000b94:	f000 f857 	bl	8000c46 <__swbuf_r>
 8000b98:	3001      	adds	r0, #1
 8000b9a:	d1e7      	bne.n	8000b6c <_puts_r+0x68>
 8000b9c:	e7ce      	b.n	8000b3c <_puts_r+0x38>
 8000b9e:	3e01      	subs	r6, #1
 8000ba0:	e7e4      	b.n	8000b6c <_puts_r+0x68>
 8000ba2:	6823      	ldr	r3, [r4, #0]
 8000ba4:	1c5a      	adds	r2, r3, #1
 8000ba6:	6022      	str	r2, [r4, #0]
 8000ba8:	220a      	movs	r2, #10
 8000baa:	701a      	strb	r2, [r3, #0]
 8000bac:	e7ee      	b.n	8000b8c <_puts_r+0x88>
	...

08000bb0 <puts>:
 8000bb0:	4b02      	ldr	r3, [pc, #8]	@ (8000bbc <puts+0xc>)
 8000bb2:	4601      	mov	r1, r0
 8000bb4:	6818      	ldr	r0, [r3, #0]
 8000bb6:	f7ff bfa5 	b.w	8000b04 <_puts_r>
 8000bba:	bf00      	nop
 8000bbc:	20000010 	.word	0x20000010

08000bc0 <__sread>:
 8000bc0:	b510      	push	{r4, lr}
 8000bc2:	460c      	mov	r4, r1
 8000bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bc8:	f000 f8fc 	bl	8000dc4 <_read_r>
 8000bcc:	2800      	cmp	r0, #0
 8000bce:	bfab      	itete	ge
 8000bd0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000bd2:	89a3      	ldrhlt	r3, [r4, #12]
 8000bd4:	181b      	addge	r3, r3, r0
 8000bd6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000bda:	bfac      	ite	ge
 8000bdc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000bde:	81a3      	strhlt	r3, [r4, #12]
 8000be0:	bd10      	pop	{r4, pc}

08000be2 <__swrite>:
 8000be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000be6:	461f      	mov	r7, r3
 8000be8:	898b      	ldrh	r3, [r1, #12]
 8000bea:	05db      	lsls	r3, r3, #23
 8000bec:	4605      	mov	r5, r0
 8000bee:	460c      	mov	r4, r1
 8000bf0:	4616      	mov	r6, r2
 8000bf2:	d505      	bpl.n	8000c00 <__swrite+0x1e>
 8000bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f000 f8d0 	bl	8000da0 <_lseek_r>
 8000c00:	89a3      	ldrh	r3, [r4, #12]
 8000c02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c0a:	81a3      	strh	r3, [r4, #12]
 8000c0c:	4632      	mov	r2, r6
 8000c0e:	463b      	mov	r3, r7
 8000c10:	4628      	mov	r0, r5
 8000c12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000c16:	f000 b8e7 	b.w	8000de8 <_write_r>

08000c1a <__sseek>:
 8000c1a:	b510      	push	{r4, lr}
 8000c1c:	460c      	mov	r4, r1
 8000c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c22:	f000 f8bd 	bl	8000da0 <_lseek_r>
 8000c26:	1c43      	adds	r3, r0, #1
 8000c28:	89a3      	ldrh	r3, [r4, #12]
 8000c2a:	bf15      	itete	ne
 8000c2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000c2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000c32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000c36:	81a3      	strheq	r3, [r4, #12]
 8000c38:	bf18      	it	ne
 8000c3a:	81a3      	strhne	r3, [r4, #12]
 8000c3c:	bd10      	pop	{r4, pc}

08000c3e <__sclose>:
 8000c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c42:	f000 b89d 	b.w	8000d80 <_close_r>

08000c46 <__swbuf_r>:
 8000c46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c48:	460e      	mov	r6, r1
 8000c4a:	4614      	mov	r4, r2
 8000c4c:	4605      	mov	r5, r0
 8000c4e:	b118      	cbz	r0, 8000c58 <__swbuf_r+0x12>
 8000c50:	6a03      	ldr	r3, [r0, #32]
 8000c52:	b90b      	cbnz	r3, 8000c58 <__swbuf_r+0x12>
 8000c54:	f7ff ff20 	bl	8000a98 <__sinit>
 8000c58:	69a3      	ldr	r3, [r4, #24]
 8000c5a:	60a3      	str	r3, [r4, #8]
 8000c5c:	89a3      	ldrh	r3, [r4, #12]
 8000c5e:	071a      	lsls	r2, r3, #28
 8000c60:	d501      	bpl.n	8000c66 <__swbuf_r+0x20>
 8000c62:	6923      	ldr	r3, [r4, #16]
 8000c64:	b943      	cbnz	r3, 8000c78 <__swbuf_r+0x32>
 8000c66:	4621      	mov	r1, r4
 8000c68:	4628      	mov	r0, r5
 8000c6a:	f000 f82b 	bl	8000cc4 <__swsetup_r>
 8000c6e:	b118      	cbz	r0, 8000c78 <__swbuf_r+0x32>
 8000c70:	f04f 37ff 	mov.w	r7, #4294967295
 8000c74:	4638      	mov	r0, r7
 8000c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c78:	6823      	ldr	r3, [r4, #0]
 8000c7a:	6922      	ldr	r2, [r4, #16]
 8000c7c:	1a98      	subs	r0, r3, r2
 8000c7e:	6963      	ldr	r3, [r4, #20]
 8000c80:	b2f6      	uxtb	r6, r6
 8000c82:	4283      	cmp	r3, r0
 8000c84:	4637      	mov	r7, r6
 8000c86:	dc05      	bgt.n	8000c94 <__swbuf_r+0x4e>
 8000c88:	4621      	mov	r1, r4
 8000c8a:	4628      	mov	r0, r5
 8000c8c:	f000 fa64 	bl	8001158 <_fflush_r>
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d1ed      	bne.n	8000c70 <__swbuf_r+0x2a>
 8000c94:	68a3      	ldr	r3, [r4, #8]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	60a3      	str	r3, [r4, #8]
 8000c9a:	6823      	ldr	r3, [r4, #0]
 8000c9c:	1c5a      	adds	r2, r3, #1
 8000c9e:	6022      	str	r2, [r4, #0]
 8000ca0:	701e      	strb	r6, [r3, #0]
 8000ca2:	6962      	ldr	r2, [r4, #20]
 8000ca4:	1c43      	adds	r3, r0, #1
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d004      	beq.n	8000cb4 <__swbuf_r+0x6e>
 8000caa:	89a3      	ldrh	r3, [r4, #12]
 8000cac:	07db      	lsls	r3, r3, #31
 8000cae:	d5e1      	bpl.n	8000c74 <__swbuf_r+0x2e>
 8000cb0:	2e0a      	cmp	r6, #10
 8000cb2:	d1df      	bne.n	8000c74 <__swbuf_r+0x2e>
 8000cb4:	4621      	mov	r1, r4
 8000cb6:	4628      	mov	r0, r5
 8000cb8:	f000 fa4e 	bl	8001158 <_fflush_r>
 8000cbc:	2800      	cmp	r0, #0
 8000cbe:	d0d9      	beq.n	8000c74 <__swbuf_r+0x2e>
 8000cc0:	e7d6      	b.n	8000c70 <__swbuf_r+0x2a>
	...

08000cc4 <__swsetup_r>:
 8000cc4:	b538      	push	{r3, r4, r5, lr}
 8000cc6:	4b29      	ldr	r3, [pc, #164]	@ (8000d6c <__swsetup_r+0xa8>)
 8000cc8:	4605      	mov	r5, r0
 8000cca:	6818      	ldr	r0, [r3, #0]
 8000ccc:	460c      	mov	r4, r1
 8000cce:	b118      	cbz	r0, 8000cd8 <__swsetup_r+0x14>
 8000cd0:	6a03      	ldr	r3, [r0, #32]
 8000cd2:	b90b      	cbnz	r3, 8000cd8 <__swsetup_r+0x14>
 8000cd4:	f7ff fee0 	bl	8000a98 <__sinit>
 8000cd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cdc:	0719      	lsls	r1, r3, #28
 8000cde:	d422      	bmi.n	8000d26 <__swsetup_r+0x62>
 8000ce0:	06da      	lsls	r2, r3, #27
 8000ce2:	d407      	bmi.n	8000cf4 <__swsetup_r+0x30>
 8000ce4:	2209      	movs	r2, #9
 8000ce6:	602a      	str	r2, [r5, #0]
 8000ce8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cec:	81a3      	strh	r3, [r4, #12]
 8000cee:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf2:	e033      	b.n	8000d5c <__swsetup_r+0x98>
 8000cf4:	0758      	lsls	r0, r3, #29
 8000cf6:	d512      	bpl.n	8000d1e <__swsetup_r+0x5a>
 8000cf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000cfa:	b141      	cbz	r1, 8000d0e <__swsetup_r+0x4a>
 8000cfc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d002      	beq.n	8000d0a <__swsetup_r+0x46>
 8000d04:	4628      	mov	r0, r5
 8000d06:	f000 f8af 	bl	8000e68 <_free_r>
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8000d0e:	89a3      	ldrh	r3, [r4, #12]
 8000d10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000d14:	81a3      	strh	r3, [r4, #12]
 8000d16:	2300      	movs	r3, #0
 8000d18:	6063      	str	r3, [r4, #4]
 8000d1a:	6923      	ldr	r3, [r4, #16]
 8000d1c:	6023      	str	r3, [r4, #0]
 8000d1e:	89a3      	ldrh	r3, [r4, #12]
 8000d20:	f043 0308 	orr.w	r3, r3, #8
 8000d24:	81a3      	strh	r3, [r4, #12]
 8000d26:	6923      	ldr	r3, [r4, #16]
 8000d28:	b94b      	cbnz	r3, 8000d3e <__swsetup_r+0x7a>
 8000d2a:	89a3      	ldrh	r3, [r4, #12]
 8000d2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000d30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d34:	d003      	beq.n	8000d3e <__swsetup_r+0x7a>
 8000d36:	4621      	mov	r1, r4
 8000d38:	4628      	mov	r0, r5
 8000d3a:	f000 fa5b 	bl	80011f4 <__smakebuf_r>
 8000d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d42:	f013 0201 	ands.w	r2, r3, #1
 8000d46:	d00a      	beq.n	8000d5e <__swsetup_r+0x9a>
 8000d48:	2200      	movs	r2, #0
 8000d4a:	60a2      	str	r2, [r4, #8]
 8000d4c:	6962      	ldr	r2, [r4, #20]
 8000d4e:	4252      	negs	r2, r2
 8000d50:	61a2      	str	r2, [r4, #24]
 8000d52:	6922      	ldr	r2, [r4, #16]
 8000d54:	b942      	cbnz	r2, 8000d68 <__swsetup_r+0xa4>
 8000d56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000d5a:	d1c5      	bne.n	8000ce8 <__swsetup_r+0x24>
 8000d5c:	bd38      	pop	{r3, r4, r5, pc}
 8000d5e:	0799      	lsls	r1, r3, #30
 8000d60:	bf58      	it	pl
 8000d62:	6962      	ldrpl	r2, [r4, #20]
 8000d64:	60a2      	str	r2, [r4, #8]
 8000d66:	e7f4      	b.n	8000d52 <__swsetup_r+0x8e>
 8000d68:	2000      	movs	r0, #0
 8000d6a:	e7f7      	b.n	8000d5c <__swsetup_r+0x98>
 8000d6c:	20000010 	.word	0x20000010

08000d70 <memset>:
 8000d70:	4402      	add	r2, r0
 8000d72:	4603      	mov	r3, r0
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d100      	bne.n	8000d7a <memset+0xa>
 8000d78:	4770      	bx	lr
 8000d7a:	f803 1b01 	strb.w	r1, [r3], #1
 8000d7e:	e7f9      	b.n	8000d74 <memset+0x4>

08000d80 <_close_r>:
 8000d80:	b538      	push	{r3, r4, r5, lr}
 8000d82:	4d06      	ldr	r5, [pc, #24]	@ (8000d9c <_close_r+0x1c>)
 8000d84:	2300      	movs	r3, #0
 8000d86:	4604      	mov	r4, r0
 8000d88:	4608      	mov	r0, r1
 8000d8a:	602b      	str	r3, [r5, #0]
 8000d8c:	f7ff fd67 	bl	800085e <_close>
 8000d90:	1c43      	adds	r3, r0, #1
 8000d92:	d102      	bne.n	8000d9a <_close_r+0x1a>
 8000d94:	682b      	ldr	r3, [r5, #0]
 8000d96:	b103      	cbz	r3, 8000d9a <_close_r+0x1a>
 8000d98:	6023      	str	r3, [r4, #0]
 8000d9a:	bd38      	pop	{r3, r4, r5, pc}
 8000d9c:	20000210 	.word	0x20000210

08000da0 <_lseek_r>:
 8000da0:	b538      	push	{r3, r4, r5, lr}
 8000da2:	4d07      	ldr	r5, [pc, #28]	@ (8000dc0 <_lseek_r+0x20>)
 8000da4:	4604      	mov	r4, r0
 8000da6:	4608      	mov	r0, r1
 8000da8:	4611      	mov	r1, r2
 8000daa:	2200      	movs	r2, #0
 8000dac:	602a      	str	r2, [r5, #0]
 8000dae:	461a      	mov	r2, r3
 8000db0:	f7ff fd79 	bl	80008a6 <_lseek>
 8000db4:	1c43      	adds	r3, r0, #1
 8000db6:	d102      	bne.n	8000dbe <_lseek_r+0x1e>
 8000db8:	682b      	ldr	r3, [r5, #0]
 8000dba:	b103      	cbz	r3, 8000dbe <_lseek_r+0x1e>
 8000dbc:	6023      	str	r3, [r4, #0]
 8000dbe:	bd38      	pop	{r3, r4, r5, pc}
 8000dc0:	20000210 	.word	0x20000210

08000dc4 <_read_r>:
 8000dc4:	b538      	push	{r3, r4, r5, lr}
 8000dc6:	4d07      	ldr	r5, [pc, #28]	@ (8000de4 <_read_r+0x20>)
 8000dc8:	4604      	mov	r4, r0
 8000dca:	4608      	mov	r0, r1
 8000dcc:	4611      	mov	r1, r2
 8000dce:	2200      	movs	r2, #0
 8000dd0:	602a      	str	r2, [r5, #0]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	f7ff fd0a 	bl	80007ec <_read>
 8000dd8:	1c43      	adds	r3, r0, #1
 8000dda:	d102      	bne.n	8000de2 <_read_r+0x1e>
 8000ddc:	682b      	ldr	r3, [r5, #0]
 8000dde:	b103      	cbz	r3, 8000de2 <_read_r+0x1e>
 8000de0:	6023      	str	r3, [r4, #0]
 8000de2:	bd38      	pop	{r3, r4, r5, pc}
 8000de4:	20000210 	.word	0x20000210

08000de8 <_write_r>:
 8000de8:	b538      	push	{r3, r4, r5, lr}
 8000dea:	4d07      	ldr	r5, [pc, #28]	@ (8000e08 <_write_r+0x20>)
 8000dec:	4604      	mov	r4, r0
 8000dee:	4608      	mov	r0, r1
 8000df0:	4611      	mov	r1, r2
 8000df2:	2200      	movs	r2, #0
 8000df4:	602a      	str	r2, [r5, #0]
 8000df6:	461a      	mov	r2, r3
 8000df8:	f7ff fd15 	bl	8000826 <_write>
 8000dfc:	1c43      	adds	r3, r0, #1
 8000dfe:	d102      	bne.n	8000e06 <_write_r+0x1e>
 8000e00:	682b      	ldr	r3, [r5, #0]
 8000e02:	b103      	cbz	r3, 8000e06 <_write_r+0x1e>
 8000e04:	6023      	str	r3, [r4, #0]
 8000e06:	bd38      	pop	{r3, r4, r5, pc}
 8000e08:	20000210 	.word	0x20000210

08000e0c <__errno>:
 8000e0c:	4b01      	ldr	r3, [pc, #4]	@ (8000e14 <__errno+0x8>)
 8000e0e:	6818      	ldr	r0, [r3, #0]
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000010 	.word	0x20000010

08000e18 <__libc_init_array>:
 8000e18:	b570      	push	{r4, r5, r6, lr}
 8000e1a:	4d0d      	ldr	r5, [pc, #52]	@ (8000e50 <__libc_init_array+0x38>)
 8000e1c:	4c0d      	ldr	r4, [pc, #52]	@ (8000e54 <__libc_init_array+0x3c>)
 8000e1e:	1b64      	subs	r4, r4, r5
 8000e20:	10a4      	asrs	r4, r4, #2
 8000e22:	2600      	movs	r6, #0
 8000e24:	42a6      	cmp	r6, r4
 8000e26:	d109      	bne.n	8000e3c <__libc_init_array+0x24>
 8000e28:	4d0b      	ldr	r5, [pc, #44]	@ (8000e58 <__libc_init_array+0x40>)
 8000e2a:	4c0c      	ldr	r4, [pc, #48]	@ (8000e5c <__libc_init_array+0x44>)
 8000e2c:	f000 fa50 	bl	80012d0 <_init>
 8000e30:	1b64      	subs	r4, r4, r5
 8000e32:	10a4      	asrs	r4, r4, #2
 8000e34:	2600      	movs	r6, #0
 8000e36:	42a6      	cmp	r6, r4
 8000e38:	d105      	bne.n	8000e46 <__libc_init_array+0x2e>
 8000e3a:	bd70      	pop	{r4, r5, r6, pc}
 8000e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e40:	4798      	blx	r3
 8000e42:	3601      	adds	r6, #1
 8000e44:	e7ee      	b.n	8000e24 <__libc_init_array+0xc>
 8000e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e4a:	4798      	blx	r3
 8000e4c:	3601      	adds	r6, #1
 8000e4e:	e7f2      	b.n	8000e36 <__libc_init_array+0x1e>
 8000e50:	08001310 	.word	0x08001310
 8000e54:	08001310 	.word	0x08001310
 8000e58:	08001310 	.word	0x08001310
 8000e5c:	08001314 	.word	0x08001314

08000e60 <__retarget_lock_init_recursive>:
 8000e60:	4770      	bx	lr

08000e62 <__retarget_lock_acquire_recursive>:
 8000e62:	4770      	bx	lr

08000e64 <__retarget_lock_release_recursive>:
 8000e64:	4770      	bx	lr
	...

08000e68 <_free_r>:
 8000e68:	b538      	push	{r3, r4, r5, lr}
 8000e6a:	4605      	mov	r5, r0
 8000e6c:	2900      	cmp	r1, #0
 8000e6e:	d041      	beq.n	8000ef4 <_free_r+0x8c>
 8000e70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e74:	1f0c      	subs	r4, r1, #4
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	bfb8      	it	lt
 8000e7a:	18e4      	addlt	r4, r4, r3
 8000e7c:	f000 f8e0 	bl	8001040 <__malloc_lock>
 8000e80:	4a1d      	ldr	r2, [pc, #116]	@ (8000ef8 <_free_r+0x90>)
 8000e82:	6813      	ldr	r3, [r2, #0]
 8000e84:	b933      	cbnz	r3, 8000e94 <_free_r+0x2c>
 8000e86:	6063      	str	r3, [r4, #4]
 8000e88:	6014      	str	r4, [r2, #0]
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e90:	f000 b8dc 	b.w	800104c <__malloc_unlock>
 8000e94:	42a3      	cmp	r3, r4
 8000e96:	d908      	bls.n	8000eaa <_free_r+0x42>
 8000e98:	6820      	ldr	r0, [r4, #0]
 8000e9a:	1821      	adds	r1, r4, r0
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	bf01      	itttt	eq
 8000ea0:	6819      	ldreq	r1, [r3, #0]
 8000ea2:	685b      	ldreq	r3, [r3, #4]
 8000ea4:	1809      	addeq	r1, r1, r0
 8000ea6:	6021      	streq	r1, [r4, #0]
 8000ea8:	e7ed      	b.n	8000e86 <_free_r+0x1e>
 8000eaa:	461a      	mov	r2, r3
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	b10b      	cbz	r3, 8000eb4 <_free_r+0x4c>
 8000eb0:	42a3      	cmp	r3, r4
 8000eb2:	d9fa      	bls.n	8000eaa <_free_r+0x42>
 8000eb4:	6811      	ldr	r1, [r2, #0]
 8000eb6:	1850      	adds	r0, r2, r1
 8000eb8:	42a0      	cmp	r0, r4
 8000eba:	d10b      	bne.n	8000ed4 <_free_r+0x6c>
 8000ebc:	6820      	ldr	r0, [r4, #0]
 8000ebe:	4401      	add	r1, r0
 8000ec0:	1850      	adds	r0, r2, r1
 8000ec2:	4283      	cmp	r3, r0
 8000ec4:	6011      	str	r1, [r2, #0]
 8000ec6:	d1e0      	bne.n	8000e8a <_free_r+0x22>
 8000ec8:	6818      	ldr	r0, [r3, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	6053      	str	r3, [r2, #4]
 8000ece:	4408      	add	r0, r1
 8000ed0:	6010      	str	r0, [r2, #0]
 8000ed2:	e7da      	b.n	8000e8a <_free_r+0x22>
 8000ed4:	d902      	bls.n	8000edc <_free_r+0x74>
 8000ed6:	230c      	movs	r3, #12
 8000ed8:	602b      	str	r3, [r5, #0]
 8000eda:	e7d6      	b.n	8000e8a <_free_r+0x22>
 8000edc:	6820      	ldr	r0, [r4, #0]
 8000ede:	1821      	adds	r1, r4, r0
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	bf04      	itt	eq
 8000ee4:	6819      	ldreq	r1, [r3, #0]
 8000ee6:	685b      	ldreq	r3, [r3, #4]
 8000ee8:	6063      	str	r3, [r4, #4]
 8000eea:	bf04      	itt	eq
 8000eec:	1809      	addeq	r1, r1, r0
 8000eee:	6021      	streq	r1, [r4, #0]
 8000ef0:	6054      	str	r4, [r2, #4]
 8000ef2:	e7ca      	b.n	8000e8a <_free_r+0x22>
 8000ef4:	bd38      	pop	{r3, r4, r5, pc}
 8000ef6:	bf00      	nop
 8000ef8:	2000021c 	.word	0x2000021c

08000efc <sbrk_aligned>:
 8000efc:	b570      	push	{r4, r5, r6, lr}
 8000efe:	4e0f      	ldr	r6, [pc, #60]	@ (8000f3c <sbrk_aligned+0x40>)
 8000f00:	460c      	mov	r4, r1
 8000f02:	6831      	ldr	r1, [r6, #0]
 8000f04:	4605      	mov	r5, r0
 8000f06:	b911      	cbnz	r1, 8000f0e <sbrk_aligned+0x12>
 8000f08:	f000 f9d2 	bl	80012b0 <_sbrk_r>
 8000f0c:	6030      	str	r0, [r6, #0]
 8000f0e:	4621      	mov	r1, r4
 8000f10:	4628      	mov	r0, r5
 8000f12:	f000 f9cd 	bl	80012b0 <_sbrk_r>
 8000f16:	1c43      	adds	r3, r0, #1
 8000f18:	d103      	bne.n	8000f22 <sbrk_aligned+0x26>
 8000f1a:	f04f 34ff 	mov.w	r4, #4294967295
 8000f1e:	4620      	mov	r0, r4
 8000f20:	bd70      	pop	{r4, r5, r6, pc}
 8000f22:	1cc4      	adds	r4, r0, #3
 8000f24:	f024 0403 	bic.w	r4, r4, #3
 8000f28:	42a0      	cmp	r0, r4
 8000f2a:	d0f8      	beq.n	8000f1e <sbrk_aligned+0x22>
 8000f2c:	1a21      	subs	r1, r4, r0
 8000f2e:	4628      	mov	r0, r5
 8000f30:	f000 f9be 	bl	80012b0 <_sbrk_r>
 8000f34:	3001      	adds	r0, #1
 8000f36:	d1f2      	bne.n	8000f1e <sbrk_aligned+0x22>
 8000f38:	e7ef      	b.n	8000f1a <sbrk_aligned+0x1e>
 8000f3a:	bf00      	nop
 8000f3c:	20000218 	.word	0x20000218

08000f40 <_malloc_r>:
 8000f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f44:	1ccd      	adds	r5, r1, #3
 8000f46:	f025 0503 	bic.w	r5, r5, #3
 8000f4a:	3508      	adds	r5, #8
 8000f4c:	2d0c      	cmp	r5, #12
 8000f4e:	bf38      	it	cc
 8000f50:	250c      	movcc	r5, #12
 8000f52:	2d00      	cmp	r5, #0
 8000f54:	4606      	mov	r6, r0
 8000f56:	db01      	blt.n	8000f5c <_malloc_r+0x1c>
 8000f58:	42a9      	cmp	r1, r5
 8000f5a:	d904      	bls.n	8000f66 <_malloc_r+0x26>
 8000f5c:	230c      	movs	r3, #12
 8000f5e:	6033      	str	r3, [r6, #0]
 8000f60:	2000      	movs	r0, #0
 8000f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800103c <_malloc_r+0xfc>
 8000f6a:	f000 f869 	bl	8001040 <__malloc_lock>
 8000f6e:	f8d8 3000 	ldr.w	r3, [r8]
 8000f72:	461c      	mov	r4, r3
 8000f74:	bb44      	cbnz	r4, 8000fc8 <_malloc_r+0x88>
 8000f76:	4629      	mov	r1, r5
 8000f78:	4630      	mov	r0, r6
 8000f7a:	f7ff ffbf 	bl	8000efc <sbrk_aligned>
 8000f7e:	1c43      	adds	r3, r0, #1
 8000f80:	4604      	mov	r4, r0
 8000f82:	d158      	bne.n	8001036 <_malloc_r+0xf6>
 8000f84:	f8d8 4000 	ldr.w	r4, [r8]
 8000f88:	4627      	mov	r7, r4
 8000f8a:	2f00      	cmp	r7, #0
 8000f8c:	d143      	bne.n	8001016 <_malloc_r+0xd6>
 8000f8e:	2c00      	cmp	r4, #0
 8000f90:	d04b      	beq.n	800102a <_malloc_r+0xea>
 8000f92:	6823      	ldr	r3, [r4, #0]
 8000f94:	4639      	mov	r1, r7
 8000f96:	4630      	mov	r0, r6
 8000f98:	eb04 0903 	add.w	r9, r4, r3
 8000f9c:	f000 f988 	bl	80012b0 <_sbrk_r>
 8000fa0:	4581      	cmp	r9, r0
 8000fa2:	d142      	bne.n	800102a <_malloc_r+0xea>
 8000fa4:	6821      	ldr	r1, [r4, #0]
 8000fa6:	1a6d      	subs	r5, r5, r1
 8000fa8:	4629      	mov	r1, r5
 8000faa:	4630      	mov	r0, r6
 8000fac:	f7ff ffa6 	bl	8000efc <sbrk_aligned>
 8000fb0:	3001      	adds	r0, #1
 8000fb2:	d03a      	beq.n	800102a <_malloc_r+0xea>
 8000fb4:	6823      	ldr	r3, [r4, #0]
 8000fb6:	442b      	add	r3, r5
 8000fb8:	6023      	str	r3, [r4, #0]
 8000fba:	f8d8 3000 	ldr.w	r3, [r8]
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	bb62      	cbnz	r2, 800101c <_malloc_r+0xdc>
 8000fc2:	f8c8 7000 	str.w	r7, [r8]
 8000fc6:	e00f      	b.n	8000fe8 <_malloc_r+0xa8>
 8000fc8:	6822      	ldr	r2, [r4, #0]
 8000fca:	1b52      	subs	r2, r2, r5
 8000fcc:	d420      	bmi.n	8001010 <_malloc_r+0xd0>
 8000fce:	2a0b      	cmp	r2, #11
 8000fd0:	d917      	bls.n	8001002 <_malloc_r+0xc2>
 8000fd2:	1961      	adds	r1, r4, r5
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	6025      	str	r5, [r4, #0]
 8000fd8:	bf18      	it	ne
 8000fda:	6059      	strne	r1, [r3, #4]
 8000fdc:	6863      	ldr	r3, [r4, #4]
 8000fde:	bf08      	it	eq
 8000fe0:	f8c8 1000 	streq.w	r1, [r8]
 8000fe4:	5162      	str	r2, [r4, r5]
 8000fe6:	604b      	str	r3, [r1, #4]
 8000fe8:	4630      	mov	r0, r6
 8000fea:	f000 f82f 	bl	800104c <__malloc_unlock>
 8000fee:	f104 000b 	add.w	r0, r4, #11
 8000ff2:	1d23      	adds	r3, r4, #4
 8000ff4:	f020 0007 	bic.w	r0, r0, #7
 8000ff8:	1ac2      	subs	r2, r0, r3
 8000ffa:	bf1c      	itt	ne
 8000ffc:	1a1b      	subne	r3, r3, r0
 8000ffe:	50a3      	strne	r3, [r4, r2]
 8001000:	e7af      	b.n	8000f62 <_malloc_r+0x22>
 8001002:	6862      	ldr	r2, [r4, #4]
 8001004:	42a3      	cmp	r3, r4
 8001006:	bf0c      	ite	eq
 8001008:	f8c8 2000 	streq.w	r2, [r8]
 800100c:	605a      	strne	r2, [r3, #4]
 800100e:	e7eb      	b.n	8000fe8 <_malloc_r+0xa8>
 8001010:	4623      	mov	r3, r4
 8001012:	6864      	ldr	r4, [r4, #4]
 8001014:	e7ae      	b.n	8000f74 <_malloc_r+0x34>
 8001016:	463c      	mov	r4, r7
 8001018:	687f      	ldr	r7, [r7, #4]
 800101a:	e7b6      	b.n	8000f8a <_malloc_r+0x4a>
 800101c:	461a      	mov	r2, r3
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	42a3      	cmp	r3, r4
 8001022:	d1fb      	bne.n	800101c <_malloc_r+0xdc>
 8001024:	2300      	movs	r3, #0
 8001026:	6053      	str	r3, [r2, #4]
 8001028:	e7de      	b.n	8000fe8 <_malloc_r+0xa8>
 800102a:	230c      	movs	r3, #12
 800102c:	6033      	str	r3, [r6, #0]
 800102e:	4630      	mov	r0, r6
 8001030:	f000 f80c 	bl	800104c <__malloc_unlock>
 8001034:	e794      	b.n	8000f60 <_malloc_r+0x20>
 8001036:	6005      	str	r5, [r0, #0]
 8001038:	e7d6      	b.n	8000fe8 <_malloc_r+0xa8>
 800103a:	bf00      	nop
 800103c:	2000021c 	.word	0x2000021c

08001040 <__malloc_lock>:
 8001040:	4801      	ldr	r0, [pc, #4]	@ (8001048 <__malloc_lock+0x8>)
 8001042:	f7ff bf0e 	b.w	8000e62 <__retarget_lock_acquire_recursive>
 8001046:	bf00      	nop
 8001048:	20000214 	.word	0x20000214

0800104c <__malloc_unlock>:
 800104c:	4801      	ldr	r0, [pc, #4]	@ (8001054 <__malloc_unlock+0x8>)
 800104e:	f7ff bf09 	b.w	8000e64 <__retarget_lock_release_recursive>
 8001052:	bf00      	nop
 8001054:	20000214 	.word	0x20000214

08001058 <__sflush_r>:
 8001058:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800105c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800105e:	0716      	lsls	r6, r2, #28
 8001060:	4605      	mov	r5, r0
 8001062:	460c      	mov	r4, r1
 8001064:	d454      	bmi.n	8001110 <__sflush_r+0xb8>
 8001066:	684b      	ldr	r3, [r1, #4]
 8001068:	2b00      	cmp	r3, #0
 800106a:	dc02      	bgt.n	8001072 <__sflush_r+0x1a>
 800106c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800106e:	2b00      	cmp	r3, #0
 8001070:	dd48      	ble.n	8001104 <__sflush_r+0xac>
 8001072:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001074:	2e00      	cmp	r6, #0
 8001076:	d045      	beq.n	8001104 <__sflush_r+0xac>
 8001078:	2300      	movs	r3, #0
 800107a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800107e:	682f      	ldr	r7, [r5, #0]
 8001080:	6a21      	ldr	r1, [r4, #32]
 8001082:	602b      	str	r3, [r5, #0]
 8001084:	d030      	beq.n	80010e8 <__sflush_r+0x90>
 8001086:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001088:	89a3      	ldrh	r3, [r4, #12]
 800108a:	0759      	lsls	r1, r3, #29
 800108c:	d505      	bpl.n	800109a <__sflush_r+0x42>
 800108e:	6863      	ldr	r3, [r4, #4]
 8001090:	1ad2      	subs	r2, r2, r3
 8001092:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001094:	b10b      	cbz	r3, 800109a <__sflush_r+0x42>
 8001096:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001098:	1ad2      	subs	r2, r2, r3
 800109a:	2300      	movs	r3, #0
 800109c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800109e:	6a21      	ldr	r1, [r4, #32]
 80010a0:	4628      	mov	r0, r5
 80010a2:	47b0      	blx	r6
 80010a4:	1c43      	adds	r3, r0, #1
 80010a6:	89a3      	ldrh	r3, [r4, #12]
 80010a8:	d106      	bne.n	80010b8 <__sflush_r+0x60>
 80010aa:	6829      	ldr	r1, [r5, #0]
 80010ac:	291d      	cmp	r1, #29
 80010ae:	d82b      	bhi.n	8001108 <__sflush_r+0xb0>
 80010b0:	4a28      	ldr	r2, [pc, #160]	@ (8001154 <__sflush_r+0xfc>)
 80010b2:	410a      	asrs	r2, r1
 80010b4:	07d6      	lsls	r6, r2, #31
 80010b6:	d427      	bmi.n	8001108 <__sflush_r+0xb0>
 80010b8:	2200      	movs	r2, #0
 80010ba:	6062      	str	r2, [r4, #4]
 80010bc:	04d9      	lsls	r1, r3, #19
 80010be:	6922      	ldr	r2, [r4, #16]
 80010c0:	6022      	str	r2, [r4, #0]
 80010c2:	d504      	bpl.n	80010ce <__sflush_r+0x76>
 80010c4:	1c42      	adds	r2, r0, #1
 80010c6:	d101      	bne.n	80010cc <__sflush_r+0x74>
 80010c8:	682b      	ldr	r3, [r5, #0]
 80010ca:	b903      	cbnz	r3, 80010ce <__sflush_r+0x76>
 80010cc:	6560      	str	r0, [r4, #84]	@ 0x54
 80010ce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80010d0:	602f      	str	r7, [r5, #0]
 80010d2:	b1b9      	cbz	r1, 8001104 <__sflush_r+0xac>
 80010d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80010d8:	4299      	cmp	r1, r3
 80010da:	d002      	beq.n	80010e2 <__sflush_r+0x8a>
 80010dc:	4628      	mov	r0, r5
 80010de:	f7ff fec3 	bl	8000e68 <_free_r>
 80010e2:	2300      	movs	r3, #0
 80010e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80010e6:	e00d      	b.n	8001104 <__sflush_r+0xac>
 80010e8:	2301      	movs	r3, #1
 80010ea:	4628      	mov	r0, r5
 80010ec:	47b0      	blx	r6
 80010ee:	4602      	mov	r2, r0
 80010f0:	1c50      	adds	r0, r2, #1
 80010f2:	d1c9      	bne.n	8001088 <__sflush_r+0x30>
 80010f4:	682b      	ldr	r3, [r5, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d0c6      	beq.n	8001088 <__sflush_r+0x30>
 80010fa:	2b1d      	cmp	r3, #29
 80010fc:	d001      	beq.n	8001102 <__sflush_r+0xaa>
 80010fe:	2b16      	cmp	r3, #22
 8001100:	d11d      	bne.n	800113e <__sflush_r+0xe6>
 8001102:	602f      	str	r7, [r5, #0]
 8001104:	2000      	movs	r0, #0
 8001106:	e021      	b.n	800114c <__sflush_r+0xf4>
 8001108:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800110c:	b21b      	sxth	r3, r3
 800110e:	e01a      	b.n	8001146 <__sflush_r+0xee>
 8001110:	690f      	ldr	r7, [r1, #16]
 8001112:	2f00      	cmp	r7, #0
 8001114:	d0f6      	beq.n	8001104 <__sflush_r+0xac>
 8001116:	0793      	lsls	r3, r2, #30
 8001118:	680e      	ldr	r6, [r1, #0]
 800111a:	bf08      	it	eq
 800111c:	694b      	ldreq	r3, [r1, #20]
 800111e:	600f      	str	r7, [r1, #0]
 8001120:	bf18      	it	ne
 8001122:	2300      	movne	r3, #0
 8001124:	1bf6      	subs	r6, r6, r7
 8001126:	608b      	str	r3, [r1, #8]
 8001128:	2e00      	cmp	r6, #0
 800112a:	ddeb      	ble.n	8001104 <__sflush_r+0xac>
 800112c:	6a21      	ldr	r1, [r4, #32]
 800112e:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001132:	4633      	mov	r3, r6
 8001134:	463a      	mov	r2, r7
 8001136:	4628      	mov	r0, r5
 8001138:	47e0      	blx	ip
 800113a:	2800      	cmp	r0, #0
 800113c:	dc07      	bgt.n	800114e <__sflush_r+0xf6>
 800113e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001146:	81a3      	strh	r3, [r4, #12]
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800114e:	4407      	add	r7, r0
 8001150:	1a36      	subs	r6, r6, r0
 8001152:	e7e9      	b.n	8001128 <__sflush_r+0xd0>
 8001154:	dfbffffe 	.word	0xdfbffffe

08001158 <_fflush_r>:
 8001158:	b538      	push	{r3, r4, r5, lr}
 800115a:	690b      	ldr	r3, [r1, #16]
 800115c:	4605      	mov	r5, r0
 800115e:	460c      	mov	r4, r1
 8001160:	b913      	cbnz	r3, 8001168 <_fflush_r+0x10>
 8001162:	2500      	movs	r5, #0
 8001164:	4628      	mov	r0, r5
 8001166:	bd38      	pop	{r3, r4, r5, pc}
 8001168:	b118      	cbz	r0, 8001172 <_fflush_r+0x1a>
 800116a:	6a03      	ldr	r3, [r0, #32]
 800116c:	b90b      	cbnz	r3, 8001172 <_fflush_r+0x1a>
 800116e:	f7ff fc93 	bl	8000a98 <__sinit>
 8001172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0f3      	beq.n	8001162 <_fflush_r+0xa>
 800117a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800117c:	07d0      	lsls	r0, r2, #31
 800117e:	d404      	bmi.n	800118a <_fflush_r+0x32>
 8001180:	0599      	lsls	r1, r3, #22
 8001182:	d402      	bmi.n	800118a <_fflush_r+0x32>
 8001184:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001186:	f7ff fe6c 	bl	8000e62 <__retarget_lock_acquire_recursive>
 800118a:	4628      	mov	r0, r5
 800118c:	4621      	mov	r1, r4
 800118e:	f7ff ff63 	bl	8001058 <__sflush_r>
 8001192:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001194:	07da      	lsls	r2, r3, #31
 8001196:	4605      	mov	r5, r0
 8001198:	d4e4      	bmi.n	8001164 <_fflush_r+0xc>
 800119a:	89a3      	ldrh	r3, [r4, #12]
 800119c:	059b      	lsls	r3, r3, #22
 800119e:	d4e1      	bmi.n	8001164 <_fflush_r+0xc>
 80011a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80011a2:	f7ff fe5f 	bl	8000e64 <__retarget_lock_release_recursive>
 80011a6:	e7dd      	b.n	8001164 <_fflush_r+0xc>

080011a8 <__swhatbuf_r>:
 80011a8:	b570      	push	{r4, r5, r6, lr}
 80011aa:	460c      	mov	r4, r1
 80011ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011b0:	2900      	cmp	r1, #0
 80011b2:	b096      	sub	sp, #88	@ 0x58
 80011b4:	4615      	mov	r5, r2
 80011b6:	461e      	mov	r6, r3
 80011b8:	da0d      	bge.n	80011d6 <__swhatbuf_r+0x2e>
 80011ba:	89a3      	ldrh	r3, [r4, #12]
 80011bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80011c0:	f04f 0100 	mov.w	r1, #0
 80011c4:	bf14      	ite	ne
 80011c6:	2340      	movne	r3, #64	@ 0x40
 80011c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80011cc:	2000      	movs	r0, #0
 80011ce:	6031      	str	r1, [r6, #0]
 80011d0:	602b      	str	r3, [r5, #0]
 80011d2:	b016      	add	sp, #88	@ 0x58
 80011d4:	bd70      	pop	{r4, r5, r6, pc}
 80011d6:	466a      	mov	r2, sp
 80011d8:	f000 f848 	bl	800126c <_fstat_r>
 80011dc:	2800      	cmp	r0, #0
 80011de:	dbec      	blt.n	80011ba <__swhatbuf_r+0x12>
 80011e0:	9901      	ldr	r1, [sp, #4]
 80011e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80011e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80011ea:	4259      	negs	r1, r3
 80011ec:	4159      	adcs	r1, r3
 80011ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011f2:	e7eb      	b.n	80011cc <__swhatbuf_r+0x24>

080011f4 <__smakebuf_r>:
 80011f4:	898b      	ldrh	r3, [r1, #12]
 80011f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80011f8:	079d      	lsls	r5, r3, #30
 80011fa:	4606      	mov	r6, r0
 80011fc:	460c      	mov	r4, r1
 80011fe:	d507      	bpl.n	8001210 <__smakebuf_r+0x1c>
 8001200:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001204:	6023      	str	r3, [r4, #0]
 8001206:	6123      	str	r3, [r4, #16]
 8001208:	2301      	movs	r3, #1
 800120a:	6163      	str	r3, [r4, #20]
 800120c:	b003      	add	sp, #12
 800120e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001210:	ab01      	add	r3, sp, #4
 8001212:	466a      	mov	r2, sp
 8001214:	f7ff ffc8 	bl	80011a8 <__swhatbuf_r>
 8001218:	9f00      	ldr	r7, [sp, #0]
 800121a:	4605      	mov	r5, r0
 800121c:	4639      	mov	r1, r7
 800121e:	4630      	mov	r0, r6
 8001220:	f7ff fe8e 	bl	8000f40 <_malloc_r>
 8001224:	b948      	cbnz	r0, 800123a <__smakebuf_r+0x46>
 8001226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800122a:	059a      	lsls	r2, r3, #22
 800122c:	d4ee      	bmi.n	800120c <__smakebuf_r+0x18>
 800122e:	f023 0303 	bic.w	r3, r3, #3
 8001232:	f043 0302 	orr.w	r3, r3, #2
 8001236:	81a3      	strh	r3, [r4, #12]
 8001238:	e7e2      	b.n	8001200 <__smakebuf_r+0xc>
 800123a:	89a3      	ldrh	r3, [r4, #12]
 800123c:	6020      	str	r0, [r4, #0]
 800123e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001242:	81a3      	strh	r3, [r4, #12]
 8001244:	9b01      	ldr	r3, [sp, #4]
 8001246:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800124a:	b15b      	cbz	r3, 8001264 <__smakebuf_r+0x70>
 800124c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001250:	4630      	mov	r0, r6
 8001252:	f000 f81d 	bl	8001290 <_isatty_r>
 8001256:	b128      	cbz	r0, 8001264 <__smakebuf_r+0x70>
 8001258:	89a3      	ldrh	r3, [r4, #12]
 800125a:	f023 0303 	bic.w	r3, r3, #3
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	81a3      	strh	r3, [r4, #12]
 8001264:	89a3      	ldrh	r3, [r4, #12]
 8001266:	431d      	orrs	r5, r3
 8001268:	81a5      	strh	r5, [r4, #12]
 800126a:	e7cf      	b.n	800120c <__smakebuf_r+0x18>

0800126c <_fstat_r>:
 800126c:	b538      	push	{r3, r4, r5, lr}
 800126e:	4d07      	ldr	r5, [pc, #28]	@ (800128c <_fstat_r+0x20>)
 8001270:	2300      	movs	r3, #0
 8001272:	4604      	mov	r4, r0
 8001274:	4608      	mov	r0, r1
 8001276:	4611      	mov	r1, r2
 8001278:	602b      	str	r3, [r5, #0]
 800127a:	f7ff fafb 	bl	8000874 <_fstat>
 800127e:	1c43      	adds	r3, r0, #1
 8001280:	d102      	bne.n	8001288 <_fstat_r+0x1c>
 8001282:	682b      	ldr	r3, [r5, #0]
 8001284:	b103      	cbz	r3, 8001288 <_fstat_r+0x1c>
 8001286:	6023      	str	r3, [r4, #0]
 8001288:	bd38      	pop	{r3, r4, r5, pc}
 800128a:	bf00      	nop
 800128c:	20000210 	.word	0x20000210

08001290 <_isatty_r>:
 8001290:	b538      	push	{r3, r4, r5, lr}
 8001292:	4d06      	ldr	r5, [pc, #24]	@ (80012ac <_isatty_r+0x1c>)
 8001294:	2300      	movs	r3, #0
 8001296:	4604      	mov	r4, r0
 8001298:	4608      	mov	r0, r1
 800129a:	602b      	str	r3, [r5, #0]
 800129c:	f7ff faf9 	bl	8000892 <_isatty>
 80012a0:	1c43      	adds	r3, r0, #1
 80012a2:	d102      	bne.n	80012aa <_isatty_r+0x1a>
 80012a4:	682b      	ldr	r3, [r5, #0]
 80012a6:	b103      	cbz	r3, 80012aa <_isatty_r+0x1a>
 80012a8:	6023      	str	r3, [r4, #0]
 80012aa:	bd38      	pop	{r3, r4, r5, pc}
 80012ac:	20000210 	.word	0x20000210

080012b0 <_sbrk_r>:
 80012b0:	b538      	push	{r3, r4, r5, lr}
 80012b2:	4d06      	ldr	r5, [pc, #24]	@ (80012cc <_sbrk_r+0x1c>)
 80012b4:	2300      	movs	r3, #0
 80012b6:	4604      	mov	r4, r0
 80012b8:	4608      	mov	r0, r1
 80012ba:	602b      	str	r3, [r5, #0]
 80012bc:	f7ff fb00 	bl	80008c0 <_sbrk>
 80012c0:	1c43      	adds	r3, r0, #1
 80012c2:	d102      	bne.n	80012ca <_sbrk_r+0x1a>
 80012c4:	682b      	ldr	r3, [r5, #0]
 80012c6:	b103      	cbz	r3, 80012ca <_sbrk_r+0x1a>
 80012c8:	6023      	str	r3, [r4, #0]
 80012ca:	bd38      	pop	{r3, r4, r5, pc}
 80012cc:	20000210 	.word	0x20000210

080012d0 <_init>:
 80012d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012d2:	bf00      	nop
 80012d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012d6:	bc08      	pop	{r3}
 80012d8:	469e      	mov	lr, r3
 80012da:	4770      	bx	lr

080012dc <_fini>:
 80012dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012de:	bf00      	nop
 80012e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012e2:	bc08      	pop	{r3}
 80012e4:	469e      	mov	lr, r3
 80012e6:	4770      	bx	lr
