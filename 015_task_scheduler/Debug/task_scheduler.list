
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000110c  080001a8  080001a8  000011a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080012b4  080012b4  000022b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080012fc  080012fc  00003060  2**0
                  CONTENTS
  4 .ARM          00000000  080012fc  080012fc  00003060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080012fc  080012fc  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012fc  080012fc  000022fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001300  08001300  00002300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08001304  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000060  08001364  00003060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08001364  00003220  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000e2d  00000000  00000000  0000308a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000590  00000000  00000000  00003eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000200  00000000  00000000  00004448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000169  00000000  00000000  00004648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002dfe  00000000  00000000  000047b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001cd9  00000000  00000000  000075af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009e1a  00000000  00000000  00009288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000130a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d28  00000000  00000000  000130e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009e  00000000  00000000  00013e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	@ (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	@ (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000060 	.word	0x20000060
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800129c 	.word	0x0800129c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	@ (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	@ (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	@ (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000064 	.word	0x20000064
 80001e4:	0800129c 	.word	0x0800129c

080001e8 <delay>:
#include "led.h"



void delay(uint32_t count)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
  for(uint32_t i = 0 ; i < count ; i++);
 80001f0:	2300      	movs	r3, #0
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	e002      	b.n	80001fc <delay+0x14>
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	3301      	adds	r3, #1
 80001fa:	60fb      	str	r3, [r7, #12]
 80001fc:	68fa      	ldr	r2, [r7, #12]
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	429a      	cmp	r2, r3
 8000202:	d3f8      	bcc.n	80001f6 <delay+0xe>
}
 8000204:	bf00      	nop
 8000206:	bf00      	nop
 8000208:	3714      	adds	r7, #20
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr

08000210 <led_init_all>:

void led_init_all(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 8000216:	4b19      	ldr	r3, [pc, #100]	@ (800027c <led_init_all+0x6c>)
 8000218:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020C00;
 800021a:	4b19      	ldr	r3, [pc, #100]	@ (8000280 <led_init_all+0x70>)
 800021c:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= ( 1 << 3);
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f043 0208 	orr.w	r2, r3, #8
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE));
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_GREEN);
 800025a:	200c      	movs	r0, #12
 800025c:	f000 f82a 	bl	80002b4 <led_off>
    led_off(LED_ORANGE);
 8000260:	200d      	movs	r0, #13
 8000262:	f000 f827 	bl	80002b4 <led_off>
    led_off(LED_RED);
 8000266:	200e      	movs	r0, #14
 8000268:	f000 f824 	bl	80002b4 <led_off>
    led_off(LED_BLUE);
 800026c:	200f      	movs	r0, #15
 800026e:	f000 f821 	bl	80002b4 <led_off>



}
 8000272:	bf00      	nop
 8000274:	3708      	adds	r7, #8
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	40023830 	.word	0x40023830
 8000280:	40020c00 	.word	0x40020c00

08000284 <led_on>:

void led_on(uint8_t led_no)
{
 8000284:	b480      	push	{r7}
 8000286:	b085      	sub	sp, #20
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 800028e:	4b08      	ldr	r3, [pc, #32]	@ (80002b0 <led_on+0x2c>)
 8000290:	60fb      	str	r3, [r7, #12]
  *pGpiodDataReg |= ( 1 << led_no);
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	79fa      	ldrb	r2, [r7, #7]
 8000298:	2101      	movs	r1, #1
 800029a:	fa01 f202 	lsl.w	r2, r1, r2
 800029e:	431a      	orrs	r2, r3
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	601a      	str	r2, [r3, #0]

}
 80002a4:	bf00      	nop
 80002a6:	3714      	adds	r7, #20
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bc80      	pop	{r7}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	40020c14 	.word	0x40020c14

080002b4 <led_off>:

void led_off(uint8_t led_no)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 80002be:	4b08      	ldr	r3, [pc, #32]	@ (80002e0 <led_off+0x2c>)
 80002c0:	60fb      	str	r3, [r7, #12]
	  *pGpiodDataReg &= ~( 1 << led_no);
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	79fa      	ldrb	r2, [r7, #7]
 80002c8:	2101      	movs	r1, #1
 80002ca:	fa01 f202 	lsl.w	r2, r1, r2
 80002ce:	43d2      	mvns	r2, r2
 80002d0:	401a      	ands	r2, r3
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	601a      	str	r2, [r3, #0]

}
 80002d6:	bf00      	nop
 80002d8:	3714      	adds	r7, #20
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr
 80002e0:	40020c14 	.word	0x40020c14

080002e4 <main>:

/* Each task has its own TCB */
TCB_t user_tasks[MAX_TASKS];

int main(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0

	enable_processor_faults();
 80002e8:	f000 f928 	bl	800053c <enable_processor_faults>

	init_scheduler_stack(SCHED_STACK_START);
 80002ec:	4808      	ldr	r0, [pc, #32]	@ (8000310 <main+0x2c>)
 80002ee:	f000 f891 	bl	8000414 <init_scheduler_stack>

	init_tasks_stack();
 80002f2:	f000 f895 	bl	8000420 <init_tasks_stack>

	led_init_all();
 80002f6:	f7ff ff8b 	bl	8000210 <led_init_all>

	init_systick_timer(TICK_HZ);
 80002fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002fe:	f000 f855 	bl	80003ac <init_systick_timer>

	switch_sp_to_psp();
 8000302:	f000 f9a1 	bl	8000648 <switch_sp_to_psp>

	task1_handler();
 8000306:	f000 f809 	bl	800031c <task1_handler>

	for(;;);
 800030a:	bf00      	nop
 800030c:	e7fd      	b.n	800030a <main+0x26>
 800030e:	bf00      	nop
 8000310:	2001ec00 	.word	0x2001ec00

08000314 <idle_task>:
}


void idle_task(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
	while(1);
 8000318:	bf00      	nop
 800031a:	e7fd      	b.n	8000318 <idle_task+0x4>

0800031c <task1_handler>:
}


void task1_handler(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_GREEN);
 8000320:	200c      	movs	r0, #12
 8000322:	f7ff ffaf 	bl	8000284 <led_on>
		delay(DELAY_COUNT_1S);
 8000326:	4805      	ldr	r0, [pc, #20]	@ (800033c <task1_handler+0x20>)
 8000328:	f7ff ff5e 	bl	80001e8 <delay>
		led_off(LED_GREEN);
 800032c:	200c      	movs	r0, #12
 800032e:	f7ff ffc1 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_1S);
 8000332:	4802      	ldr	r0, [pc, #8]	@ (800033c <task1_handler+0x20>)
 8000334:	f7ff ff58 	bl	80001e8 <delay>
		led_on(LED_GREEN);
 8000338:	bf00      	nop
 800033a:	e7f1      	b.n	8000320 <task1_handler+0x4>
 800033c:	001312d0 	.word	0x001312d0

08000340 <task2_handler>:
	}

}

void task2_handler(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_ORANGE);
 8000344:	200d      	movs	r0, #13
 8000346:	f7ff ff9d 	bl	8000284 <led_on>
		delay(DELAY_COUNT_500MS);
 800034a:	4805      	ldr	r0, [pc, #20]	@ (8000360 <task2_handler+0x20>)
 800034c:	f7ff ff4c 	bl	80001e8 <delay>
		led_off(LED_ORANGE);
 8000350:	200d      	movs	r0, #13
 8000352:	f7ff ffaf 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_500MS);
 8000356:	4802      	ldr	r0, [pc, #8]	@ (8000360 <task2_handler+0x20>)
 8000358:	f7ff ff46 	bl	80001e8 <delay>
		led_on(LED_ORANGE);
 800035c:	bf00      	nop
 800035e:	e7f1      	b.n	8000344 <task2_handler+0x4>
 8000360:	00098968 	.word	0x00098968

08000364 <task3_handler>:
	}

}

void task3_handler(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_BLUE);
 8000368:	200f      	movs	r0, #15
 800036a:	f7ff ff8b 	bl	8000284 <led_on>
		delay(DELAY_COUNT_250MS);
 800036e:	4805      	ldr	r0, [pc, #20]	@ (8000384 <task3_handler+0x20>)
 8000370:	f7ff ff3a 	bl	80001e8 <delay>
		led_off(LED_BLUE);
 8000374:	200f      	movs	r0, #15
 8000376:	f7ff ff9d 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_250MS);
 800037a:	4802      	ldr	r0, [pc, #8]	@ (8000384 <task3_handler+0x20>)
 800037c:	f7ff ff34 	bl	80001e8 <delay>
		led_on(LED_BLUE);
 8000380:	bf00      	nop
 8000382:	e7f1      	b.n	8000368 <task3_handler+0x4>
 8000384:	0004c4b4 	.word	0x0004c4b4

08000388 <task4_handler>:

}

void task4_handler(void)

{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_RED);
 800038c:	200e      	movs	r0, #14
 800038e:	f7ff ff79 	bl	8000284 <led_on>
		delay(DELAY_COUNT_125MS);
 8000392:	4805      	ldr	r0, [pc, #20]	@ (80003a8 <task4_handler+0x20>)
 8000394:	f7ff ff28 	bl	80001e8 <delay>
		led_off(LED_RED);
 8000398:	200e      	movs	r0, #14
 800039a:	f7ff ff8b 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_125MS);
 800039e:	4802      	ldr	r0, [pc, #8]	@ (80003a8 <task4_handler+0x20>)
 80003a0:	f7ff ff22 	bl	80001e8 <delay>
		led_on(LED_RED);
 80003a4:	bf00      	nop
 80003a6:	e7f1      	b.n	800038c <task4_handler+0x4>
 80003a8:	0002625a 	.word	0x0002625a

080003ac <init_systick_timer>:

}


void init_systick_timer(uint32_t tick_hz)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b087      	sub	sp, #28
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 80003b4:	4b14      	ldr	r3, [pc, #80]	@ (8000408 <init_systick_timer+0x5c>)
 80003b6:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 80003b8:	4b14      	ldr	r3, [pc, #80]	@ (800040c <init_systick_timer+0x60>)
 80003ba:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 80003bc:	4a14      	ldr	r2, [pc, #80]	@ (8000410 <init_systick_timer+0x64>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80003c4:	3b01      	subs	r3, #1
 80003c6:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 80003ce:	697b      	ldr	r3, [r7, #20]
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	431a      	orrs	r2, r3
 80003d6:	697b      	ldr	r3, [r7, #20]
 80003d8:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 80003da:	693b      	ldr	r3, [r7, #16]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f043 0202 	orr.w	r2, r3, #2
 80003e2:	693b      	ldr	r3, [r7, #16]
 80003e4:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 80003e6:	693b      	ldr	r3, [r7, #16]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f043 0204 	orr.w	r2, r3, #4
 80003ee:	693b      	ldr	r3, [r7, #16]
 80003f0:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 80003f2:	693b      	ldr	r3, [r7, #16]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f043 0201 	orr.w	r2, r3, #1
 80003fa:	693b      	ldr	r3, [r7, #16]
 80003fc:	601a      	str	r2, [r3, #0]

}
 80003fe:	bf00      	nop
 8000400:	371c      	adds	r7, #28
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr
 8000408:	e000e014 	.word	0xe000e014
 800040c:	e000e010 	.word	0xe000e010
 8000410:	00f42400 	.word	0x00f42400

08000414 <init_scheduler_stack>:


__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 8000414:	4603      	mov	r3, r0
     __asm volatile("MSR MSP,%0": :  "r" (sched_top_of_stack)  :   );
 8000416:	f383 8808 	msr	MSP, r3
     __asm volatile("BX LR");
 800041a:	4770      	bx	lr

}
 800041c:	bf00      	nop
	...

08000420 <init_tasks_stack>:


/* this function stores dummy stack contents for each task */

void init_tasks_stack(void)
{
 8000420:	b480      	push	{r7}
 8000422:	b085      	sub	sp, #20
 8000424:	af00      	add	r7, sp, #0

	user_tasks[0].current_state = TASK_READY_STATE;
 8000426:	4b3a      	ldr	r3, [pc, #232]	@ (8000510 <init_tasks_stack+0xf0>)
 8000428:	2200      	movs	r2, #0
 800042a:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_READY_STATE;
 800042c:	4b38      	ldr	r3, [pc, #224]	@ (8000510 <init_tasks_stack+0xf0>)
 800042e:	2200      	movs	r2, #0
 8000430:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_READY_STATE;
 8000432:	4b37      	ldr	r3, [pc, #220]	@ (8000510 <init_tasks_stack+0xf0>)
 8000434:	2200      	movs	r2, #0
 8000436:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	user_tasks[3].current_state = TASK_READY_STATE;
 800043a:	4b35      	ldr	r3, [pc, #212]	@ (8000510 <init_tasks_stack+0xf0>)
 800043c:	2200      	movs	r2, #0
 800043e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	user_tasks[4].current_state = TASK_READY_STATE;
 8000442:	4b33      	ldr	r3, [pc, #204]	@ (8000510 <init_tasks_stack+0xf0>)
 8000444:	2200      	movs	r2, #0
 8000446:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

	user_tasks[0].psp_value = IDLE_STACK_START;
 800044a:	4b31      	ldr	r3, [pc, #196]	@ (8000510 <init_tasks_stack+0xf0>)
 800044c:	4a31      	ldr	r2, [pc, #196]	@ (8000514 <init_tasks_stack+0xf4>)
 800044e:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T1_STACK_START;
 8000450:	4b2f      	ldr	r3, [pc, #188]	@ (8000510 <init_tasks_stack+0xf0>)
 8000452:	4a31      	ldr	r2, [pc, #196]	@ (8000518 <init_tasks_stack+0xf8>)
 8000454:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T2_STACK_START;
 8000456:	4b2e      	ldr	r3, [pc, #184]	@ (8000510 <init_tasks_stack+0xf0>)
 8000458:	4a30      	ldr	r2, [pc, #192]	@ (800051c <init_tasks_stack+0xfc>)
 800045a:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T3_STACK_START;
 800045c:	4b2c      	ldr	r3, [pc, #176]	@ (8000510 <init_tasks_stack+0xf0>)
 800045e:	4a30      	ldr	r2, [pc, #192]	@ (8000520 <init_tasks_stack+0x100>)
 8000460:	631a      	str	r2, [r3, #48]	@ 0x30
	user_tasks[4].psp_value = T4_STACK_START;
 8000462:	4b2b      	ldr	r3, [pc, #172]	@ (8000510 <init_tasks_stack+0xf0>)
 8000464:	4a2f      	ldr	r2, [pc, #188]	@ (8000524 <init_tasks_stack+0x104>)
 8000466:	641a      	str	r2, [r3, #64]	@ 0x40

	user_tasks[0].task_handler = idle_task;
 8000468:	4b29      	ldr	r3, [pc, #164]	@ (8000510 <init_tasks_stack+0xf0>)
 800046a:	4a2f      	ldr	r2, [pc, #188]	@ (8000528 <init_tasks_stack+0x108>)
 800046c:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task1_handler;
 800046e:	4b28      	ldr	r3, [pc, #160]	@ (8000510 <init_tasks_stack+0xf0>)
 8000470:	4a2e      	ldr	r2, [pc, #184]	@ (800052c <init_tasks_stack+0x10c>)
 8000472:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task2_handler;
 8000474:	4b26      	ldr	r3, [pc, #152]	@ (8000510 <init_tasks_stack+0xf0>)
 8000476:	4a2e      	ldr	r2, [pc, #184]	@ (8000530 <init_tasks_stack+0x110>)
 8000478:	62da      	str	r2, [r3, #44]	@ 0x2c
	user_tasks[3].task_handler = task3_handler;
 800047a:	4b25      	ldr	r3, [pc, #148]	@ (8000510 <init_tasks_stack+0xf0>)
 800047c:	4a2d      	ldr	r2, [pc, #180]	@ (8000534 <init_tasks_stack+0x114>)
 800047e:	63da      	str	r2, [r3, #60]	@ 0x3c
	user_tasks[4].task_handler = task4_handler;
 8000480:	4b23      	ldr	r3, [pc, #140]	@ (8000510 <init_tasks_stack+0xf0>)
 8000482:	4a2d      	ldr	r2, [pc, #180]	@ (8000538 <init_tasks_stack+0x118>)
 8000484:	64da      	str	r2, [r3, #76]	@ 0x4c


	uint32_t *pPSP;

	for(int i = 0 ; i < MAX_TASKS ;i++)
 8000486:	2300      	movs	r3, #0
 8000488:	60bb      	str	r3, [r7, #8]
 800048a:	e037      	b.n	80004fc <init_tasks_stack+0xdc>
	{
		pPSP = (uint32_t*) user_tasks[i].psp_value;
 800048c:	4a20      	ldr	r2, [pc, #128]	@ (8000510 <init_tasks_stack+0xf0>)
 800048e:	68bb      	ldr	r3, [r7, #8]
 8000490:	011b      	lsls	r3, r3, #4
 8000492:	4413      	add	r3, r2
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	60fb      	str	r3, [r7, #12]

		pPSP--;
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	3b04      	subs	r3, #4
 800049c:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR;//0x01000000
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80004a4:	601a      	str	r2, [r3, #0]

		pPSP--; //PC
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	3b04      	subs	r3, #4
 80004aa:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t) user_tasks[i].task_handler;
 80004ac:	4a18      	ldr	r2, [pc, #96]	@ (8000510 <init_tasks_stack+0xf0>)
 80004ae:	68bb      	ldr	r3, [r7, #8]
 80004b0:	011b      	lsls	r3, r3, #4
 80004b2:	4413      	add	r3, r2
 80004b4:	330c      	adds	r3, #12
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	461a      	mov	r2, r3
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	601a      	str	r2, [r3, #0]

		pPSP--; //LR
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	3b04      	subs	r3, #4
 80004c2:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	f06f 0202 	mvn.w	r2, #2
 80004ca:	601a      	str	r2, [r3, #0]

		for(int j = 0 ; j < 13 ; j++)
 80004cc:	2300      	movs	r3, #0
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	e008      	b.n	80004e4 <init_tasks_stack+0xc4>
		{
			pPSP--;
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	3b04      	subs	r3, #4
 80004d6:	60fb      	str	r3, [r7, #12]
		    *pPSP = 0;
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
		for(int j = 0 ; j < 13 ; j++)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	3301      	adds	r3, #1
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2b0c      	cmp	r3, #12
 80004e8:	ddf3      	ble.n	80004d2 <init_tasks_stack+0xb2>

		}

		user_tasks[i].psp_value = (uint32_t)pPSP;
 80004ea:	68fa      	ldr	r2, [r7, #12]
 80004ec:	4908      	ldr	r1, [pc, #32]	@ (8000510 <init_tasks_stack+0xf0>)
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	011b      	lsls	r3, r3, #4
 80004f2:	440b      	add	r3, r1
 80004f4:	601a      	str	r2, [r3, #0]
	for(int i = 0 ; i < MAX_TASKS ;i++)
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	3301      	adds	r3, #1
 80004fa:	60bb      	str	r3, [r7, #8]
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	2b04      	cmp	r3, #4
 8000500:	ddc4      	ble.n	800048c <init_tasks_stack+0x6c>


	}

}
 8000502:	bf00      	nop
 8000504:	bf00      	nop
 8000506:	3714      	adds	r7, #20
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	20000080 	.word	0x20000080
 8000514:	2001f000 	.word	0x2001f000
 8000518:	20020000 	.word	0x20020000
 800051c:	2001fc00 	.word	0x2001fc00
 8000520:	2001f800 	.word	0x2001f800
 8000524:	2001f400 	.word	0x2001f400
 8000528:	08000315 	.word	0x08000315
 800052c:	0800031d 	.word	0x0800031d
 8000530:	08000341 	.word	0x08000341
 8000534:	08000365 	.word	0x08000365
 8000538:	08000389 	.word	0x08000389

0800053c <enable_processor_faults>:

void enable_processor_faults(void)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 8000542:	4b0c      	ldr	r3, [pc, #48]	@ (8000574 <enable_processor_faults+0x38>)
 8000544:	607b      	str	r3, [r7, #4]

	*pSHCSR |= ( 1 << 16); //mem manage
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 17); //bus fault
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 18); //usage fault
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	601a      	str	r2, [r3, #0]
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	e000ed24 	.word	0xe000ed24

08000578 <get_psp_value>:


uint32_t get_psp_value(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0

	return user_tasks[current_task].psp_value;
 800057c:	4b04      	ldr	r3, [pc, #16]	@ (8000590 <get_psp_value+0x18>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	4a04      	ldr	r2, [pc, #16]	@ (8000594 <get_psp_value+0x1c>)
 8000582:	011b      	lsls	r3, r3, #4
 8000584:	4413      	add	r3, r2
 8000586:	681b      	ldr	r3, [r3, #0]
}
 8000588:	4618      	mov	r0, r3
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr
 8000590:	20000000 	.word	0x20000000
 8000594:	20000080 	.word	0x20000080

08000598 <save_psp_value>:


void save_psp_value(uint32_t current_psp_value)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp_value;
 80005a0:	4b05      	ldr	r3, [pc, #20]	@ (80005b8 <save_psp_value+0x20>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	4a05      	ldr	r2, [pc, #20]	@ (80005bc <save_psp_value+0x24>)
 80005a6:	011b      	lsls	r3, r3, #4
 80005a8:	4413      	add	r3, r2
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	601a      	str	r2, [r3, #0]
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr
 80005b8:	20000000 	.word	0x20000000
 80005bc:	20000080 	.word	0x20000080

080005c0 <update_next_task>:


void update_next_task(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
	int state = TASK_BLOCKED_STATE;
 80005c6:	23ff      	movs	r3, #255	@ 0xff
 80005c8:	607b      	str	r3, [r7, #4]

	for(int i= 0 ; i < (MAX_TASKS) ; i++)
 80005ca:	2300      	movs	r3, #0
 80005cc:	603b      	str	r3, [r7, #0]
 80005ce:	e024      	b.n	800061a <update_next_task+0x5a>
	{
		current_task++;
 80005d0:	4b1a      	ldr	r3, [pc, #104]	@ (800063c <update_next_task+0x7c>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	4b18      	ldr	r3, [pc, #96]	@ (800063c <update_next_task+0x7c>)
 80005da:	701a      	strb	r2, [r3, #0]
	    current_task %= MAX_TASKS;
 80005dc:	4b17      	ldr	r3, [pc, #92]	@ (800063c <update_next_task+0x7c>)
 80005de:	781a      	ldrb	r2, [r3, #0]
 80005e0:	4b17      	ldr	r3, [pc, #92]	@ (8000640 <update_next_task+0x80>)
 80005e2:	fba3 1302 	umull	r1, r3, r3, r2
 80005e6:	0899      	lsrs	r1, r3, #2
 80005e8:	460b      	mov	r3, r1
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	440b      	add	r3, r1
 80005ee:	1ad3      	subs	r3, r2, r3
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	4b12      	ldr	r3, [pc, #72]	@ (800063c <update_next_task+0x7c>)
 80005f4:	701a      	strb	r2, [r3, #0]
		state = user_tasks[current_task].current_state;
 80005f6:	4b11      	ldr	r3, [pc, #68]	@ (800063c <update_next_task+0x7c>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	4a12      	ldr	r2, [pc, #72]	@ (8000644 <update_next_task+0x84>)
 80005fc:	011b      	lsls	r3, r3, #4
 80005fe:	4413      	add	r3, r2
 8000600:	3308      	adds	r3, #8
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	607b      	str	r3, [r7, #4]
		if( (state == TASK_READY_STATE) && (current_task != 0) )
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d103      	bne.n	8000614 <update_next_task+0x54>
 800060c:	4b0b      	ldr	r3, [pc, #44]	@ (800063c <update_next_task+0x7c>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d106      	bne.n	8000622 <update_next_task+0x62>
	for(int i= 0 ; i < (MAX_TASKS) ; i++)
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	3301      	adds	r3, #1
 8000618:	603b      	str	r3, [r7, #0]
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	2b04      	cmp	r3, #4
 800061e:	ddd7      	ble.n	80005d0 <update_next_task+0x10>
 8000620:	e000      	b.n	8000624 <update_next_task+0x64>
			break;
 8000622:	bf00      	nop
	}

	if(state != TASK_READY_STATE)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d002      	beq.n	8000630 <update_next_task+0x70>
		current_task = 0;
 800062a:	4b04      	ldr	r3, [pc, #16]	@ (800063c <update_next_task+0x7c>)
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
}
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20000000 	.word	0x20000000
 8000640:	cccccccd 	.word	0xcccccccd
 8000644:	20000080 	.word	0x20000080

08000648 <switch_sp_to_psp>:
__attribute__((naked)) void switch_sp_to_psp(void)
{
    //1. initialize the PSP with TASK1 stack start address

	//get the value of psp of current_task
	__asm volatile ("PUSH {LR}"); //preserve LR which connects back to main()
 8000648:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value");
 800064a:	f7ff ff95 	bl	8000578 <get_psp_value>
	__asm volatile ("MSR PSP,R0"); //initialize psp
 800064e:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}");  //pops back LR value
 8000652:	f85d eb04 	ldr.w	lr, [sp], #4

	//2. change SP to PSP using CONTROL register
	__asm volatile ("MOV R0,#0X02");
 8000656:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL,R0");
 800065a:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 800065e:	4770      	bx	lr
}
 8000660:	bf00      	nop

08000662 <PendSV_Handler>:
{

	/*Save the context of current task */

	//1. Get current running task's PSP value
	__asm volatile("MRS R0,PSP");
 8000662:	f3ef 8009 	mrs	r0, PSP
	//2. Using that PSP value store SF2( R4 to R11)
	__asm volatile("STMDB R0!,{R4-R11}");
 8000666:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	__asm volatile("PUSH {LR}");
 800066a:	b500      	push	{lr}

	//3. Save the current value of PSP
    __asm volatile("BL save_psp_value");
 800066c:	f7ff ff94 	bl	8000598 <save_psp_value>


	/*Retrieve the context of next task */

	//1. Decide next task to run
    __asm volatile("BL update_next_task");
 8000670:	f7ff ffa6 	bl	80005c0 <update_next_task>

	//2. get its past PSP value
	__asm volatile ("BL get_psp_value");
 8000674:	f7ff ff80 	bl	8000578 <get_psp_value>

	//3. Using that PSP value retrieve SF2(R4 to R11)
	__asm volatile ("LDMIA R0!,{R4-R11}");
 8000678:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	//4. update PSP and exit
	__asm volatile("MSR PSP,R0");
 800067c:	f380 8809 	msr	PSP, r0

	__asm volatile("POP {LR}");
 8000680:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile("BX LR");
 8000684:	4770      	bx	lr



}
 8000686:	bf00      	nop

08000688 <update_global_tick_count>:


void update_global_tick_count(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
	g_tick_count++;
 800068c:	4b04      	ldr	r3, [pc, #16]	@ (80006a0 <update_global_tick_count+0x18>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	3301      	adds	r3, #1
 8000692:	4a03      	ldr	r2, [pc, #12]	@ (80006a0 <update_global_tick_count+0x18>)
 8000694:	6013      	str	r3, [r2, #0]
}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	2000007c 	.word	0x2000007c

080006a4 <unblock_tasks>:

void unblock_tasks(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
	for(int i = 1 ; i < MAX_TASKS ; i++)
 80006aa:	2301      	movs	r3, #1
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	e01b      	b.n	80006e8 <unblock_tasks+0x44>
	{
		if(user_tasks[i].current_state != TASK_READY_STATE)
 80006b0:	4a12      	ldr	r2, [pc, #72]	@ (80006fc <unblock_tasks+0x58>)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	011b      	lsls	r3, r3, #4
 80006b6:	4413      	add	r3, r2
 80006b8:	3308      	adds	r3, #8
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d010      	beq.n	80006e2 <unblock_tasks+0x3e>
		{
			if(user_tasks[i].block_count == g_tick_count)
 80006c0:	4a0e      	ldr	r2, [pc, #56]	@ (80006fc <unblock_tasks+0x58>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	011b      	lsls	r3, r3, #4
 80006c6:	4413      	add	r3, r2
 80006c8:	3304      	adds	r3, #4
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000700 <unblock_tasks+0x5c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d106      	bne.n	80006e2 <unblock_tasks+0x3e>
			{
				user_tasks[i].current_state = TASK_READY_STATE;
 80006d4:	4a09      	ldr	r2, [pc, #36]	@ (80006fc <unblock_tasks+0x58>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	011b      	lsls	r3, r3, #4
 80006da:	4413      	add	r3, r2
 80006dc:	3308      	adds	r3, #8
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
	for(int i = 1 ; i < MAX_TASKS ; i++)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	3301      	adds	r3, #1
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2b04      	cmp	r3, #4
 80006ec:	dde0      	ble.n	80006b0 <unblock_tasks+0xc>
			}
		}

	}

}
 80006ee:	bf00      	nop
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	20000080 	.word	0x20000080
 8000700:	2000007c 	.word	0x2000007c

08000704 <SysTick_Handler>:


void  SysTick_Handler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0

	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 800070a:	4b08      	ldr	r3, [pc, #32]	@ (800072c <SysTick_Handler+0x28>)
 800070c:	607b      	str	r3, [r7, #4]

    update_global_tick_count();
 800070e:	f7ff ffbb 	bl	8000688 <update_global_tick_count>

    unblock_tasks();
 8000712:	f7ff ffc7 	bl	80006a4 <unblock_tasks>

    //pend the pendsv exception
    *pICSR |= ( 1 << 28);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	601a      	str	r2, [r3, #0]
}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	e000ed04 	.word	0xe000ed04

08000730 <HardFault_Handler>:

//2. implement the fault handlers
void HardFault_Handler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	printf("Exception : Hardfault\n");
 8000734:	4802      	ldr	r0, [pc, #8]	@ (8000740 <HardFault_Handler+0x10>)
 8000736:	f000 fa21 	bl	8000b7c <puts>
	while(1);
 800073a:	bf00      	nop
 800073c:	e7fd      	b.n	800073a <HardFault_Handler+0xa>
 800073e:	bf00      	nop
 8000740:	080012b4 	.word	0x080012b4

08000744 <MemManage_Handler>:
}


void MemManage_Handler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	printf("Exception : MemManage\n");
 8000748:	4802      	ldr	r0, [pc, #8]	@ (8000754 <MemManage_Handler+0x10>)
 800074a:	f000 fa17 	bl	8000b7c <puts>
	while(1);
 800074e:	bf00      	nop
 8000750:	e7fd      	b.n	800074e <MemManage_Handler+0xa>
 8000752:	bf00      	nop
 8000754:	080012cc 	.word	0x080012cc

08000758 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 800075c:	4802      	ldr	r0, [pc, #8]	@ (8000768 <BusFault_Handler+0x10>)
 800075e:	f000 fa0d 	bl	8000b7c <puts>
	while(1);
 8000762:	bf00      	nop
 8000764:	e7fd      	b.n	8000762 <BusFault_Handler+0xa>
 8000766:	bf00      	nop
 8000768:	080012e4 	.word	0x080012e4

0800076c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000776:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <ITM_SendChar+0x44>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a0d      	ldr	r2, [pc, #52]	@ (80007b0 <ITM_SendChar+0x44>)
 800077c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000780:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000782:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <ITM_SendChar+0x48>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a0b      	ldr	r2, [pc, #44]	@ (80007b4 <ITM_SendChar+0x48>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800078e:	bf00      	nop
 8000790:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	2b00      	cmp	r3, #0
 800079c:	d0f8      	beq.n	8000790 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800079e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	6013      	str	r3, [r2, #0]
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr
 80007b0:	e000edfc 	.word	0xe000edfc
 80007b4:	e0000e00 	.word	0xe0000e00

080007b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	e00a      	b.n	80007e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007ca:	f3af 8000 	nop.w
 80007ce:	4601      	mov	r1, r0
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	1c5a      	adds	r2, r3, #1
 80007d4:	60ba      	str	r2, [r7, #8]
 80007d6:	b2ca      	uxtb	r2, r1
 80007d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	3301      	adds	r3, #1
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697a      	ldr	r2, [r7, #20]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	dbf0      	blt.n	80007ca <_read+0x12>
	}

return len;
 80007e8:	687b      	ldr	r3, [r7, #4]
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3718      	adds	r7, #24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b086      	sub	sp, #24
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	60f8      	str	r0, [r7, #12]
 80007fa:	60b9      	str	r1, [r7, #8]
 80007fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
 8000802:	e009      	b.n	8000818 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	1c5a      	adds	r2, r3, #1
 8000808:	60ba      	str	r2, [r7, #8]
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ffad 	bl	800076c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	3301      	adds	r3, #1
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	697a      	ldr	r2, [r7, #20]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	429a      	cmp	r2, r3
 800081e:	dbf1      	blt.n	8000804 <_write+0x12>
	}
	return len;
 8000820:	687b      	ldr	r3, [r7, #4]
}
 8000822:	4618      	mov	r0, r3
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <_close>:

int _close(int file)
{
 800082a:	b480      	push	{r7}
 800082c:	b083      	sub	sp, #12
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
	return -1;
 8000832:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000836:	4618      	mov	r0, r3
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr

08000840 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000850:	605a      	str	r2, [r3, #4]
	return 0;
 8000852:	2300      	movs	r3, #0
}
 8000854:	4618      	mov	r0, r3
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr

0800085e <_isatty>:

int _isatty(int file)
{
 800085e:	b480      	push	{r7}
 8000860:	b083      	sub	sp, #12
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
	return 1;
 8000866:	2301      	movs	r3, #1
}
 8000868:	4618      	mov	r0, r3
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr

08000872 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000872:	b480      	push	{r7}
 8000874:	b085      	sub	sp, #20
 8000876:	af00      	add	r7, sp, #0
 8000878:	60f8      	str	r0, [r7, #12]
 800087a:	60b9      	str	r1, [r7, #8]
 800087c:	607a      	str	r2, [r7, #4]
	return 0;
 800087e:	2300      	movs	r3, #0
}
 8000880:	4618      	mov	r0, r3
 8000882:	3714      	adds	r7, #20
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr
	...

0800088c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000894:	4a14      	ldr	r2, [pc, #80]	@ (80008e8 <_sbrk+0x5c>)
 8000896:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <_sbrk+0x60>)
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008a0:	4b13      	ldr	r3, [pc, #76]	@ (80008f0 <_sbrk+0x64>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d102      	bne.n	80008ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008a8:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <_sbrk+0x64>)
 80008aa:	4a12      	ldr	r2, [pc, #72]	@ (80008f4 <_sbrk+0x68>)
 80008ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ae:	4b10      	ldr	r3, [pc, #64]	@ (80008f0 <_sbrk+0x64>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4413      	add	r3, r2
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d207      	bcs.n	80008cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008bc:	f000 fa8c 	bl	8000dd8 <__errno>
 80008c0:	4603      	mov	r3, r0
 80008c2:	220c      	movs	r2, #12
 80008c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008c6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ca:	e009      	b.n	80008e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008cc:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <_sbrk+0x64>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008d2:	4b07      	ldr	r3, [pc, #28]	@ (80008f0 <_sbrk+0x64>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4413      	add	r3, r2
 80008da:	4a05      	ldr	r2, [pc, #20]	@ (80008f0 <_sbrk+0x64>)
 80008dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008de:	68fb      	ldr	r3, [r7, #12]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20020000 	.word	0x20020000
 80008ec:	00000400 	.word	0x00000400
 80008f0:	200000d0 	.word	0x200000d0
 80008f4:	20000220 	.word	0x20000220

080008f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008f8:	480d      	ldr	r0, [pc, #52]	@ (8000930 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008fc:	480d      	ldr	r0, [pc, #52]	@ (8000934 <LoopForever+0x6>)
  ldr r1, =_edata
 80008fe:	490e      	ldr	r1, [pc, #56]	@ (8000938 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000900:	4a0e      	ldr	r2, [pc, #56]	@ (800093c <LoopForever+0xe>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000904:	e002      	b.n	800090c <LoopCopyDataInit>

08000906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090a:	3304      	adds	r3, #4

0800090c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800090c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000910:	d3f9      	bcc.n	8000906 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000912:	4a0b      	ldr	r2, [pc, #44]	@ (8000940 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000914:	4c0b      	ldr	r4, [pc, #44]	@ (8000944 <LoopForever+0x16>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000918:	e001      	b.n	800091e <LoopFillZerobss>

0800091a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800091c:	3204      	adds	r2, #4

0800091e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000920:	d3fb      	bcc.n	800091a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000922:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000926:	f000 fa5d 	bl	8000de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800092a:	f7ff fcdb 	bl	80002e4 <main>

0800092e <LoopForever>:

LoopForever:
    b LoopForever
 800092e:	e7fe      	b.n	800092e <LoopForever>
  ldr   r0, =_estack
 8000930:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000938:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800093c:	08001304 	.word	0x08001304
  ldr r2, =_sbss
 8000940:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000944:	20000220 	.word	0x20000220

08000948 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000948:	e7fe      	b.n	8000948 <ADC_IRQHandler>
	...

0800094c <std>:
 800094c:	2300      	movs	r3, #0
 800094e:	b510      	push	{r4, lr}
 8000950:	4604      	mov	r4, r0
 8000952:	e9c0 3300 	strd	r3, r3, [r0]
 8000956:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800095a:	6083      	str	r3, [r0, #8]
 800095c:	8181      	strh	r1, [r0, #12]
 800095e:	6643      	str	r3, [r0, #100]	@ 0x64
 8000960:	81c2      	strh	r2, [r0, #14]
 8000962:	6183      	str	r3, [r0, #24]
 8000964:	4619      	mov	r1, r3
 8000966:	2208      	movs	r2, #8
 8000968:	305c      	adds	r0, #92	@ 0x5c
 800096a:	f000 f9e7 	bl	8000d3c <memset>
 800096e:	4b0d      	ldr	r3, [pc, #52]	@ (80009a4 <std+0x58>)
 8000970:	6263      	str	r3, [r4, #36]	@ 0x24
 8000972:	4b0d      	ldr	r3, [pc, #52]	@ (80009a8 <std+0x5c>)
 8000974:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000976:	4b0d      	ldr	r3, [pc, #52]	@ (80009ac <std+0x60>)
 8000978:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800097a:	4b0d      	ldr	r3, [pc, #52]	@ (80009b0 <std+0x64>)
 800097c:	6323      	str	r3, [r4, #48]	@ 0x30
 800097e:	4b0d      	ldr	r3, [pc, #52]	@ (80009b4 <std+0x68>)
 8000980:	6224      	str	r4, [r4, #32]
 8000982:	429c      	cmp	r4, r3
 8000984:	d006      	beq.n	8000994 <std+0x48>
 8000986:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800098a:	4294      	cmp	r4, r2
 800098c:	d002      	beq.n	8000994 <std+0x48>
 800098e:	33d0      	adds	r3, #208	@ 0xd0
 8000990:	429c      	cmp	r4, r3
 8000992:	d105      	bne.n	80009a0 <std+0x54>
 8000994:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800099c:	f000 ba46 	b.w	8000e2c <__retarget_lock_init_recursive>
 80009a0:	bd10      	pop	{r4, pc}
 80009a2:	bf00      	nop
 80009a4:	08000b8d 	.word	0x08000b8d
 80009a8:	08000baf 	.word	0x08000baf
 80009ac:	08000be7 	.word	0x08000be7
 80009b0:	08000c0b 	.word	0x08000c0b
 80009b4:	200000d4 	.word	0x200000d4

080009b8 <stdio_exit_handler>:
 80009b8:	4a02      	ldr	r2, [pc, #8]	@ (80009c4 <stdio_exit_handler+0xc>)
 80009ba:	4903      	ldr	r1, [pc, #12]	@ (80009c8 <stdio_exit_handler+0x10>)
 80009bc:	4803      	ldr	r0, [pc, #12]	@ (80009cc <stdio_exit_handler+0x14>)
 80009be:	f000 b869 	b.w	8000a94 <_fwalk_sglue>
 80009c2:	bf00      	nop
 80009c4:	20000004 	.word	0x20000004
 80009c8:	08001125 	.word	0x08001125
 80009cc:	20000014 	.word	0x20000014

080009d0 <cleanup_stdio>:
 80009d0:	6841      	ldr	r1, [r0, #4]
 80009d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a04 <cleanup_stdio+0x34>)
 80009d4:	4299      	cmp	r1, r3
 80009d6:	b510      	push	{r4, lr}
 80009d8:	4604      	mov	r4, r0
 80009da:	d001      	beq.n	80009e0 <cleanup_stdio+0x10>
 80009dc:	f000 fba2 	bl	8001124 <_fflush_r>
 80009e0:	68a1      	ldr	r1, [r4, #8]
 80009e2:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <cleanup_stdio+0x38>)
 80009e4:	4299      	cmp	r1, r3
 80009e6:	d002      	beq.n	80009ee <cleanup_stdio+0x1e>
 80009e8:	4620      	mov	r0, r4
 80009ea:	f000 fb9b 	bl	8001124 <_fflush_r>
 80009ee:	68e1      	ldr	r1, [r4, #12]
 80009f0:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <cleanup_stdio+0x3c>)
 80009f2:	4299      	cmp	r1, r3
 80009f4:	d004      	beq.n	8000a00 <cleanup_stdio+0x30>
 80009f6:	4620      	mov	r0, r4
 80009f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009fc:	f000 bb92 	b.w	8001124 <_fflush_r>
 8000a00:	bd10      	pop	{r4, pc}
 8000a02:	bf00      	nop
 8000a04:	200000d4 	.word	0x200000d4
 8000a08:	2000013c 	.word	0x2000013c
 8000a0c:	200001a4 	.word	0x200001a4

08000a10 <global_stdio_init.part.0>:
 8000a10:	b510      	push	{r4, lr}
 8000a12:	4b0b      	ldr	r3, [pc, #44]	@ (8000a40 <global_stdio_init.part.0+0x30>)
 8000a14:	4c0b      	ldr	r4, [pc, #44]	@ (8000a44 <global_stdio_init.part.0+0x34>)
 8000a16:	4a0c      	ldr	r2, [pc, #48]	@ (8000a48 <global_stdio_init.part.0+0x38>)
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	4620      	mov	r0, r4
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2104      	movs	r1, #4
 8000a20:	f7ff ff94 	bl	800094c <std>
 8000a24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000a28:	2201      	movs	r2, #1
 8000a2a:	2109      	movs	r1, #9
 8000a2c:	f7ff ff8e 	bl	800094c <std>
 8000a30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000a34:	2202      	movs	r2, #2
 8000a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a3a:	2112      	movs	r1, #18
 8000a3c:	f7ff bf86 	b.w	800094c <std>
 8000a40:	2000020c 	.word	0x2000020c
 8000a44:	200000d4 	.word	0x200000d4
 8000a48:	080009b9 	.word	0x080009b9

08000a4c <__sfp_lock_acquire>:
 8000a4c:	4801      	ldr	r0, [pc, #4]	@ (8000a54 <__sfp_lock_acquire+0x8>)
 8000a4e:	f000 b9ee 	b.w	8000e2e <__retarget_lock_acquire_recursive>
 8000a52:	bf00      	nop
 8000a54:	20000215 	.word	0x20000215

08000a58 <__sfp_lock_release>:
 8000a58:	4801      	ldr	r0, [pc, #4]	@ (8000a60 <__sfp_lock_release+0x8>)
 8000a5a:	f000 b9e9 	b.w	8000e30 <__retarget_lock_release_recursive>
 8000a5e:	bf00      	nop
 8000a60:	20000215 	.word	0x20000215

08000a64 <__sinit>:
 8000a64:	b510      	push	{r4, lr}
 8000a66:	4604      	mov	r4, r0
 8000a68:	f7ff fff0 	bl	8000a4c <__sfp_lock_acquire>
 8000a6c:	6a23      	ldr	r3, [r4, #32]
 8000a6e:	b11b      	cbz	r3, 8000a78 <__sinit+0x14>
 8000a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a74:	f7ff bff0 	b.w	8000a58 <__sfp_lock_release>
 8000a78:	4b04      	ldr	r3, [pc, #16]	@ (8000a8c <__sinit+0x28>)
 8000a7a:	6223      	str	r3, [r4, #32]
 8000a7c:	4b04      	ldr	r3, [pc, #16]	@ (8000a90 <__sinit+0x2c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d1f5      	bne.n	8000a70 <__sinit+0xc>
 8000a84:	f7ff ffc4 	bl	8000a10 <global_stdio_init.part.0>
 8000a88:	e7f2      	b.n	8000a70 <__sinit+0xc>
 8000a8a:	bf00      	nop
 8000a8c:	080009d1 	.word	0x080009d1
 8000a90:	2000020c 	.word	0x2000020c

08000a94 <_fwalk_sglue>:
 8000a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a98:	4607      	mov	r7, r0
 8000a9a:	4688      	mov	r8, r1
 8000a9c:	4614      	mov	r4, r2
 8000a9e:	2600      	movs	r6, #0
 8000aa0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000aa4:	f1b9 0901 	subs.w	r9, r9, #1
 8000aa8:	d505      	bpl.n	8000ab6 <_fwalk_sglue+0x22>
 8000aaa:	6824      	ldr	r4, [r4, #0]
 8000aac:	2c00      	cmp	r4, #0
 8000aae:	d1f7      	bne.n	8000aa0 <_fwalk_sglue+0xc>
 8000ab0:	4630      	mov	r0, r6
 8000ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ab6:	89ab      	ldrh	r3, [r5, #12]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d907      	bls.n	8000acc <_fwalk_sglue+0x38>
 8000abc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	d003      	beq.n	8000acc <_fwalk_sglue+0x38>
 8000ac4:	4629      	mov	r1, r5
 8000ac6:	4638      	mov	r0, r7
 8000ac8:	47c0      	blx	r8
 8000aca:	4306      	orrs	r6, r0
 8000acc:	3568      	adds	r5, #104	@ 0x68
 8000ace:	e7e9      	b.n	8000aa4 <_fwalk_sglue+0x10>

08000ad0 <_puts_r>:
 8000ad0:	6a03      	ldr	r3, [r0, #32]
 8000ad2:	b570      	push	{r4, r5, r6, lr}
 8000ad4:	6884      	ldr	r4, [r0, #8]
 8000ad6:	4605      	mov	r5, r0
 8000ad8:	460e      	mov	r6, r1
 8000ada:	b90b      	cbnz	r3, 8000ae0 <_puts_r+0x10>
 8000adc:	f7ff ffc2 	bl	8000a64 <__sinit>
 8000ae0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000ae2:	07db      	lsls	r3, r3, #31
 8000ae4:	d405      	bmi.n	8000af2 <_puts_r+0x22>
 8000ae6:	89a3      	ldrh	r3, [r4, #12]
 8000ae8:	0598      	lsls	r0, r3, #22
 8000aea:	d402      	bmi.n	8000af2 <_puts_r+0x22>
 8000aec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000aee:	f000 f99e 	bl	8000e2e <__retarget_lock_acquire_recursive>
 8000af2:	89a3      	ldrh	r3, [r4, #12]
 8000af4:	0719      	lsls	r1, r3, #28
 8000af6:	d502      	bpl.n	8000afe <_puts_r+0x2e>
 8000af8:	6923      	ldr	r3, [r4, #16]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d135      	bne.n	8000b6a <_puts_r+0x9a>
 8000afe:	4621      	mov	r1, r4
 8000b00:	4628      	mov	r0, r5
 8000b02:	f000 f8c5 	bl	8000c90 <__swsetup_r>
 8000b06:	b380      	cbz	r0, 8000b6a <_puts_r+0x9a>
 8000b08:	f04f 35ff 	mov.w	r5, #4294967295
 8000b0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000b0e:	07da      	lsls	r2, r3, #31
 8000b10:	d405      	bmi.n	8000b1e <_puts_r+0x4e>
 8000b12:	89a3      	ldrh	r3, [r4, #12]
 8000b14:	059b      	lsls	r3, r3, #22
 8000b16:	d402      	bmi.n	8000b1e <_puts_r+0x4e>
 8000b18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000b1a:	f000 f989 	bl	8000e30 <__retarget_lock_release_recursive>
 8000b1e:	4628      	mov	r0, r5
 8000b20:	bd70      	pop	{r4, r5, r6, pc}
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	da04      	bge.n	8000b30 <_puts_r+0x60>
 8000b26:	69a2      	ldr	r2, [r4, #24]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	dc17      	bgt.n	8000b5c <_puts_r+0x8c>
 8000b2c:	290a      	cmp	r1, #10
 8000b2e:	d015      	beq.n	8000b5c <_puts_r+0x8c>
 8000b30:	6823      	ldr	r3, [r4, #0]
 8000b32:	1c5a      	adds	r2, r3, #1
 8000b34:	6022      	str	r2, [r4, #0]
 8000b36:	7019      	strb	r1, [r3, #0]
 8000b38:	68a3      	ldr	r3, [r4, #8]
 8000b3a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	60a3      	str	r3, [r4, #8]
 8000b42:	2900      	cmp	r1, #0
 8000b44:	d1ed      	bne.n	8000b22 <_puts_r+0x52>
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	da11      	bge.n	8000b6e <_puts_r+0x9e>
 8000b4a:	4622      	mov	r2, r4
 8000b4c:	210a      	movs	r1, #10
 8000b4e:	4628      	mov	r0, r5
 8000b50:	f000 f85f 	bl	8000c12 <__swbuf_r>
 8000b54:	3001      	adds	r0, #1
 8000b56:	d0d7      	beq.n	8000b08 <_puts_r+0x38>
 8000b58:	250a      	movs	r5, #10
 8000b5a:	e7d7      	b.n	8000b0c <_puts_r+0x3c>
 8000b5c:	4622      	mov	r2, r4
 8000b5e:	4628      	mov	r0, r5
 8000b60:	f000 f857 	bl	8000c12 <__swbuf_r>
 8000b64:	3001      	adds	r0, #1
 8000b66:	d1e7      	bne.n	8000b38 <_puts_r+0x68>
 8000b68:	e7ce      	b.n	8000b08 <_puts_r+0x38>
 8000b6a:	3e01      	subs	r6, #1
 8000b6c:	e7e4      	b.n	8000b38 <_puts_r+0x68>
 8000b6e:	6823      	ldr	r3, [r4, #0]
 8000b70:	1c5a      	adds	r2, r3, #1
 8000b72:	6022      	str	r2, [r4, #0]
 8000b74:	220a      	movs	r2, #10
 8000b76:	701a      	strb	r2, [r3, #0]
 8000b78:	e7ee      	b.n	8000b58 <_puts_r+0x88>
	...

08000b7c <puts>:
 8000b7c:	4b02      	ldr	r3, [pc, #8]	@ (8000b88 <puts+0xc>)
 8000b7e:	4601      	mov	r1, r0
 8000b80:	6818      	ldr	r0, [r3, #0]
 8000b82:	f7ff bfa5 	b.w	8000ad0 <_puts_r>
 8000b86:	bf00      	nop
 8000b88:	20000010 	.word	0x20000010

08000b8c <__sread>:
 8000b8c:	b510      	push	{r4, lr}
 8000b8e:	460c      	mov	r4, r1
 8000b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b94:	f000 f8fc 	bl	8000d90 <_read_r>
 8000b98:	2800      	cmp	r0, #0
 8000b9a:	bfab      	itete	ge
 8000b9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000b9e:	89a3      	ldrhlt	r3, [r4, #12]
 8000ba0:	181b      	addge	r3, r3, r0
 8000ba2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000ba6:	bfac      	ite	ge
 8000ba8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000baa:	81a3      	strhlt	r3, [r4, #12]
 8000bac:	bd10      	pop	{r4, pc}

08000bae <__swrite>:
 8000bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bb2:	461f      	mov	r7, r3
 8000bb4:	898b      	ldrh	r3, [r1, #12]
 8000bb6:	05db      	lsls	r3, r3, #23
 8000bb8:	4605      	mov	r5, r0
 8000bba:	460c      	mov	r4, r1
 8000bbc:	4616      	mov	r6, r2
 8000bbe:	d505      	bpl.n	8000bcc <__swrite+0x1e>
 8000bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f000 f8d0 	bl	8000d6c <_lseek_r>
 8000bcc:	89a3      	ldrh	r3, [r4, #12]
 8000bce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000bd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000bd6:	81a3      	strh	r3, [r4, #12]
 8000bd8:	4632      	mov	r2, r6
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4628      	mov	r0, r5
 8000bde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000be2:	f000 b8e7 	b.w	8000db4 <_write_r>

08000be6 <__sseek>:
 8000be6:	b510      	push	{r4, lr}
 8000be8:	460c      	mov	r4, r1
 8000bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bee:	f000 f8bd 	bl	8000d6c <_lseek_r>
 8000bf2:	1c43      	adds	r3, r0, #1
 8000bf4:	89a3      	ldrh	r3, [r4, #12]
 8000bf6:	bf15      	itete	ne
 8000bf8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000bfa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000bfe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000c02:	81a3      	strheq	r3, [r4, #12]
 8000c04:	bf18      	it	ne
 8000c06:	81a3      	strhne	r3, [r4, #12]
 8000c08:	bd10      	pop	{r4, pc}

08000c0a <__sclose>:
 8000c0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c0e:	f000 b89d 	b.w	8000d4c <_close_r>

08000c12 <__swbuf_r>:
 8000c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c14:	460e      	mov	r6, r1
 8000c16:	4614      	mov	r4, r2
 8000c18:	4605      	mov	r5, r0
 8000c1a:	b118      	cbz	r0, 8000c24 <__swbuf_r+0x12>
 8000c1c:	6a03      	ldr	r3, [r0, #32]
 8000c1e:	b90b      	cbnz	r3, 8000c24 <__swbuf_r+0x12>
 8000c20:	f7ff ff20 	bl	8000a64 <__sinit>
 8000c24:	69a3      	ldr	r3, [r4, #24]
 8000c26:	60a3      	str	r3, [r4, #8]
 8000c28:	89a3      	ldrh	r3, [r4, #12]
 8000c2a:	071a      	lsls	r2, r3, #28
 8000c2c:	d501      	bpl.n	8000c32 <__swbuf_r+0x20>
 8000c2e:	6923      	ldr	r3, [r4, #16]
 8000c30:	b943      	cbnz	r3, 8000c44 <__swbuf_r+0x32>
 8000c32:	4621      	mov	r1, r4
 8000c34:	4628      	mov	r0, r5
 8000c36:	f000 f82b 	bl	8000c90 <__swsetup_r>
 8000c3a:	b118      	cbz	r0, 8000c44 <__swbuf_r+0x32>
 8000c3c:	f04f 37ff 	mov.w	r7, #4294967295
 8000c40:	4638      	mov	r0, r7
 8000c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c44:	6823      	ldr	r3, [r4, #0]
 8000c46:	6922      	ldr	r2, [r4, #16]
 8000c48:	1a98      	subs	r0, r3, r2
 8000c4a:	6963      	ldr	r3, [r4, #20]
 8000c4c:	b2f6      	uxtb	r6, r6
 8000c4e:	4283      	cmp	r3, r0
 8000c50:	4637      	mov	r7, r6
 8000c52:	dc05      	bgt.n	8000c60 <__swbuf_r+0x4e>
 8000c54:	4621      	mov	r1, r4
 8000c56:	4628      	mov	r0, r5
 8000c58:	f000 fa64 	bl	8001124 <_fflush_r>
 8000c5c:	2800      	cmp	r0, #0
 8000c5e:	d1ed      	bne.n	8000c3c <__swbuf_r+0x2a>
 8000c60:	68a3      	ldr	r3, [r4, #8]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	60a3      	str	r3, [r4, #8]
 8000c66:	6823      	ldr	r3, [r4, #0]
 8000c68:	1c5a      	adds	r2, r3, #1
 8000c6a:	6022      	str	r2, [r4, #0]
 8000c6c:	701e      	strb	r6, [r3, #0]
 8000c6e:	6962      	ldr	r2, [r4, #20]
 8000c70:	1c43      	adds	r3, r0, #1
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__swbuf_r+0x6e>
 8000c76:	89a3      	ldrh	r3, [r4, #12]
 8000c78:	07db      	lsls	r3, r3, #31
 8000c7a:	d5e1      	bpl.n	8000c40 <__swbuf_r+0x2e>
 8000c7c:	2e0a      	cmp	r6, #10
 8000c7e:	d1df      	bne.n	8000c40 <__swbuf_r+0x2e>
 8000c80:	4621      	mov	r1, r4
 8000c82:	4628      	mov	r0, r5
 8000c84:	f000 fa4e 	bl	8001124 <_fflush_r>
 8000c88:	2800      	cmp	r0, #0
 8000c8a:	d0d9      	beq.n	8000c40 <__swbuf_r+0x2e>
 8000c8c:	e7d6      	b.n	8000c3c <__swbuf_r+0x2a>
	...

08000c90 <__swsetup_r>:
 8000c90:	b538      	push	{r3, r4, r5, lr}
 8000c92:	4b29      	ldr	r3, [pc, #164]	@ (8000d38 <__swsetup_r+0xa8>)
 8000c94:	4605      	mov	r5, r0
 8000c96:	6818      	ldr	r0, [r3, #0]
 8000c98:	460c      	mov	r4, r1
 8000c9a:	b118      	cbz	r0, 8000ca4 <__swsetup_r+0x14>
 8000c9c:	6a03      	ldr	r3, [r0, #32]
 8000c9e:	b90b      	cbnz	r3, 8000ca4 <__swsetup_r+0x14>
 8000ca0:	f7ff fee0 	bl	8000a64 <__sinit>
 8000ca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ca8:	0719      	lsls	r1, r3, #28
 8000caa:	d422      	bmi.n	8000cf2 <__swsetup_r+0x62>
 8000cac:	06da      	lsls	r2, r3, #27
 8000cae:	d407      	bmi.n	8000cc0 <__swsetup_r+0x30>
 8000cb0:	2209      	movs	r2, #9
 8000cb2:	602a      	str	r2, [r5, #0]
 8000cb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cb8:	81a3      	strh	r3, [r4, #12]
 8000cba:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbe:	e033      	b.n	8000d28 <__swsetup_r+0x98>
 8000cc0:	0758      	lsls	r0, r3, #29
 8000cc2:	d512      	bpl.n	8000cea <__swsetup_r+0x5a>
 8000cc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000cc6:	b141      	cbz	r1, 8000cda <__swsetup_r+0x4a>
 8000cc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000ccc:	4299      	cmp	r1, r3
 8000cce:	d002      	beq.n	8000cd6 <__swsetup_r+0x46>
 8000cd0:	4628      	mov	r0, r5
 8000cd2:	f000 f8af 	bl	8000e34 <_free_r>
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8000cda:	89a3      	ldrh	r3, [r4, #12]
 8000cdc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000ce0:	81a3      	strh	r3, [r4, #12]
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	6063      	str	r3, [r4, #4]
 8000ce6:	6923      	ldr	r3, [r4, #16]
 8000ce8:	6023      	str	r3, [r4, #0]
 8000cea:	89a3      	ldrh	r3, [r4, #12]
 8000cec:	f043 0308 	orr.w	r3, r3, #8
 8000cf0:	81a3      	strh	r3, [r4, #12]
 8000cf2:	6923      	ldr	r3, [r4, #16]
 8000cf4:	b94b      	cbnz	r3, 8000d0a <__swsetup_r+0x7a>
 8000cf6:	89a3      	ldrh	r3, [r4, #12]
 8000cf8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000cfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d00:	d003      	beq.n	8000d0a <__swsetup_r+0x7a>
 8000d02:	4621      	mov	r1, r4
 8000d04:	4628      	mov	r0, r5
 8000d06:	f000 fa5b 	bl	80011c0 <__smakebuf_r>
 8000d0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d0e:	f013 0201 	ands.w	r2, r3, #1
 8000d12:	d00a      	beq.n	8000d2a <__swsetup_r+0x9a>
 8000d14:	2200      	movs	r2, #0
 8000d16:	60a2      	str	r2, [r4, #8]
 8000d18:	6962      	ldr	r2, [r4, #20]
 8000d1a:	4252      	negs	r2, r2
 8000d1c:	61a2      	str	r2, [r4, #24]
 8000d1e:	6922      	ldr	r2, [r4, #16]
 8000d20:	b942      	cbnz	r2, 8000d34 <__swsetup_r+0xa4>
 8000d22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000d26:	d1c5      	bne.n	8000cb4 <__swsetup_r+0x24>
 8000d28:	bd38      	pop	{r3, r4, r5, pc}
 8000d2a:	0799      	lsls	r1, r3, #30
 8000d2c:	bf58      	it	pl
 8000d2e:	6962      	ldrpl	r2, [r4, #20]
 8000d30:	60a2      	str	r2, [r4, #8]
 8000d32:	e7f4      	b.n	8000d1e <__swsetup_r+0x8e>
 8000d34:	2000      	movs	r0, #0
 8000d36:	e7f7      	b.n	8000d28 <__swsetup_r+0x98>
 8000d38:	20000010 	.word	0x20000010

08000d3c <memset>:
 8000d3c:	4402      	add	r2, r0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d100      	bne.n	8000d46 <memset+0xa>
 8000d44:	4770      	bx	lr
 8000d46:	f803 1b01 	strb.w	r1, [r3], #1
 8000d4a:	e7f9      	b.n	8000d40 <memset+0x4>

08000d4c <_close_r>:
 8000d4c:	b538      	push	{r3, r4, r5, lr}
 8000d4e:	4d06      	ldr	r5, [pc, #24]	@ (8000d68 <_close_r+0x1c>)
 8000d50:	2300      	movs	r3, #0
 8000d52:	4604      	mov	r4, r0
 8000d54:	4608      	mov	r0, r1
 8000d56:	602b      	str	r3, [r5, #0]
 8000d58:	f7ff fd67 	bl	800082a <_close>
 8000d5c:	1c43      	adds	r3, r0, #1
 8000d5e:	d102      	bne.n	8000d66 <_close_r+0x1a>
 8000d60:	682b      	ldr	r3, [r5, #0]
 8000d62:	b103      	cbz	r3, 8000d66 <_close_r+0x1a>
 8000d64:	6023      	str	r3, [r4, #0]
 8000d66:	bd38      	pop	{r3, r4, r5, pc}
 8000d68:	20000210 	.word	0x20000210

08000d6c <_lseek_r>:
 8000d6c:	b538      	push	{r3, r4, r5, lr}
 8000d6e:	4d07      	ldr	r5, [pc, #28]	@ (8000d8c <_lseek_r+0x20>)
 8000d70:	4604      	mov	r4, r0
 8000d72:	4608      	mov	r0, r1
 8000d74:	4611      	mov	r1, r2
 8000d76:	2200      	movs	r2, #0
 8000d78:	602a      	str	r2, [r5, #0]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	f7ff fd79 	bl	8000872 <_lseek>
 8000d80:	1c43      	adds	r3, r0, #1
 8000d82:	d102      	bne.n	8000d8a <_lseek_r+0x1e>
 8000d84:	682b      	ldr	r3, [r5, #0]
 8000d86:	b103      	cbz	r3, 8000d8a <_lseek_r+0x1e>
 8000d88:	6023      	str	r3, [r4, #0]
 8000d8a:	bd38      	pop	{r3, r4, r5, pc}
 8000d8c:	20000210 	.word	0x20000210

08000d90 <_read_r>:
 8000d90:	b538      	push	{r3, r4, r5, lr}
 8000d92:	4d07      	ldr	r5, [pc, #28]	@ (8000db0 <_read_r+0x20>)
 8000d94:	4604      	mov	r4, r0
 8000d96:	4608      	mov	r0, r1
 8000d98:	4611      	mov	r1, r2
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	602a      	str	r2, [r5, #0]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	f7ff fd0a 	bl	80007b8 <_read>
 8000da4:	1c43      	adds	r3, r0, #1
 8000da6:	d102      	bne.n	8000dae <_read_r+0x1e>
 8000da8:	682b      	ldr	r3, [r5, #0]
 8000daa:	b103      	cbz	r3, 8000dae <_read_r+0x1e>
 8000dac:	6023      	str	r3, [r4, #0]
 8000dae:	bd38      	pop	{r3, r4, r5, pc}
 8000db0:	20000210 	.word	0x20000210

08000db4 <_write_r>:
 8000db4:	b538      	push	{r3, r4, r5, lr}
 8000db6:	4d07      	ldr	r5, [pc, #28]	@ (8000dd4 <_write_r+0x20>)
 8000db8:	4604      	mov	r4, r0
 8000dba:	4608      	mov	r0, r1
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	602a      	str	r2, [r5, #0]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	f7ff fd15 	bl	80007f2 <_write>
 8000dc8:	1c43      	adds	r3, r0, #1
 8000dca:	d102      	bne.n	8000dd2 <_write_r+0x1e>
 8000dcc:	682b      	ldr	r3, [r5, #0]
 8000dce:	b103      	cbz	r3, 8000dd2 <_write_r+0x1e>
 8000dd0:	6023      	str	r3, [r4, #0]
 8000dd2:	bd38      	pop	{r3, r4, r5, pc}
 8000dd4:	20000210 	.word	0x20000210

08000dd8 <__errno>:
 8000dd8:	4b01      	ldr	r3, [pc, #4]	@ (8000de0 <__errno+0x8>)
 8000dda:	6818      	ldr	r0, [r3, #0]
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	20000010 	.word	0x20000010

08000de4 <__libc_init_array>:
 8000de4:	b570      	push	{r4, r5, r6, lr}
 8000de6:	4d0d      	ldr	r5, [pc, #52]	@ (8000e1c <__libc_init_array+0x38>)
 8000de8:	4c0d      	ldr	r4, [pc, #52]	@ (8000e20 <__libc_init_array+0x3c>)
 8000dea:	1b64      	subs	r4, r4, r5
 8000dec:	10a4      	asrs	r4, r4, #2
 8000dee:	2600      	movs	r6, #0
 8000df0:	42a6      	cmp	r6, r4
 8000df2:	d109      	bne.n	8000e08 <__libc_init_array+0x24>
 8000df4:	4d0b      	ldr	r5, [pc, #44]	@ (8000e24 <__libc_init_array+0x40>)
 8000df6:	4c0c      	ldr	r4, [pc, #48]	@ (8000e28 <__libc_init_array+0x44>)
 8000df8:	f000 fa50 	bl	800129c <_init>
 8000dfc:	1b64      	subs	r4, r4, r5
 8000dfe:	10a4      	asrs	r4, r4, #2
 8000e00:	2600      	movs	r6, #0
 8000e02:	42a6      	cmp	r6, r4
 8000e04:	d105      	bne.n	8000e12 <__libc_init_array+0x2e>
 8000e06:	bd70      	pop	{r4, r5, r6, pc}
 8000e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e0c:	4798      	blx	r3
 8000e0e:	3601      	adds	r6, #1
 8000e10:	e7ee      	b.n	8000df0 <__libc_init_array+0xc>
 8000e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e16:	4798      	blx	r3
 8000e18:	3601      	adds	r6, #1
 8000e1a:	e7f2      	b.n	8000e02 <__libc_init_array+0x1e>
 8000e1c:	080012fc 	.word	0x080012fc
 8000e20:	080012fc 	.word	0x080012fc
 8000e24:	080012fc 	.word	0x080012fc
 8000e28:	08001300 	.word	0x08001300

08000e2c <__retarget_lock_init_recursive>:
 8000e2c:	4770      	bx	lr

08000e2e <__retarget_lock_acquire_recursive>:
 8000e2e:	4770      	bx	lr

08000e30 <__retarget_lock_release_recursive>:
 8000e30:	4770      	bx	lr
	...

08000e34 <_free_r>:
 8000e34:	b538      	push	{r3, r4, r5, lr}
 8000e36:	4605      	mov	r5, r0
 8000e38:	2900      	cmp	r1, #0
 8000e3a:	d041      	beq.n	8000ec0 <_free_r+0x8c>
 8000e3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e40:	1f0c      	subs	r4, r1, #4
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	bfb8      	it	lt
 8000e46:	18e4      	addlt	r4, r4, r3
 8000e48:	f000 f8e0 	bl	800100c <__malloc_lock>
 8000e4c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ec4 <_free_r+0x90>)
 8000e4e:	6813      	ldr	r3, [r2, #0]
 8000e50:	b933      	cbnz	r3, 8000e60 <_free_r+0x2c>
 8000e52:	6063      	str	r3, [r4, #4]
 8000e54:	6014      	str	r4, [r2, #0]
 8000e56:	4628      	mov	r0, r5
 8000e58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e5c:	f000 b8dc 	b.w	8001018 <__malloc_unlock>
 8000e60:	42a3      	cmp	r3, r4
 8000e62:	d908      	bls.n	8000e76 <_free_r+0x42>
 8000e64:	6820      	ldr	r0, [r4, #0]
 8000e66:	1821      	adds	r1, r4, r0
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	bf01      	itttt	eq
 8000e6c:	6819      	ldreq	r1, [r3, #0]
 8000e6e:	685b      	ldreq	r3, [r3, #4]
 8000e70:	1809      	addeq	r1, r1, r0
 8000e72:	6021      	streq	r1, [r4, #0]
 8000e74:	e7ed      	b.n	8000e52 <_free_r+0x1e>
 8000e76:	461a      	mov	r2, r3
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	b10b      	cbz	r3, 8000e80 <_free_r+0x4c>
 8000e7c:	42a3      	cmp	r3, r4
 8000e7e:	d9fa      	bls.n	8000e76 <_free_r+0x42>
 8000e80:	6811      	ldr	r1, [r2, #0]
 8000e82:	1850      	adds	r0, r2, r1
 8000e84:	42a0      	cmp	r0, r4
 8000e86:	d10b      	bne.n	8000ea0 <_free_r+0x6c>
 8000e88:	6820      	ldr	r0, [r4, #0]
 8000e8a:	4401      	add	r1, r0
 8000e8c:	1850      	adds	r0, r2, r1
 8000e8e:	4283      	cmp	r3, r0
 8000e90:	6011      	str	r1, [r2, #0]
 8000e92:	d1e0      	bne.n	8000e56 <_free_r+0x22>
 8000e94:	6818      	ldr	r0, [r3, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	6053      	str	r3, [r2, #4]
 8000e9a:	4408      	add	r0, r1
 8000e9c:	6010      	str	r0, [r2, #0]
 8000e9e:	e7da      	b.n	8000e56 <_free_r+0x22>
 8000ea0:	d902      	bls.n	8000ea8 <_free_r+0x74>
 8000ea2:	230c      	movs	r3, #12
 8000ea4:	602b      	str	r3, [r5, #0]
 8000ea6:	e7d6      	b.n	8000e56 <_free_r+0x22>
 8000ea8:	6820      	ldr	r0, [r4, #0]
 8000eaa:	1821      	adds	r1, r4, r0
 8000eac:	428b      	cmp	r3, r1
 8000eae:	bf04      	itt	eq
 8000eb0:	6819      	ldreq	r1, [r3, #0]
 8000eb2:	685b      	ldreq	r3, [r3, #4]
 8000eb4:	6063      	str	r3, [r4, #4]
 8000eb6:	bf04      	itt	eq
 8000eb8:	1809      	addeq	r1, r1, r0
 8000eba:	6021      	streq	r1, [r4, #0]
 8000ebc:	6054      	str	r4, [r2, #4]
 8000ebe:	e7ca      	b.n	8000e56 <_free_r+0x22>
 8000ec0:	bd38      	pop	{r3, r4, r5, pc}
 8000ec2:	bf00      	nop
 8000ec4:	2000021c 	.word	0x2000021c

08000ec8 <sbrk_aligned>:
 8000ec8:	b570      	push	{r4, r5, r6, lr}
 8000eca:	4e0f      	ldr	r6, [pc, #60]	@ (8000f08 <sbrk_aligned+0x40>)
 8000ecc:	460c      	mov	r4, r1
 8000ece:	6831      	ldr	r1, [r6, #0]
 8000ed0:	4605      	mov	r5, r0
 8000ed2:	b911      	cbnz	r1, 8000eda <sbrk_aligned+0x12>
 8000ed4:	f000 f9d2 	bl	800127c <_sbrk_r>
 8000ed8:	6030      	str	r0, [r6, #0]
 8000eda:	4621      	mov	r1, r4
 8000edc:	4628      	mov	r0, r5
 8000ede:	f000 f9cd 	bl	800127c <_sbrk_r>
 8000ee2:	1c43      	adds	r3, r0, #1
 8000ee4:	d103      	bne.n	8000eee <sbrk_aligned+0x26>
 8000ee6:	f04f 34ff 	mov.w	r4, #4294967295
 8000eea:	4620      	mov	r0, r4
 8000eec:	bd70      	pop	{r4, r5, r6, pc}
 8000eee:	1cc4      	adds	r4, r0, #3
 8000ef0:	f024 0403 	bic.w	r4, r4, #3
 8000ef4:	42a0      	cmp	r0, r4
 8000ef6:	d0f8      	beq.n	8000eea <sbrk_aligned+0x22>
 8000ef8:	1a21      	subs	r1, r4, r0
 8000efa:	4628      	mov	r0, r5
 8000efc:	f000 f9be 	bl	800127c <_sbrk_r>
 8000f00:	3001      	adds	r0, #1
 8000f02:	d1f2      	bne.n	8000eea <sbrk_aligned+0x22>
 8000f04:	e7ef      	b.n	8000ee6 <sbrk_aligned+0x1e>
 8000f06:	bf00      	nop
 8000f08:	20000218 	.word	0x20000218

08000f0c <_malloc_r>:
 8000f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f10:	1ccd      	adds	r5, r1, #3
 8000f12:	f025 0503 	bic.w	r5, r5, #3
 8000f16:	3508      	adds	r5, #8
 8000f18:	2d0c      	cmp	r5, #12
 8000f1a:	bf38      	it	cc
 8000f1c:	250c      	movcc	r5, #12
 8000f1e:	2d00      	cmp	r5, #0
 8000f20:	4606      	mov	r6, r0
 8000f22:	db01      	blt.n	8000f28 <_malloc_r+0x1c>
 8000f24:	42a9      	cmp	r1, r5
 8000f26:	d904      	bls.n	8000f32 <_malloc_r+0x26>
 8000f28:	230c      	movs	r3, #12
 8000f2a:	6033      	str	r3, [r6, #0]
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001008 <_malloc_r+0xfc>
 8000f36:	f000 f869 	bl	800100c <__malloc_lock>
 8000f3a:	f8d8 3000 	ldr.w	r3, [r8]
 8000f3e:	461c      	mov	r4, r3
 8000f40:	bb44      	cbnz	r4, 8000f94 <_malloc_r+0x88>
 8000f42:	4629      	mov	r1, r5
 8000f44:	4630      	mov	r0, r6
 8000f46:	f7ff ffbf 	bl	8000ec8 <sbrk_aligned>
 8000f4a:	1c43      	adds	r3, r0, #1
 8000f4c:	4604      	mov	r4, r0
 8000f4e:	d158      	bne.n	8001002 <_malloc_r+0xf6>
 8000f50:	f8d8 4000 	ldr.w	r4, [r8]
 8000f54:	4627      	mov	r7, r4
 8000f56:	2f00      	cmp	r7, #0
 8000f58:	d143      	bne.n	8000fe2 <_malloc_r+0xd6>
 8000f5a:	2c00      	cmp	r4, #0
 8000f5c:	d04b      	beq.n	8000ff6 <_malloc_r+0xea>
 8000f5e:	6823      	ldr	r3, [r4, #0]
 8000f60:	4639      	mov	r1, r7
 8000f62:	4630      	mov	r0, r6
 8000f64:	eb04 0903 	add.w	r9, r4, r3
 8000f68:	f000 f988 	bl	800127c <_sbrk_r>
 8000f6c:	4581      	cmp	r9, r0
 8000f6e:	d142      	bne.n	8000ff6 <_malloc_r+0xea>
 8000f70:	6821      	ldr	r1, [r4, #0]
 8000f72:	1a6d      	subs	r5, r5, r1
 8000f74:	4629      	mov	r1, r5
 8000f76:	4630      	mov	r0, r6
 8000f78:	f7ff ffa6 	bl	8000ec8 <sbrk_aligned>
 8000f7c:	3001      	adds	r0, #1
 8000f7e:	d03a      	beq.n	8000ff6 <_malloc_r+0xea>
 8000f80:	6823      	ldr	r3, [r4, #0]
 8000f82:	442b      	add	r3, r5
 8000f84:	6023      	str	r3, [r4, #0]
 8000f86:	f8d8 3000 	ldr.w	r3, [r8]
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	bb62      	cbnz	r2, 8000fe8 <_malloc_r+0xdc>
 8000f8e:	f8c8 7000 	str.w	r7, [r8]
 8000f92:	e00f      	b.n	8000fb4 <_malloc_r+0xa8>
 8000f94:	6822      	ldr	r2, [r4, #0]
 8000f96:	1b52      	subs	r2, r2, r5
 8000f98:	d420      	bmi.n	8000fdc <_malloc_r+0xd0>
 8000f9a:	2a0b      	cmp	r2, #11
 8000f9c:	d917      	bls.n	8000fce <_malloc_r+0xc2>
 8000f9e:	1961      	adds	r1, r4, r5
 8000fa0:	42a3      	cmp	r3, r4
 8000fa2:	6025      	str	r5, [r4, #0]
 8000fa4:	bf18      	it	ne
 8000fa6:	6059      	strne	r1, [r3, #4]
 8000fa8:	6863      	ldr	r3, [r4, #4]
 8000faa:	bf08      	it	eq
 8000fac:	f8c8 1000 	streq.w	r1, [r8]
 8000fb0:	5162      	str	r2, [r4, r5]
 8000fb2:	604b      	str	r3, [r1, #4]
 8000fb4:	4630      	mov	r0, r6
 8000fb6:	f000 f82f 	bl	8001018 <__malloc_unlock>
 8000fba:	f104 000b 	add.w	r0, r4, #11
 8000fbe:	1d23      	adds	r3, r4, #4
 8000fc0:	f020 0007 	bic.w	r0, r0, #7
 8000fc4:	1ac2      	subs	r2, r0, r3
 8000fc6:	bf1c      	itt	ne
 8000fc8:	1a1b      	subne	r3, r3, r0
 8000fca:	50a3      	strne	r3, [r4, r2]
 8000fcc:	e7af      	b.n	8000f2e <_malloc_r+0x22>
 8000fce:	6862      	ldr	r2, [r4, #4]
 8000fd0:	42a3      	cmp	r3, r4
 8000fd2:	bf0c      	ite	eq
 8000fd4:	f8c8 2000 	streq.w	r2, [r8]
 8000fd8:	605a      	strne	r2, [r3, #4]
 8000fda:	e7eb      	b.n	8000fb4 <_malloc_r+0xa8>
 8000fdc:	4623      	mov	r3, r4
 8000fde:	6864      	ldr	r4, [r4, #4]
 8000fe0:	e7ae      	b.n	8000f40 <_malloc_r+0x34>
 8000fe2:	463c      	mov	r4, r7
 8000fe4:	687f      	ldr	r7, [r7, #4]
 8000fe6:	e7b6      	b.n	8000f56 <_malloc_r+0x4a>
 8000fe8:	461a      	mov	r2, r3
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	42a3      	cmp	r3, r4
 8000fee:	d1fb      	bne.n	8000fe8 <_malloc_r+0xdc>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	6053      	str	r3, [r2, #4]
 8000ff4:	e7de      	b.n	8000fb4 <_malloc_r+0xa8>
 8000ff6:	230c      	movs	r3, #12
 8000ff8:	6033      	str	r3, [r6, #0]
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	f000 f80c 	bl	8001018 <__malloc_unlock>
 8001000:	e794      	b.n	8000f2c <_malloc_r+0x20>
 8001002:	6005      	str	r5, [r0, #0]
 8001004:	e7d6      	b.n	8000fb4 <_malloc_r+0xa8>
 8001006:	bf00      	nop
 8001008:	2000021c 	.word	0x2000021c

0800100c <__malloc_lock>:
 800100c:	4801      	ldr	r0, [pc, #4]	@ (8001014 <__malloc_lock+0x8>)
 800100e:	f7ff bf0e 	b.w	8000e2e <__retarget_lock_acquire_recursive>
 8001012:	bf00      	nop
 8001014:	20000214 	.word	0x20000214

08001018 <__malloc_unlock>:
 8001018:	4801      	ldr	r0, [pc, #4]	@ (8001020 <__malloc_unlock+0x8>)
 800101a:	f7ff bf09 	b.w	8000e30 <__retarget_lock_release_recursive>
 800101e:	bf00      	nop
 8001020:	20000214 	.word	0x20000214

08001024 <__sflush_r>:
 8001024:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800102a:	0716      	lsls	r6, r2, #28
 800102c:	4605      	mov	r5, r0
 800102e:	460c      	mov	r4, r1
 8001030:	d454      	bmi.n	80010dc <__sflush_r+0xb8>
 8001032:	684b      	ldr	r3, [r1, #4]
 8001034:	2b00      	cmp	r3, #0
 8001036:	dc02      	bgt.n	800103e <__sflush_r+0x1a>
 8001038:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800103a:	2b00      	cmp	r3, #0
 800103c:	dd48      	ble.n	80010d0 <__sflush_r+0xac>
 800103e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001040:	2e00      	cmp	r6, #0
 8001042:	d045      	beq.n	80010d0 <__sflush_r+0xac>
 8001044:	2300      	movs	r3, #0
 8001046:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800104a:	682f      	ldr	r7, [r5, #0]
 800104c:	6a21      	ldr	r1, [r4, #32]
 800104e:	602b      	str	r3, [r5, #0]
 8001050:	d030      	beq.n	80010b4 <__sflush_r+0x90>
 8001052:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001054:	89a3      	ldrh	r3, [r4, #12]
 8001056:	0759      	lsls	r1, r3, #29
 8001058:	d505      	bpl.n	8001066 <__sflush_r+0x42>
 800105a:	6863      	ldr	r3, [r4, #4]
 800105c:	1ad2      	subs	r2, r2, r3
 800105e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001060:	b10b      	cbz	r3, 8001066 <__sflush_r+0x42>
 8001062:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001064:	1ad2      	subs	r2, r2, r3
 8001066:	2300      	movs	r3, #0
 8001068:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800106a:	6a21      	ldr	r1, [r4, #32]
 800106c:	4628      	mov	r0, r5
 800106e:	47b0      	blx	r6
 8001070:	1c43      	adds	r3, r0, #1
 8001072:	89a3      	ldrh	r3, [r4, #12]
 8001074:	d106      	bne.n	8001084 <__sflush_r+0x60>
 8001076:	6829      	ldr	r1, [r5, #0]
 8001078:	291d      	cmp	r1, #29
 800107a:	d82b      	bhi.n	80010d4 <__sflush_r+0xb0>
 800107c:	4a28      	ldr	r2, [pc, #160]	@ (8001120 <__sflush_r+0xfc>)
 800107e:	410a      	asrs	r2, r1
 8001080:	07d6      	lsls	r6, r2, #31
 8001082:	d427      	bmi.n	80010d4 <__sflush_r+0xb0>
 8001084:	2200      	movs	r2, #0
 8001086:	6062      	str	r2, [r4, #4]
 8001088:	04d9      	lsls	r1, r3, #19
 800108a:	6922      	ldr	r2, [r4, #16]
 800108c:	6022      	str	r2, [r4, #0]
 800108e:	d504      	bpl.n	800109a <__sflush_r+0x76>
 8001090:	1c42      	adds	r2, r0, #1
 8001092:	d101      	bne.n	8001098 <__sflush_r+0x74>
 8001094:	682b      	ldr	r3, [r5, #0]
 8001096:	b903      	cbnz	r3, 800109a <__sflush_r+0x76>
 8001098:	6560      	str	r0, [r4, #84]	@ 0x54
 800109a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800109c:	602f      	str	r7, [r5, #0]
 800109e:	b1b9      	cbz	r1, 80010d0 <__sflush_r+0xac>
 80010a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80010a4:	4299      	cmp	r1, r3
 80010a6:	d002      	beq.n	80010ae <__sflush_r+0x8a>
 80010a8:	4628      	mov	r0, r5
 80010aa:	f7ff fec3 	bl	8000e34 <_free_r>
 80010ae:	2300      	movs	r3, #0
 80010b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80010b2:	e00d      	b.n	80010d0 <__sflush_r+0xac>
 80010b4:	2301      	movs	r3, #1
 80010b6:	4628      	mov	r0, r5
 80010b8:	47b0      	blx	r6
 80010ba:	4602      	mov	r2, r0
 80010bc:	1c50      	adds	r0, r2, #1
 80010be:	d1c9      	bne.n	8001054 <__sflush_r+0x30>
 80010c0:	682b      	ldr	r3, [r5, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d0c6      	beq.n	8001054 <__sflush_r+0x30>
 80010c6:	2b1d      	cmp	r3, #29
 80010c8:	d001      	beq.n	80010ce <__sflush_r+0xaa>
 80010ca:	2b16      	cmp	r3, #22
 80010cc:	d11d      	bne.n	800110a <__sflush_r+0xe6>
 80010ce:	602f      	str	r7, [r5, #0]
 80010d0:	2000      	movs	r0, #0
 80010d2:	e021      	b.n	8001118 <__sflush_r+0xf4>
 80010d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010d8:	b21b      	sxth	r3, r3
 80010da:	e01a      	b.n	8001112 <__sflush_r+0xee>
 80010dc:	690f      	ldr	r7, [r1, #16]
 80010de:	2f00      	cmp	r7, #0
 80010e0:	d0f6      	beq.n	80010d0 <__sflush_r+0xac>
 80010e2:	0793      	lsls	r3, r2, #30
 80010e4:	680e      	ldr	r6, [r1, #0]
 80010e6:	bf08      	it	eq
 80010e8:	694b      	ldreq	r3, [r1, #20]
 80010ea:	600f      	str	r7, [r1, #0]
 80010ec:	bf18      	it	ne
 80010ee:	2300      	movne	r3, #0
 80010f0:	1bf6      	subs	r6, r6, r7
 80010f2:	608b      	str	r3, [r1, #8]
 80010f4:	2e00      	cmp	r6, #0
 80010f6:	ddeb      	ble.n	80010d0 <__sflush_r+0xac>
 80010f8:	6a21      	ldr	r1, [r4, #32]
 80010fa:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80010fe:	4633      	mov	r3, r6
 8001100:	463a      	mov	r2, r7
 8001102:	4628      	mov	r0, r5
 8001104:	47e0      	blx	ip
 8001106:	2800      	cmp	r0, #0
 8001108:	dc07      	bgt.n	800111a <__sflush_r+0xf6>
 800110a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800110e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001112:	81a3      	strh	r3, [r4, #12]
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800111a:	4407      	add	r7, r0
 800111c:	1a36      	subs	r6, r6, r0
 800111e:	e7e9      	b.n	80010f4 <__sflush_r+0xd0>
 8001120:	dfbffffe 	.word	0xdfbffffe

08001124 <_fflush_r>:
 8001124:	b538      	push	{r3, r4, r5, lr}
 8001126:	690b      	ldr	r3, [r1, #16]
 8001128:	4605      	mov	r5, r0
 800112a:	460c      	mov	r4, r1
 800112c:	b913      	cbnz	r3, 8001134 <_fflush_r+0x10>
 800112e:	2500      	movs	r5, #0
 8001130:	4628      	mov	r0, r5
 8001132:	bd38      	pop	{r3, r4, r5, pc}
 8001134:	b118      	cbz	r0, 800113e <_fflush_r+0x1a>
 8001136:	6a03      	ldr	r3, [r0, #32]
 8001138:	b90b      	cbnz	r3, 800113e <_fflush_r+0x1a>
 800113a:	f7ff fc93 	bl	8000a64 <__sinit>
 800113e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0f3      	beq.n	800112e <_fflush_r+0xa>
 8001146:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001148:	07d0      	lsls	r0, r2, #31
 800114a:	d404      	bmi.n	8001156 <_fflush_r+0x32>
 800114c:	0599      	lsls	r1, r3, #22
 800114e:	d402      	bmi.n	8001156 <_fflush_r+0x32>
 8001150:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001152:	f7ff fe6c 	bl	8000e2e <__retarget_lock_acquire_recursive>
 8001156:	4628      	mov	r0, r5
 8001158:	4621      	mov	r1, r4
 800115a:	f7ff ff63 	bl	8001024 <__sflush_r>
 800115e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001160:	07da      	lsls	r2, r3, #31
 8001162:	4605      	mov	r5, r0
 8001164:	d4e4      	bmi.n	8001130 <_fflush_r+0xc>
 8001166:	89a3      	ldrh	r3, [r4, #12]
 8001168:	059b      	lsls	r3, r3, #22
 800116a:	d4e1      	bmi.n	8001130 <_fflush_r+0xc>
 800116c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800116e:	f7ff fe5f 	bl	8000e30 <__retarget_lock_release_recursive>
 8001172:	e7dd      	b.n	8001130 <_fflush_r+0xc>

08001174 <__swhatbuf_r>:
 8001174:	b570      	push	{r4, r5, r6, lr}
 8001176:	460c      	mov	r4, r1
 8001178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800117c:	2900      	cmp	r1, #0
 800117e:	b096      	sub	sp, #88	@ 0x58
 8001180:	4615      	mov	r5, r2
 8001182:	461e      	mov	r6, r3
 8001184:	da0d      	bge.n	80011a2 <__swhatbuf_r+0x2e>
 8001186:	89a3      	ldrh	r3, [r4, #12]
 8001188:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800118c:	f04f 0100 	mov.w	r1, #0
 8001190:	bf14      	ite	ne
 8001192:	2340      	movne	r3, #64	@ 0x40
 8001194:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001198:	2000      	movs	r0, #0
 800119a:	6031      	str	r1, [r6, #0]
 800119c:	602b      	str	r3, [r5, #0]
 800119e:	b016      	add	sp, #88	@ 0x58
 80011a0:	bd70      	pop	{r4, r5, r6, pc}
 80011a2:	466a      	mov	r2, sp
 80011a4:	f000 f848 	bl	8001238 <_fstat_r>
 80011a8:	2800      	cmp	r0, #0
 80011aa:	dbec      	blt.n	8001186 <__swhatbuf_r+0x12>
 80011ac:	9901      	ldr	r1, [sp, #4]
 80011ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80011b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80011b6:	4259      	negs	r1, r3
 80011b8:	4159      	adcs	r1, r3
 80011ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011be:	e7eb      	b.n	8001198 <__swhatbuf_r+0x24>

080011c0 <__smakebuf_r>:
 80011c0:	898b      	ldrh	r3, [r1, #12]
 80011c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80011c4:	079d      	lsls	r5, r3, #30
 80011c6:	4606      	mov	r6, r0
 80011c8:	460c      	mov	r4, r1
 80011ca:	d507      	bpl.n	80011dc <__smakebuf_r+0x1c>
 80011cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80011d0:	6023      	str	r3, [r4, #0]
 80011d2:	6123      	str	r3, [r4, #16]
 80011d4:	2301      	movs	r3, #1
 80011d6:	6163      	str	r3, [r4, #20]
 80011d8:	b003      	add	sp, #12
 80011da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011dc:	ab01      	add	r3, sp, #4
 80011de:	466a      	mov	r2, sp
 80011e0:	f7ff ffc8 	bl	8001174 <__swhatbuf_r>
 80011e4:	9f00      	ldr	r7, [sp, #0]
 80011e6:	4605      	mov	r5, r0
 80011e8:	4639      	mov	r1, r7
 80011ea:	4630      	mov	r0, r6
 80011ec:	f7ff fe8e 	bl	8000f0c <_malloc_r>
 80011f0:	b948      	cbnz	r0, 8001206 <__smakebuf_r+0x46>
 80011f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011f6:	059a      	lsls	r2, r3, #22
 80011f8:	d4ee      	bmi.n	80011d8 <__smakebuf_r+0x18>
 80011fa:	f023 0303 	bic.w	r3, r3, #3
 80011fe:	f043 0302 	orr.w	r3, r3, #2
 8001202:	81a3      	strh	r3, [r4, #12]
 8001204:	e7e2      	b.n	80011cc <__smakebuf_r+0xc>
 8001206:	89a3      	ldrh	r3, [r4, #12]
 8001208:	6020      	str	r0, [r4, #0]
 800120a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800120e:	81a3      	strh	r3, [r4, #12]
 8001210:	9b01      	ldr	r3, [sp, #4]
 8001212:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001216:	b15b      	cbz	r3, 8001230 <__smakebuf_r+0x70>
 8001218:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800121c:	4630      	mov	r0, r6
 800121e:	f000 f81d 	bl	800125c <_isatty_r>
 8001222:	b128      	cbz	r0, 8001230 <__smakebuf_r+0x70>
 8001224:	89a3      	ldrh	r3, [r4, #12]
 8001226:	f023 0303 	bic.w	r3, r3, #3
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	81a3      	strh	r3, [r4, #12]
 8001230:	89a3      	ldrh	r3, [r4, #12]
 8001232:	431d      	orrs	r5, r3
 8001234:	81a5      	strh	r5, [r4, #12]
 8001236:	e7cf      	b.n	80011d8 <__smakebuf_r+0x18>

08001238 <_fstat_r>:
 8001238:	b538      	push	{r3, r4, r5, lr}
 800123a:	4d07      	ldr	r5, [pc, #28]	@ (8001258 <_fstat_r+0x20>)
 800123c:	2300      	movs	r3, #0
 800123e:	4604      	mov	r4, r0
 8001240:	4608      	mov	r0, r1
 8001242:	4611      	mov	r1, r2
 8001244:	602b      	str	r3, [r5, #0]
 8001246:	f7ff fafb 	bl	8000840 <_fstat>
 800124a:	1c43      	adds	r3, r0, #1
 800124c:	d102      	bne.n	8001254 <_fstat_r+0x1c>
 800124e:	682b      	ldr	r3, [r5, #0]
 8001250:	b103      	cbz	r3, 8001254 <_fstat_r+0x1c>
 8001252:	6023      	str	r3, [r4, #0]
 8001254:	bd38      	pop	{r3, r4, r5, pc}
 8001256:	bf00      	nop
 8001258:	20000210 	.word	0x20000210

0800125c <_isatty_r>:
 800125c:	b538      	push	{r3, r4, r5, lr}
 800125e:	4d06      	ldr	r5, [pc, #24]	@ (8001278 <_isatty_r+0x1c>)
 8001260:	2300      	movs	r3, #0
 8001262:	4604      	mov	r4, r0
 8001264:	4608      	mov	r0, r1
 8001266:	602b      	str	r3, [r5, #0]
 8001268:	f7ff faf9 	bl	800085e <_isatty>
 800126c:	1c43      	adds	r3, r0, #1
 800126e:	d102      	bne.n	8001276 <_isatty_r+0x1a>
 8001270:	682b      	ldr	r3, [r5, #0]
 8001272:	b103      	cbz	r3, 8001276 <_isatty_r+0x1a>
 8001274:	6023      	str	r3, [r4, #0]
 8001276:	bd38      	pop	{r3, r4, r5, pc}
 8001278:	20000210 	.word	0x20000210

0800127c <_sbrk_r>:
 800127c:	b538      	push	{r3, r4, r5, lr}
 800127e:	4d06      	ldr	r5, [pc, #24]	@ (8001298 <_sbrk_r+0x1c>)
 8001280:	2300      	movs	r3, #0
 8001282:	4604      	mov	r4, r0
 8001284:	4608      	mov	r0, r1
 8001286:	602b      	str	r3, [r5, #0]
 8001288:	f7ff fb00 	bl	800088c <_sbrk>
 800128c:	1c43      	adds	r3, r0, #1
 800128e:	d102      	bne.n	8001296 <_sbrk_r+0x1a>
 8001290:	682b      	ldr	r3, [r5, #0]
 8001292:	b103      	cbz	r3, 8001296 <_sbrk_r+0x1a>
 8001294:	6023      	str	r3, [r4, #0]
 8001296:	bd38      	pop	{r3, r4, r5, pc}
 8001298:	20000210 	.word	0x20000210

0800129c <_init>:
 800129c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800129e:	bf00      	nop
 80012a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012a2:	bc08      	pop	{r3}
 80012a4:	469e      	mov	lr, r3
 80012a6:	4770      	bx	lr

080012a8 <_fini>:
 80012a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012aa:	bf00      	nop
 80012ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012ae:	bc08      	pop	{r3}
 80012b0:	469e      	mov	lr, r3
 80012b2:	4770      	bx	lr
